
STM32_CAN.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   0000010c  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         000071f0  08000110  08000110  00010110  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       000003dc  08007300  08007300  00017300  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080076dc  080076dc  000201f0  2**0
                  CONTENTS
  4 .ARM          00000000  080076dc  080076dc  000201f0  2**0
                  CONTENTS
  5 .preinit_array 00000000  080076dc  080076dc  000201f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080076dc  080076dc  000176dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080076e0  080076e0  000176e0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001f0  20000000  080076e4  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000254  200001f0  080078d4  000201f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000444  080078d4  00020444  2**0
                  ALLOC
 11 .ARM.attributes 00000029  00000000  00000000  000201f0  2**0
                  CONTENTS, READONLY
 12 .comment      00000043  00000000  00000000  00020219  2**0
                  CONTENTS, READONLY
 13 .debug_info   0000a1e4  00000000  00000000  0002025c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_abbrev 00001f21  00000000  00000000  0002a440  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_aranges 00000bc0  00000000  00000000  0002c368  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_rnglists 000008e7  00000000  00000000  0002cf28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_macro  0001889c  00000000  00000000  0002d80f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_line   0000d5a9  00000000  00000000  000460ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_str    000875ce  00000000  00000000  00053654  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_frame  0000411c  00000000  00000000  000dac24  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000004f  00000000  00000000  000ded40  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000110 <__do_global_dtors_aux>:
 8000110:	b510      	push	{r4, lr}
 8000112:	4c05      	ldr	r4, [pc, #20]	; (8000128 <__do_global_dtors_aux+0x18>)
 8000114:	7823      	ldrb	r3, [r4, #0]
 8000116:	b933      	cbnz	r3, 8000126 <__do_global_dtors_aux+0x16>
 8000118:	4b04      	ldr	r3, [pc, #16]	; (800012c <__do_global_dtors_aux+0x1c>)
 800011a:	b113      	cbz	r3, 8000122 <__do_global_dtors_aux+0x12>
 800011c:	4804      	ldr	r0, [pc, #16]	; (8000130 <__do_global_dtors_aux+0x20>)
 800011e:	f3af 8000 	nop.w
 8000122:	2301      	movs	r3, #1
 8000124:	7023      	strb	r3, [r4, #0]
 8000126:	bd10      	pop	{r4, pc}
 8000128:	200001f0 	.word	0x200001f0
 800012c:	00000000 	.word	0x00000000
 8000130:	080072e8 	.word	0x080072e8

08000134 <frame_dummy>:
 8000134:	b508      	push	{r3, lr}
 8000136:	4b03      	ldr	r3, [pc, #12]	; (8000144 <frame_dummy+0x10>)
 8000138:	b11b      	cbz	r3, 8000142 <frame_dummy+0xe>
 800013a:	4903      	ldr	r1, [pc, #12]	; (8000148 <frame_dummy+0x14>)
 800013c:	4803      	ldr	r0, [pc, #12]	; (800014c <frame_dummy+0x18>)
 800013e:	f3af 8000 	nop.w
 8000142:	bd08      	pop	{r3, pc}
 8000144:	00000000 	.word	0x00000000
 8000148:	200001f4 	.word	0x200001f4
 800014c:	080072e8 	.word	0x080072e8

08000150 <strlen>:
 8000150:	4603      	mov	r3, r0
 8000152:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000156:	2a00      	cmp	r2, #0
 8000158:	d1fb      	bne.n	8000152 <strlen+0x2>
 800015a:	1a18      	subs	r0, r3, r0
 800015c:	3801      	subs	r0, #1
 800015e:	4770      	bx	lr

08000160 <__aeabi_fmul>:
 8000160:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000164:	ea1c 52d0 	ands.w	r2, ip, r0, lsr #23
 8000168:	bf1e      	ittt	ne
 800016a:	ea1c 53d1 	andsne.w	r3, ip, r1, lsr #23
 800016e:	ea92 0f0c 	teqne	r2, ip
 8000172:	ea93 0f0c 	teqne	r3, ip
 8000176:	d06f      	beq.n	8000258 <__aeabi_fmul+0xf8>
 8000178:	441a      	add	r2, r3
 800017a:	ea80 0c01 	eor.w	ip, r0, r1
 800017e:	0240      	lsls	r0, r0, #9
 8000180:	bf18      	it	ne
 8000182:	ea5f 2141 	movsne.w	r1, r1, lsl #9
 8000186:	d01e      	beq.n	80001c6 <__aeabi_fmul+0x66>
 8000188:	f04f 6300 	mov.w	r3, #134217728	; 0x8000000
 800018c:	ea43 1050 	orr.w	r0, r3, r0, lsr #5
 8000190:	ea43 1151 	orr.w	r1, r3, r1, lsr #5
 8000194:	fba0 3101 	umull	r3, r1, r0, r1
 8000198:	f00c 4000 	and.w	r0, ip, #2147483648	; 0x80000000
 800019c:	f5b1 0f00 	cmp.w	r1, #8388608	; 0x800000
 80001a0:	bf3e      	ittt	cc
 80001a2:	0049      	lslcc	r1, r1, #1
 80001a4:	ea41 71d3 	orrcc.w	r1, r1, r3, lsr #31
 80001a8:	005b      	lslcc	r3, r3, #1
 80001aa:	ea40 0001 	orr.w	r0, r0, r1
 80001ae:	f162 027f 	sbc.w	r2, r2, #127	; 0x7f
 80001b2:	2afd      	cmp	r2, #253	; 0xfd
 80001b4:	d81d      	bhi.n	80001f2 <__aeabi_fmul+0x92>
 80001b6:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 80001ba:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 80001be:	bf08      	it	eq
 80001c0:	f020 0001 	biceq.w	r0, r0, #1
 80001c4:	4770      	bx	lr
 80001c6:	f090 0f00 	teq	r0, #0
 80001ca:	f00c 4c00 	and.w	ip, ip, #2147483648	; 0x80000000
 80001ce:	bf08      	it	eq
 80001d0:	0249      	lsleq	r1, r1, #9
 80001d2:	ea4c 2050 	orr.w	r0, ip, r0, lsr #9
 80001d6:	ea40 2051 	orr.w	r0, r0, r1, lsr #9
 80001da:	3a7f      	subs	r2, #127	; 0x7f
 80001dc:	bfc2      	ittt	gt
 80001de:	f1d2 03ff 	rsbsgt	r3, r2, #255	; 0xff
 80001e2:	ea40 50c2 	orrgt.w	r0, r0, r2, lsl #23
 80001e6:	4770      	bxgt	lr
 80001e8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80001ec:	f04f 0300 	mov.w	r3, #0
 80001f0:	3a01      	subs	r2, #1
 80001f2:	dc5d      	bgt.n	80002b0 <__aeabi_fmul+0x150>
 80001f4:	f112 0f19 	cmn.w	r2, #25
 80001f8:	bfdc      	itt	le
 80001fa:	f000 4000 	andle.w	r0, r0, #2147483648	; 0x80000000
 80001fe:	4770      	bxle	lr
 8000200:	f1c2 0200 	rsb	r2, r2, #0
 8000204:	0041      	lsls	r1, r0, #1
 8000206:	fa21 f102 	lsr.w	r1, r1, r2
 800020a:	f1c2 0220 	rsb	r2, r2, #32
 800020e:	fa00 fc02 	lsl.w	ip, r0, r2
 8000212:	ea5f 0031 	movs.w	r0, r1, rrx
 8000216:	f140 0000 	adc.w	r0, r0, #0
 800021a:	ea53 034c 	orrs.w	r3, r3, ip, lsl #1
 800021e:	bf08      	it	eq
 8000220:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000224:	4770      	bx	lr
 8000226:	f092 0f00 	teq	r2, #0
 800022a:	f000 4c00 	and.w	ip, r0, #2147483648	; 0x80000000
 800022e:	bf02      	ittt	eq
 8000230:	0040      	lsleq	r0, r0, #1
 8000232:	f410 0f00 	tsteq.w	r0, #8388608	; 0x800000
 8000236:	3a01      	subeq	r2, #1
 8000238:	d0f9      	beq.n	800022e <__aeabi_fmul+0xce>
 800023a:	ea40 000c 	orr.w	r0, r0, ip
 800023e:	f093 0f00 	teq	r3, #0
 8000242:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000246:	bf02      	ittt	eq
 8000248:	0049      	lsleq	r1, r1, #1
 800024a:	f411 0f00 	tsteq.w	r1, #8388608	; 0x800000
 800024e:	3b01      	subeq	r3, #1
 8000250:	d0f9      	beq.n	8000246 <__aeabi_fmul+0xe6>
 8000252:	ea41 010c 	orr.w	r1, r1, ip
 8000256:	e78f      	b.n	8000178 <__aeabi_fmul+0x18>
 8000258:	ea0c 53d1 	and.w	r3, ip, r1, lsr #23
 800025c:	ea92 0f0c 	teq	r2, ip
 8000260:	bf18      	it	ne
 8000262:	ea93 0f0c 	teqne	r3, ip
 8000266:	d00a      	beq.n	800027e <__aeabi_fmul+0x11e>
 8000268:	f030 4c00 	bics.w	ip, r0, #2147483648	; 0x80000000
 800026c:	bf18      	it	ne
 800026e:	f031 4c00 	bicsne.w	ip, r1, #2147483648	; 0x80000000
 8000272:	d1d8      	bne.n	8000226 <__aeabi_fmul+0xc6>
 8000274:	ea80 0001 	eor.w	r0, r0, r1
 8000278:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 800027c:	4770      	bx	lr
 800027e:	f090 0f00 	teq	r0, #0
 8000282:	bf17      	itett	ne
 8000284:	f090 4f00 	teqne	r0, #2147483648	; 0x80000000
 8000288:	4608      	moveq	r0, r1
 800028a:	f091 0f00 	teqne	r1, #0
 800028e:	f091 4f00 	teqne	r1, #2147483648	; 0x80000000
 8000292:	d014      	beq.n	80002be <__aeabi_fmul+0x15e>
 8000294:	ea92 0f0c 	teq	r2, ip
 8000298:	d101      	bne.n	800029e <__aeabi_fmul+0x13e>
 800029a:	0242      	lsls	r2, r0, #9
 800029c:	d10f      	bne.n	80002be <__aeabi_fmul+0x15e>
 800029e:	ea93 0f0c 	teq	r3, ip
 80002a2:	d103      	bne.n	80002ac <__aeabi_fmul+0x14c>
 80002a4:	024b      	lsls	r3, r1, #9
 80002a6:	bf18      	it	ne
 80002a8:	4608      	movne	r0, r1
 80002aa:	d108      	bne.n	80002be <__aeabi_fmul+0x15e>
 80002ac:	ea80 0001 	eor.w	r0, r0, r1
 80002b0:	f000 4000 	and.w	r0, r0, #2147483648	; 0x80000000
 80002b4:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002b8:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 80002bc:	4770      	bx	lr
 80002be:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 80002c2:	f440 0040 	orr.w	r0, r0, #12582912	; 0xc00000
 80002c6:	4770      	bx	lr

080002c8 <__aeabi_drsub>:
 80002c8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80002cc:	e002      	b.n	80002d4 <__adddf3>
 80002ce:	bf00      	nop

080002d0 <__aeabi_dsub>:
 80002d0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080002d4 <__adddf3>:
 80002d4:	b530      	push	{r4, r5, lr}
 80002d6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002da:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002de:	ea94 0f05 	teq	r4, r5
 80002e2:	bf08      	it	eq
 80002e4:	ea90 0f02 	teqeq	r0, r2
 80002e8:	bf1f      	itttt	ne
 80002ea:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002ee:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002f2:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002f6:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002fa:	f000 80e2 	beq.w	80004c2 <__adddf3+0x1ee>
 80002fe:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000302:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000306:	bfb8      	it	lt
 8000308:	426d      	neglt	r5, r5
 800030a:	dd0c      	ble.n	8000326 <__adddf3+0x52>
 800030c:	442c      	add	r4, r5
 800030e:	ea80 0202 	eor.w	r2, r0, r2
 8000312:	ea81 0303 	eor.w	r3, r1, r3
 8000316:	ea82 0000 	eor.w	r0, r2, r0
 800031a:	ea83 0101 	eor.w	r1, r3, r1
 800031e:	ea80 0202 	eor.w	r2, r0, r2
 8000322:	ea81 0303 	eor.w	r3, r1, r3
 8000326:	2d36      	cmp	r5, #54	; 0x36
 8000328:	bf88      	it	hi
 800032a:	bd30      	pophi	{r4, r5, pc}
 800032c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000330:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000334:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000338:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800033c:	d002      	beq.n	8000344 <__adddf3+0x70>
 800033e:	4240      	negs	r0, r0
 8000340:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000344:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000348:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800034c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000350:	d002      	beq.n	8000358 <__adddf3+0x84>
 8000352:	4252      	negs	r2, r2
 8000354:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000358:	ea94 0f05 	teq	r4, r5
 800035c:	f000 80a7 	beq.w	80004ae <__adddf3+0x1da>
 8000360:	f1a4 0401 	sub.w	r4, r4, #1
 8000364:	f1d5 0e20 	rsbs	lr, r5, #32
 8000368:	db0d      	blt.n	8000386 <__adddf3+0xb2>
 800036a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800036e:	fa22 f205 	lsr.w	r2, r2, r5
 8000372:	1880      	adds	r0, r0, r2
 8000374:	f141 0100 	adc.w	r1, r1, #0
 8000378:	fa03 f20e 	lsl.w	r2, r3, lr
 800037c:	1880      	adds	r0, r0, r2
 800037e:	fa43 f305 	asr.w	r3, r3, r5
 8000382:	4159      	adcs	r1, r3
 8000384:	e00e      	b.n	80003a4 <__adddf3+0xd0>
 8000386:	f1a5 0520 	sub.w	r5, r5, #32
 800038a:	f10e 0e20 	add.w	lr, lr, #32
 800038e:	2a01      	cmp	r2, #1
 8000390:	fa03 fc0e 	lsl.w	ip, r3, lr
 8000394:	bf28      	it	cs
 8000396:	f04c 0c02 	orrcs.w	ip, ip, #2
 800039a:	fa43 f305 	asr.w	r3, r3, r5
 800039e:	18c0      	adds	r0, r0, r3
 80003a0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80003a4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80003a8:	d507      	bpl.n	80003ba <__adddf3+0xe6>
 80003aa:	f04f 0e00 	mov.w	lr, #0
 80003ae:	f1dc 0c00 	rsbs	ip, ip, #0
 80003b2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80003b6:	eb6e 0101 	sbc.w	r1, lr, r1
 80003ba:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80003be:	d31b      	bcc.n	80003f8 <__adddf3+0x124>
 80003c0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80003c4:	d30c      	bcc.n	80003e0 <__adddf3+0x10c>
 80003c6:	0849      	lsrs	r1, r1, #1
 80003c8:	ea5f 0030 	movs.w	r0, r0, rrx
 80003cc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80003d0:	f104 0401 	add.w	r4, r4, #1
 80003d4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003d8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80003dc:	f080 809a 	bcs.w	8000514 <__adddf3+0x240>
 80003e0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80003e4:	bf08      	it	eq
 80003e6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003ea:	f150 0000 	adcs.w	r0, r0, #0
 80003ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003f2:	ea41 0105 	orr.w	r1, r1, r5
 80003f6:	bd30      	pop	{r4, r5, pc}
 80003f8:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003fc:	4140      	adcs	r0, r0
 80003fe:	eb41 0101 	adc.w	r1, r1, r1
 8000402:	3c01      	subs	r4, #1
 8000404:	bf28      	it	cs
 8000406:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800040a:	d2e9      	bcs.n	80003e0 <__adddf3+0x10c>
 800040c:	f091 0f00 	teq	r1, #0
 8000410:	bf04      	itt	eq
 8000412:	4601      	moveq	r1, r0
 8000414:	2000      	moveq	r0, #0
 8000416:	fab1 f381 	clz	r3, r1
 800041a:	bf08      	it	eq
 800041c:	3320      	addeq	r3, #32
 800041e:	f1a3 030b 	sub.w	r3, r3, #11
 8000422:	f1b3 0220 	subs.w	r2, r3, #32
 8000426:	da0c      	bge.n	8000442 <__adddf3+0x16e>
 8000428:	320c      	adds	r2, #12
 800042a:	dd08      	ble.n	800043e <__adddf3+0x16a>
 800042c:	f102 0c14 	add.w	ip, r2, #20
 8000430:	f1c2 020c 	rsb	r2, r2, #12
 8000434:	fa01 f00c 	lsl.w	r0, r1, ip
 8000438:	fa21 f102 	lsr.w	r1, r1, r2
 800043c:	e00c      	b.n	8000458 <__adddf3+0x184>
 800043e:	f102 0214 	add.w	r2, r2, #20
 8000442:	bfd8      	it	le
 8000444:	f1c2 0c20 	rsble	ip, r2, #32
 8000448:	fa01 f102 	lsl.w	r1, r1, r2
 800044c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000450:	bfdc      	itt	le
 8000452:	ea41 010c 	orrle.w	r1, r1, ip
 8000456:	4090      	lslle	r0, r2
 8000458:	1ae4      	subs	r4, r4, r3
 800045a:	bfa2      	ittt	ge
 800045c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000460:	4329      	orrge	r1, r5
 8000462:	bd30      	popge	{r4, r5, pc}
 8000464:	ea6f 0404 	mvn.w	r4, r4
 8000468:	3c1f      	subs	r4, #31
 800046a:	da1c      	bge.n	80004a6 <__adddf3+0x1d2>
 800046c:	340c      	adds	r4, #12
 800046e:	dc0e      	bgt.n	800048e <__adddf3+0x1ba>
 8000470:	f104 0414 	add.w	r4, r4, #20
 8000474:	f1c4 0220 	rsb	r2, r4, #32
 8000478:	fa20 f004 	lsr.w	r0, r0, r4
 800047c:	fa01 f302 	lsl.w	r3, r1, r2
 8000480:	ea40 0003 	orr.w	r0, r0, r3
 8000484:	fa21 f304 	lsr.w	r3, r1, r4
 8000488:	ea45 0103 	orr.w	r1, r5, r3
 800048c:	bd30      	pop	{r4, r5, pc}
 800048e:	f1c4 040c 	rsb	r4, r4, #12
 8000492:	f1c4 0220 	rsb	r2, r4, #32
 8000496:	fa20 f002 	lsr.w	r0, r0, r2
 800049a:	fa01 f304 	lsl.w	r3, r1, r4
 800049e:	ea40 0003 	orr.w	r0, r0, r3
 80004a2:	4629      	mov	r1, r5
 80004a4:	bd30      	pop	{r4, r5, pc}
 80004a6:	fa21 f004 	lsr.w	r0, r1, r4
 80004aa:	4629      	mov	r1, r5
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	f094 0f00 	teq	r4, #0
 80004b2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80004b6:	bf06      	itte	eq
 80004b8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80004bc:	3401      	addeq	r4, #1
 80004be:	3d01      	subne	r5, #1
 80004c0:	e74e      	b.n	8000360 <__adddf3+0x8c>
 80004c2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004c6:	bf18      	it	ne
 80004c8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80004cc:	d029      	beq.n	8000522 <__adddf3+0x24e>
 80004ce:	ea94 0f05 	teq	r4, r5
 80004d2:	bf08      	it	eq
 80004d4:	ea90 0f02 	teqeq	r0, r2
 80004d8:	d005      	beq.n	80004e6 <__adddf3+0x212>
 80004da:	ea54 0c00 	orrs.w	ip, r4, r0
 80004de:	bf04      	itt	eq
 80004e0:	4619      	moveq	r1, r3
 80004e2:	4610      	moveq	r0, r2
 80004e4:	bd30      	pop	{r4, r5, pc}
 80004e6:	ea91 0f03 	teq	r1, r3
 80004ea:	bf1e      	ittt	ne
 80004ec:	2100      	movne	r1, #0
 80004ee:	2000      	movne	r0, #0
 80004f0:	bd30      	popne	{r4, r5, pc}
 80004f2:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004f6:	d105      	bne.n	8000504 <__adddf3+0x230>
 80004f8:	0040      	lsls	r0, r0, #1
 80004fa:	4149      	adcs	r1, r1
 80004fc:	bf28      	it	cs
 80004fe:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000502:	bd30      	pop	{r4, r5, pc}
 8000504:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000508:	bf3c      	itt	cc
 800050a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800050e:	bd30      	popcc	{r4, r5, pc}
 8000510:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000514:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000518:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800051c:	f04f 0000 	mov.w	r0, #0
 8000520:	bd30      	pop	{r4, r5, pc}
 8000522:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000526:	bf1a      	itte	ne
 8000528:	4619      	movne	r1, r3
 800052a:	4610      	movne	r0, r2
 800052c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000530:	bf1c      	itt	ne
 8000532:	460b      	movne	r3, r1
 8000534:	4602      	movne	r2, r0
 8000536:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800053a:	bf06      	itte	eq
 800053c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000540:	ea91 0f03 	teqeq	r1, r3
 8000544:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000548:	bd30      	pop	{r4, r5, pc}
 800054a:	bf00      	nop

0800054c <__aeabi_ui2d>:
 800054c:	f090 0f00 	teq	r0, #0
 8000550:	bf04      	itt	eq
 8000552:	2100      	moveq	r1, #0
 8000554:	4770      	bxeq	lr
 8000556:	b530      	push	{r4, r5, lr}
 8000558:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800055c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000560:	f04f 0500 	mov.w	r5, #0
 8000564:	f04f 0100 	mov.w	r1, #0
 8000568:	e750      	b.n	800040c <__adddf3+0x138>
 800056a:	bf00      	nop

0800056c <__aeabi_i2d>:
 800056c:	f090 0f00 	teq	r0, #0
 8000570:	bf04      	itt	eq
 8000572:	2100      	moveq	r1, #0
 8000574:	4770      	bxeq	lr
 8000576:	b530      	push	{r4, r5, lr}
 8000578:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800057c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000580:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000584:	bf48      	it	mi
 8000586:	4240      	negmi	r0, r0
 8000588:	f04f 0100 	mov.w	r1, #0
 800058c:	e73e      	b.n	800040c <__adddf3+0x138>
 800058e:	bf00      	nop

08000590 <__aeabi_f2d>:
 8000590:	0042      	lsls	r2, r0, #1
 8000592:	ea4f 01e2 	mov.w	r1, r2, asr #3
 8000596:	ea4f 0131 	mov.w	r1, r1, rrx
 800059a:	ea4f 7002 	mov.w	r0, r2, lsl #28
 800059e:	bf1f      	itttt	ne
 80005a0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80005a4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80005a8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80005ac:	4770      	bxne	lr
 80005ae:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80005b2:	bf08      	it	eq
 80005b4:	4770      	bxeq	lr
 80005b6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80005ba:	bf04      	itt	eq
 80005bc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80005c0:	4770      	bxeq	lr
 80005c2:	b530      	push	{r4, r5, lr}
 80005c4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80005c8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80005cc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80005d0:	e71c      	b.n	800040c <__adddf3+0x138>
 80005d2:	bf00      	nop

080005d4 <__aeabi_ul2d>:
 80005d4:	ea50 0201 	orrs.w	r2, r0, r1
 80005d8:	bf08      	it	eq
 80005da:	4770      	bxeq	lr
 80005dc:	b530      	push	{r4, r5, lr}
 80005de:	f04f 0500 	mov.w	r5, #0
 80005e2:	e00a      	b.n	80005fa <__aeabi_l2d+0x16>

080005e4 <__aeabi_l2d>:
 80005e4:	ea50 0201 	orrs.w	r2, r0, r1
 80005e8:	bf08      	it	eq
 80005ea:	4770      	bxeq	lr
 80005ec:	b530      	push	{r4, r5, lr}
 80005ee:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 80005f2:	d502      	bpl.n	80005fa <__aeabi_l2d+0x16>
 80005f4:	4240      	negs	r0, r0
 80005f6:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005fa:	f44f 6480 	mov.w	r4, #1024	; 0x400
 80005fe:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000602:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000606:	f43f aed8 	beq.w	80003ba <__adddf3+0xe6>
 800060a:	f04f 0203 	mov.w	r2, #3
 800060e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000612:	bf18      	it	ne
 8000614:	3203      	addne	r2, #3
 8000616:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800061a:	bf18      	it	ne
 800061c:	3203      	addne	r2, #3
 800061e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000622:	f1c2 0320 	rsb	r3, r2, #32
 8000626:	fa00 fc03 	lsl.w	ip, r0, r3
 800062a:	fa20 f002 	lsr.w	r0, r0, r2
 800062e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000632:	ea40 000e 	orr.w	r0, r0, lr
 8000636:	fa21 f102 	lsr.w	r1, r1, r2
 800063a:	4414      	add	r4, r2
 800063c:	e6bd      	b.n	80003ba <__adddf3+0xe6>
 800063e:	bf00      	nop

08000640 <__aeabi_dmul>:
 8000640:	b570      	push	{r4, r5, r6, lr}
 8000642:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000646:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800064a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800064e:	bf1d      	ittte	ne
 8000650:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000654:	ea94 0f0c 	teqne	r4, ip
 8000658:	ea95 0f0c 	teqne	r5, ip
 800065c:	f000 f8de 	bleq	800081c <__aeabi_dmul+0x1dc>
 8000660:	442c      	add	r4, r5
 8000662:	ea81 0603 	eor.w	r6, r1, r3
 8000666:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800066a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800066e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000672:	bf18      	it	ne
 8000674:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000678:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800067c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000680:	d038      	beq.n	80006f4 <__aeabi_dmul+0xb4>
 8000682:	fba0 ce02 	umull	ip, lr, r0, r2
 8000686:	f04f 0500 	mov.w	r5, #0
 800068a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800068e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 8000692:	fbe0 e503 	umlal	lr, r5, r0, r3
 8000696:	f04f 0600 	mov.w	r6, #0
 800069a:	fbe1 5603 	umlal	r5, r6, r1, r3
 800069e:	f09c 0f00 	teq	ip, #0
 80006a2:	bf18      	it	ne
 80006a4:	f04e 0e01 	orrne.w	lr, lr, #1
 80006a8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80006ac:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80006b0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80006b4:	d204      	bcs.n	80006c0 <__aeabi_dmul+0x80>
 80006b6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80006ba:	416d      	adcs	r5, r5
 80006bc:	eb46 0606 	adc.w	r6, r6, r6
 80006c0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80006c4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80006c8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80006cc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80006d0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80006d4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80006d8:	bf88      	it	hi
 80006da:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80006de:	d81e      	bhi.n	800071e <__aeabi_dmul+0xde>
 80006e0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80006e4:	bf08      	it	eq
 80006e6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006ea:	f150 0000 	adcs.w	r0, r0, #0
 80006ee:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 80006f8:	ea46 0101 	orr.w	r1, r6, r1
 80006fc:	ea40 0002 	orr.w	r0, r0, r2
 8000700:	ea81 0103 	eor.w	r1, r1, r3
 8000704:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000708:	bfc2      	ittt	gt
 800070a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800070e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000712:	bd70      	popgt	{r4, r5, r6, pc}
 8000714:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000718:	f04f 0e00 	mov.w	lr, #0
 800071c:	3c01      	subs	r4, #1
 800071e:	f300 80ab 	bgt.w	8000878 <__aeabi_dmul+0x238>
 8000722:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000726:	bfde      	ittt	le
 8000728:	2000      	movle	r0, #0
 800072a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800072e:	bd70      	pople	{r4, r5, r6, pc}
 8000730:	f1c4 0400 	rsb	r4, r4, #0
 8000734:	3c20      	subs	r4, #32
 8000736:	da35      	bge.n	80007a4 <__aeabi_dmul+0x164>
 8000738:	340c      	adds	r4, #12
 800073a:	dc1b      	bgt.n	8000774 <__aeabi_dmul+0x134>
 800073c:	f104 0414 	add.w	r4, r4, #20
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f305 	lsl.w	r3, r0, r5
 8000748:	fa20 f004 	lsr.w	r0, r0, r4
 800074c:	fa01 f205 	lsl.w	r2, r1, r5
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000758:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800075c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000760:	fa21 f604 	lsr.w	r6, r1, r4
 8000764:	eb42 0106 	adc.w	r1, r2, r6
 8000768:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800076c:	bf08      	it	eq
 800076e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000772:	bd70      	pop	{r4, r5, r6, pc}
 8000774:	f1c4 040c 	rsb	r4, r4, #12
 8000778:	f1c4 0520 	rsb	r5, r4, #32
 800077c:	fa00 f304 	lsl.w	r3, r0, r4
 8000780:	fa20 f005 	lsr.w	r0, r0, r5
 8000784:	fa01 f204 	lsl.w	r2, r1, r4
 8000788:	ea40 0002 	orr.w	r0, r0, r2
 800078c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000790:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000794:	f141 0100 	adc.w	r1, r1, #0
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f1c4 0520 	rsb	r5, r4, #32
 80007a8:	fa00 f205 	lsl.w	r2, r0, r5
 80007ac:	ea4e 0e02 	orr.w	lr, lr, r2
 80007b0:	fa20 f304 	lsr.w	r3, r0, r4
 80007b4:	fa01 f205 	lsl.w	r2, r1, r5
 80007b8:	ea43 0302 	orr.w	r3, r3, r2
 80007bc:	fa21 f004 	lsr.w	r0, r1, r4
 80007c0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80007c4:	fa21 f204 	lsr.w	r2, r1, r4
 80007c8:	ea20 0002 	bic.w	r0, r0, r2
 80007cc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80007d0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80007d4:	bf08      	it	eq
 80007d6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007da:	bd70      	pop	{r4, r5, r6, pc}
 80007dc:	f094 0f00 	teq	r4, #0
 80007e0:	d10f      	bne.n	8000802 <__aeabi_dmul+0x1c2>
 80007e2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80007e6:	0040      	lsls	r0, r0, #1
 80007e8:	eb41 0101 	adc.w	r1, r1, r1
 80007ec:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80007f0:	bf08      	it	eq
 80007f2:	3c01      	subeq	r4, #1
 80007f4:	d0f7      	beq.n	80007e6 <__aeabi_dmul+0x1a6>
 80007f6:	ea41 0106 	orr.w	r1, r1, r6
 80007fa:	f095 0f00 	teq	r5, #0
 80007fe:	bf18      	it	ne
 8000800:	4770      	bxne	lr
 8000802:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000806:	0052      	lsls	r2, r2, #1
 8000808:	eb43 0303 	adc.w	r3, r3, r3
 800080c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000810:	bf08      	it	eq
 8000812:	3d01      	subeq	r5, #1
 8000814:	d0f7      	beq.n	8000806 <__aeabi_dmul+0x1c6>
 8000816:	ea43 0306 	orr.w	r3, r3, r6
 800081a:	4770      	bx	lr
 800081c:	ea94 0f0c 	teq	r4, ip
 8000820:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000824:	bf18      	it	ne
 8000826:	ea95 0f0c 	teqne	r5, ip
 800082a:	d00c      	beq.n	8000846 <__aeabi_dmul+0x206>
 800082c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000830:	bf18      	it	ne
 8000832:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000836:	d1d1      	bne.n	80007dc <__aeabi_dmul+0x19c>
 8000838:	ea81 0103 	eor.w	r1, r1, r3
 800083c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000840:	f04f 0000 	mov.w	r0, #0
 8000844:	bd70      	pop	{r4, r5, r6, pc}
 8000846:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800084a:	bf06      	itte	eq
 800084c:	4610      	moveq	r0, r2
 800084e:	4619      	moveq	r1, r3
 8000850:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000854:	d019      	beq.n	800088a <__aeabi_dmul+0x24a>
 8000856:	ea94 0f0c 	teq	r4, ip
 800085a:	d102      	bne.n	8000862 <__aeabi_dmul+0x222>
 800085c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000860:	d113      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000862:	ea95 0f0c 	teq	r5, ip
 8000866:	d105      	bne.n	8000874 <__aeabi_dmul+0x234>
 8000868:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800086c:	bf1c      	itt	ne
 800086e:	4610      	movne	r0, r2
 8000870:	4619      	movne	r1, r3
 8000872:	d10a      	bne.n	800088a <__aeabi_dmul+0x24a>
 8000874:	ea81 0103 	eor.w	r1, r1, r3
 8000878:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800087c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000880:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000884:	f04f 0000 	mov.w	r0, #0
 8000888:	bd70      	pop	{r4, r5, r6, pc}
 800088a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800088e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 8000892:	bd70      	pop	{r4, r5, r6, pc}

08000894 <__aeabi_ddiv>:
 8000894:	b570      	push	{r4, r5, r6, lr}
 8000896:	f04f 0cff 	mov.w	ip, #255	; 0xff
 800089a:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800089e:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80008a2:	bf1d      	ittte	ne
 80008a4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80008a8:	ea94 0f0c 	teqne	r4, ip
 80008ac:	ea95 0f0c 	teqne	r5, ip
 80008b0:	f000 f8a7 	bleq	8000a02 <__aeabi_ddiv+0x16e>
 80008b4:	eba4 0405 	sub.w	r4, r4, r5
 80008b8:	ea81 0e03 	eor.w	lr, r1, r3
 80008bc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80008c0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80008c4:	f000 8088 	beq.w	80009d8 <__aeabi_ddiv+0x144>
 80008c8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80008cc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80008d0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80008d4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008d8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008dc:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008e0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008e4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008e8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80008ec:	429d      	cmp	r5, r3
 80008ee:	bf08      	it	eq
 80008f0:	4296      	cmpeq	r6, r2
 80008f2:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 80008f6:	f504 7440 	add.w	r4, r4, #768	; 0x300
 80008fa:	d202      	bcs.n	8000902 <__aeabi_ddiv+0x6e>
 80008fc:	085b      	lsrs	r3, r3, #1
 80008fe:	ea4f 0232 	mov.w	r2, r2, rrx
 8000902:	1ab6      	subs	r6, r6, r2
 8000904:	eb65 0503 	sbc.w	r5, r5, r3
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000912:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000916:	ebb6 0e02 	subs.w	lr, r6, r2
 800091a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800091e:	bf22      	ittt	cs
 8000920:	1ab6      	subcs	r6, r6, r2
 8000922:	4675      	movcs	r5, lr
 8000924:	ea40 000c 	orrcs.w	r0, r0, ip
 8000928:	085b      	lsrs	r3, r3, #1
 800092a:	ea4f 0232 	mov.w	r2, r2, rrx
 800092e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000932:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000936:	bf22      	ittt	cs
 8000938:	1ab6      	subcs	r6, r6, r2
 800093a:	4675      	movcs	r5, lr
 800093c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000940:	085b      	lsrs	r3, r3, #1
 8000942:	ea4f 0232 	mov.w	r2, r2, rrx
 8000946:	ebb6 0e02 	subs.w	lr, r6, r2
 800094a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800094e:	bf22      	ittt	cs
 8000950:	1ab6      	subcs	r6, r6, r2
 8000952:	4675      	movcs	r5, lr
 8000954:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000958:	085b      	lsrs	r3, r3, #1
 800095a:	ea4f 0232 	mov.w	r2, r2, rrx
 800095e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000962:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000966:	bf22      	ittt	cs
 8000968:	1ab6      	subcs	r6, r6, r2
 800096a:	4675      	movcs	r5, lr
 800096c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000970:	ea55 0e06 	orrs.w	lr, r5, r6
 8000974:	d018      	beq.n	80009a8 <__aeabi_ddiv+0x114>
 8000976:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800097a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800097e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000982:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000986:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800098a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800098e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 8000992:	d1c0      	bne.n	8000916 <__aeabi_ddiv+0x82>
 8000994:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000998:	d10b      	bne.n	80009b2 <__aeabi_ddiv+0x11e>
 800099a:	ea41 0100 	orr.w	r1, r1, r0
 800099e:	f04f 0000 	mov.w	r0, #0
 80009a2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80009a6:	e7b6      	b.n	8000916 <__aeabi_ddiv+0x82>
 80009a8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80009ac:	bf04      	itt	eq
 80009ae:	4301      	orreq	r1, r0
 80009b0:	2000      	moveq	r0, #0
 80009b2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80009b6:	bf88      	it	hi
 80009b8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80009bc:	f63f aeaf 	bhi.w	800071e <__aeabi_dmul+0xde>
 80009c0:	ebb5 0c03 	subs.w	ip, r5, r3
 80009c4:	bf04      	itt	eq
 80009c6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80009ca:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80009ce:	f150 0000 	adcs.w	r0, r0, #0
 80009d2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80009d6:	bd70      	pop	{r4, r5, r6, pc}
 80009d8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80009dc:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009e0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009e4:	bfc2      	ittt	gt
 80009e6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009ea:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009ee:	bd70      	popgt	{r4, r5, r6, pc}
 80009f0:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 80009f4:	f04f 0e00 	mov.w	lr, #0
 80009f8:	3c01      	subs	r4, #1
 80009fa:	e690      	b.n	800071e <__aeabi_dmul+0xde>
 80009fc:	ea45 0e06 	orr.w	lr, r5, r6
 8000a00:	e68d      	b.n	800071e <__aeabi_dmul+0xde>
 8000a02:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000a06:	ea94 0f0c 	teq	r4, ip
 8000a0a:	bf08      	it	eq
 8000a0c:	ea95 0f0c 	teqeq	r5, ip
 8000a10:	f43f af3b 	beq.w	800088a <__aeabi_dmul+0x24a>
 8000a14:	ea94 0f0c 	teq	r4, ip
 8000a18:	d10a      	bne.n	8000a30 <__aeabi_ddiv+0x19c>
 8000a1a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000a1e:	f47f af34 	bne.w	800088a <__aeabi_dmul+0x24a>
 8000a22:	ea95 0f0c 	teq	r5, ip
 8000a26:	f47f af25 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a2a:	4610      	mov	r0, r2
 8000a2c:	4619      	mov	r1, r3
 8000a2e:	e72c      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a30:	ea95 0f0c 	teq	r5, ip
 8000a34:	d106      	bne.n	8000a44 <__aeabi_ddiv+0x1b0>
 8000a36:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a3a:	f43f aefd 	beq.w	8000838 <__aeabi_dmul+0x1f8>
 8000a3e:	4610      	mov	r0, r2
 8000a40:	4619      	mov	r1, r3
 8000a42:	e722      	b.n	800088a <__aeabi_dmul+0x24a>
 8000a44:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a48:	bf18      	it	ne
 8000a4a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a4e:	f47f aec5 	bne.w	80007dc <__aeabi_dmul+0x19c>
 8000a52:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a56:	f47f af0d 	bne.w	8000874 <__aeabi_dmul+0x234>
 8000a5a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a5e:	f47f aeeb 	bne.w	8000838 <__aeabi_dmul+0x1f8>
 8000a62:	e712      	b.n	800088a <__aeabi_dmul+0x24a>

08000a64 <__gedf2>:
 8000a64:	f04f 3cff 	mov.w	ip, #4294967295
 8000a68:	e006      	b.n	8000a78 <__cmpdf2+0x4>
 8000a6a:	bf00      	nop

08000a6c <__ledf2>:
 8000a6c:	f04f 0c01 	mov.w	ip, #1
 8000a70:	e002      	b.n	8000a78 <__cmpdf2+0x4>
 8000a72:	bf00      	nop

08000a74 <__cmpdf2>:
 8000a74:	f04f 0c01 	mov.w	ip, #1
 8000a78:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a7c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a80:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a88:	bf18      	it	ne
 8000a8a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a8e:	d01b      	beq.n	8000ac8 <__cmpdf2+0x54>
 8000a90:	b001      	add	sp, #4
 8000a92:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a96:	bf0c      	ite	eq
 8000a98:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a9c:	ea91 0f03 	teqne	r1, r3
 8000aa0:	bf02      	ittt	eq
 8000aa2:	ea90 0f02 	teqeq	r0, r2
 8000aa6:	2000      	moveq	r0, #0
 8000aa8:	4770      	bxeq	lr
 8000aaa:	f110 0f00 	cmn.w	r0, #0
 8000aae:	ea91 0f03 	teq	r1, r3
 8000ab2:	bf58      	it	pl
 8000ab4:	4299      	cmppl	r1, r3
 8000ab6:	bf08      	it	eq
 8000ab8:	4290      	cmpeq	r0, r2
 8000aba:	bf2c      	ite	cs
 8000abc:	17d8      	asrcs	r0, r3, #31
 8000abe:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000ac2:	f040 0001 	orr.w	r0, r0, #1
 8000ac6:	4770      	bx	lr
 8000ac8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000acc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ad0:	d102      	bne.n	8000ad8 <__cmpdf2+0x64>
 8000ad2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000ad6:	d107      	bne.n	8000ae8 <__cmpdf2+0x74>
 8000ad8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000adc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000ae0:	d1d6      	bne.n	8000a90 <__cmpdf2+0x1c>
 8000ae2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000ae6:	d0d3      	beq.n	8000a90 <__cmpdf2+0x1c>
 8000ae8:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000aec:	4770      	bx	lr
 8000aee:	bf00      	nop

08000af0 <__aeabi_cdrcmple>:
 8000af0:	4684      	mov	ip, r0
 8000af2:	4610      	mov	r0, r2
 8000af4:	4662      	mov	r2, ip
 8000af6:	468c      	mov	ip, r1
 8000af8:	4619      	mov	r1, r3
 8000afa:	4663      	mov	r3, ip
 8000afc:	e000      	b.n	8000b00 <__aeabi_cdcmpeq>
 8000afe:	bf00      	nop

08000b00 <__aeabi_cdcmpeq>:
 8000b00:	b501      	push	{r0, lr}
 8000b02:	f7ff ffb7 	bl	8000a74 <__cmpdf2>
 8000b06:	2800      	cmp	r0, #0
 8000b08:	bf48      	it	mi
 8000b0a:	f110 0f00 	cmnmi.w	r0, #0
 8000b0e:	bd01      	pop	{r0, pc}

08000b10 <__aeabi_dcmpeq>:
 8000b10:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b14:	f7ff fff4 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b18:	bf0c      	ite	eq
 8000b1a:	2001      	moveq	r0, #1
 8000b1c:	2000      	movne	r0, #0
 8000b1e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b22:	bf00      	nop

08000b24 <__aeabi_dcmplt>:
 8000b24:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b28:	f7ff ffea 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b2c:	bf34      	ite	cc
 8000b2e:	2001      	movcc	r0, #1
 8000b30:	2000      	movcs	r0, #0
 8000b32:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b36:	bf00      	nop

08000b38 <__aeabi_dcmple>:
 8000b38:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b3c:	f7ff ffe0 	bl	8000b00 <__aeabi_cdcmpeq>
 8000b40:	bf94      	ite	ls
 8000b42:	2001      	movls	r0, #1
 8000b44:	2000      	movhi	r0, #0
 8000b46:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b4a:	bf00      	nop

08000b4c <__aeabi_dcmpge>:
 8000b4c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b50:	f7ff ffce 	bl	8000af0 <__aeabi_cdrcmple>
 8000b54:	bf94      	ite	ls
 8000b56:	2001      	movls	r0, #1
 8000b58:	2000      	movhi	r0, #0
 8000b5a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b5e:	bf00      	nop

08000b60 <__aeabi_dcmpgt>:
 8000b60:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b64:	f7ff ffc4 	bl	8000af0 <__aeabi_cdrcmple>
 8000b68:	bf34      	ite	cc
 8000b6a:	2001      	movcc	r0, #1
 8000b6c:	2000      	movcs	r0, #0
 8000b6e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b72:	bf00      	nop

08000b74 <__aeabi_dcmpun>:
 8000b74:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b78:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b7c:	d102      	bne.n	8000b84 <__aeabi_dcmpun+0x10>
 8000b7e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b82:	d10a      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b84:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b8c:	d102      	bne.n	8000b94 <__aeabi_dcmpun+0x20>
 8000b8e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b92:	d102      	bne.n	8000b9a <__aeabi_dcmpun+0x26>
 8000b94:	f04f 0000 	mov.w	r0, #0
 8000b98:	4770      	bx	lr
 8000b9a:	f04f 0001 	mov.w	r0, #1
 8000b9e:	4770      	bx	lr

08000ba0 <__aeabi_d2iz>:
 8000ba0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ba4:	f512 1200 	adds.w	r2, r2, #2097152	; 0x200000
 8000ba8:	d215      	bcs.n	8000bd6 <__aeabi_d2iz+0x36>
 8000baa:	d511      	bpl.n	8000bd0 <__aeabi_d2iz+0x30>
 8000bac:	f46f 7378 	mvn.w	r3, #992	; 0x3e0
 8000bb0:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bb4:	d912      	bls.n	8000bdc <__aeabi_d2iz+0x3c>
 8000bb6:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bba:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000bbe:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bc2:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000bc6:	fa23 f002 	lsr.w	r0, r3, r2
 8000bca:	bf18      	it	ne
 8000bcc:	4240      	negne	r0, r0
 8000bce:	4770      	bx	lr
 8000bd0:	f04f 0000 	mov.w	r0, #0
 8000bd4:	4770      	bx	lr
 8000bd6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bda:	d105      	bne.n	8000be8 <__aeabi_d2iz+0x48>
 8000bdc:	f011 4000 	ands.w	r0, r1, #2147483648	; 0x80000000
 8000be0:	bf08      	it	eq
 8000be2:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000be6:	4770      	bx	lr
 8000be8:	f04f 0000 	mov.w	r0, #0
 8000bec:	4770      	bx	lr
 8000bee:	bf00      	nop

08000bf0 <__aeabi_frsub>:
 8000bf0:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000bf4:	e002      	b.n	8000bfc <__addsf3>
 8000bf6:	bf00      	nop

08000bf8 <__aeabi_fsub>:
 8000bf8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000bfc <__addsf3>:
 8000bfc:	0042      	lsls	r2, r0, #1
 8000bfe:	bf1f      	itttt	ne
 8000c00:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000c04:	ea92 0f03 	teqne	r2, r3
 8000c08:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000c0c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c10:	d06a      	beq.n	8000ce8 <__addsf3+0xec>
 8000c12:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000c16:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000c1a:	bfc1      	itttt	gt
 8000c1c:	18d2      	addgt	r2, r2, r3
 8000c1e:	4041      	eorgt	r1, r0
 8000c20:	4048      	eorgt	r0, r1
 8000c22:	4041      	eorgt	r1, r0
 8000c24:	bfb8      	it	lt
 8000c26:	425b      	neglt	r3, r3
 8000c28:	2b19      	cmp	r3, #25
 8000c2a:	bf88      	it	hi
 8000c2c:	4770      	bxhi	lr
 8000c2e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000c32:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c36:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000c3a:	bf18      	it	ne
 8000c3c:	4240      	negne	r0, r0
 8000c3e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000c42:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000c46:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000c4a:	bf18      	it	ne
 8000c4c:	4249      	negne	r1, r1
 8000c4e:	ea92 0f03 	teq	r2, r3
 8000c52:	d03f      	beq.n	8000cd4 <__addsf3+0xd8>
 8000c54:	f1a2 0201 	sub.w	r2, r2, #1
 8000c58:	fa41 fc03 	asr.w	ip, r1, r3
 8000c5c:	eb10 000c 	adds.w	r0, r0, ip
 8000c60:	f1c3 0320 	rsb	r3, r3, #32
 8000c64:	fa01 f103 	lsl.w	r1, r1, r3
 8000c68:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c6c:	d502      	bpl.n	8000c74 <__addsf3+0x78>
 8000c6e:	4249      	negs	r1, r1
 8000c70:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000c74:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000c78:	d313      	bcc.n	8000ca2 <__addsf3+0xa6>
 8000c7a:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000c7e:	d306      	bcc.n	8000c8e <__addsf3+0x92>
 8000c80:	0840      	lsrs	r0, r0, #1
 8000c82:	ea4f 0131 	mov.w	r1, r1, rrx
 8000c86:	f102 0201 	add.w	r2, r2, #1
 8000c8a:	2afe      	cmp	r2, #254	; 0xfe
 8000c8c:	d251      	bcs.n	8000d32 <__addsf3+0x136>
 8000c8e:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000c92:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000c96:	bf08      	it	eq
 8000c98:	f020 0001 	biceq.w	r0, r0, #1
 8000c9c:	ea40 0003 	orr.w	r0, r0, r3
 8000ca0:	4770      	bx	lr
 8000ca2:	0049      	lsls	r1, r1, #1
 8000ca4:	eb40 0000 	adc.w	r0, r0, r0
 8000ca8:	3a01      	subs	r2, #1
 8000caa:	bf28      	it	cs
 8000cac:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000cb0:	d2ed      	bcs.n	8000c8e <__addsf3+0x92>
 8000cb2:	fab0 fc80 	clz	ip, r0
 8000cb6:	f1ac 0c08 	sub.w	ip, ip, #8
 8000cba:	ebb2 020c 	subs.w	r2, r2, ip
 8000cbe:	fa00 f00c 	lsl.w	r0, r0, ip
 8000cc2:	bfaa      	itet	ge
 8000cc4:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000cc8:	4252      	neglt	r2, r2
 8000cca:	4318      	orrge	r0, r3
 8000ccc:	bfbc      	itt	lt
 8000cce:	40d0      	lsrlt	r0, r2
 8000cd0:	4318      	orrlt	r0, r3
 8000cd2:	4770      	bx	lr
 8000cd4:	f092 0f00 	teq	r2, #0
 8000cd8:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000cdc:	bf06      	itte	eq
 8000cde:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000ce2:	3201      	addeq	r2, #1
 8000ce4:	3b01      	subne	r3, #1
 8000ce6:	e7b5      	b.n	8000c54 <__addsf3+0x58>
 8000ce8:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000cec:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000cf0:	bf18      	it	ne
 8000cf2:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000cf6:	d021      	beq.n	8000d3c <__addsf3+0x140>
 8000cf8:	ea92 0f03 	teq	r2, r3
 8000cfc:	d004      	beq.n	8000d08 <__addsf3+0x10c>
 8000cfe:	f092 0f00 	teq	r2, #0
 8000d02:	bf08      	it	eq
 8000d04:	4608      	moveq	r0, r1
 8000d06:	4770      	bx	lr
 8000d08:	ea90 0f01 	teq	r0, r1
 8000d0c:	bf1c      	itt	ne
 8000d0e:	2000      	movne	r0, #0
 8000d10:	4770      	bxne	lr
 8000d12:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000d16:	d104      	bne.n	8000d22 <__addsf3+0x126>
 8000d18:	0040      	lsls	r0, r0, #1
 8000d1a:	bf28      	it	cs
 8000d1c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000d20:	4770      	bx	lr
 8000d22:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000d26:	bf3c      	itt	cc
 8000d28:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000d2c:	4770      	bxcc	lr
 8000d2e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000d32:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000d36:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000d3a:	4770      	bx	lr
 8000d3c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000d40:	bf16      	itet	ne
 8000d42:	4608      	movne	r0, r1
 8000d44:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000d48:	4601      	movne	r1, r0
 8000d4a:	0242      	lsls	r2, r0, #9
 8000d4c:	bf06      	itte	eq
 8000d4e:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000d52:	ea90 0f01 	teqeq	r0, r1
 8000d56:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000d5a:	4770      	bx	lr

08000d5c <__aeabi_ui2f>:
 8000d5c:	f04f 0300 	mov.w	r3, #0
 8000d60:	e004      	b.n	8000d6c <__aeabi_i2f+0x8>
 8000d62:	bf00      	nop

08000d64 <__aeabi_i2f>:
 8000d64:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000d68:	bf48      	it	mi
 8000d6a:	4240      	negmi	r0, r0
 8000d6c:	ea5f 0c00 	movs.w	ip, r0
 8000d70:	bf08      	it	eq
 8000d72:	4770      	bxeq	lr
 8000d74:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000d78:	4601      	mov	r1, r0
 8000d7a:	f04f 0000 	mov.w	r0, #0
 8000d7e:	e01c      	b.n	8000dba <__aeabi_l2f+0x2a>

08000d80 <__aeabi_ul2f>:
 8000d80:	ea50 0201 	orrs.w	r2, r0, r1
 8000d84:	bf08      	it	eq
 8000d86:	4770      	bxeq	lr
 8000d88:	f04f 0300 	mov.w	r3, #0
 8000d8c:	e00a      	b.n	8000da4 <__aeabi_l2f+0x14>
 8000d8e:	bf00      	nop

08000d90 <__aeabi_l2f>:
 8000d90:	ea50 0201 	orrs.w	r2, r0, r1
 8000d94:	bf08      	it	eq
 8000d96:	4770      	bxeq	lr
 8000d98:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000d9c:	d502      	bpl.n	8000da4 <__aeabi_l2f+0x14>
 8000d9e:	4240      	negs	r0, r0
 8000da0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000da4:	ea5f 0c01 	movs.w	ip, r1
 8000da8:	bf02      	ittt	eq
 8000daa:	4684      	moveq	ip, r0
 8000dac:	4601      	moveq	r1, r0
 8000dae:	2000      	moveq	r0, #0
 8000db0:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000db4:	bf08      	it	eq
 8000db6:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000dba:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000dbe:	fabc f28c 	clz	r2, ip
 8000dc2:	3a08      	subs	r2, #8
 8000dc4:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000dc8:	db10      	blt.n	8000dec <__aeabi_l2f+0x5c>
 8000dca:	fa01 fc02 	lsl.w	ip, r1, r2
 8000dce:	4463      	add	r3, ip
 8000dd0:	fa00 fc02 	lsl.w	ip, r0, r2
 8000dd4:	f1c2 0220 	rsb	r2, r2, #32
 8000dd8:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000ddc:	fa20 f202 	lsr.w	r2, r0, r2
 8000de0:	eb43 0002 	adc.w	r0, r3, r2
 8000de4:	bf08      	it	eq
 8000de6:	f020 0001 	biceq.w	r0, r0, #1
 8000dea:	4770      	bx	lr
 8000dec:	f102 0220 	add.w	r2, r2, #32
 8000df0:	fa01 fc02 	lsl.w	ip, r1, r2
 8000df4:	f1c2 0220 	rsb	r2, r2, #32
 8000df8:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000dfc:	fa21 f202 	lsr.w	r2, r1, r2
 8000e00:	eb43 0002 	adc.w	r0, r3, r2
 8000e04:	bf08      	it	eq
 8000e06:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000e0a:	4770      	bx	lr

08000e0c <__aeabi_f2iz>:
 8000e0c:	ea4f 0240 	mov.w	r2, r0, lsl #1
 8000e10:	f1b2 4ffe 	cmp.w	r2, #2130706432	; 0x7f000000
 8000e14:	d30f      	bcc.n	8000e36 <__aeabi_f2iz+0x2a>
 8000e16:	f04f 039e 	mov.w	r3, #158	; 0x9e
 8000e1a:	ebb3 6212 	subs.w	r2, r3, r2, lsr #24
 8000e1e:	d90d      	bls.n	8000e3c <__aeabi_f2iz+0x30>
 8000e20:	ea4f 2300 	mov.w	r3, r0, lsl #8
 8000e24:	f043 4300 	orr.w	r3, r3, #2147483648	; 0x80000000
 8000e28:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000e2c:	fa23 f002 	lsr.w	r0, r3, r2
 8000e30:	bf18      	it	ne
 8000e32:	4240      	negne	r0, r0
 8000e34:	4770      	bx	lr
 8000e36:	f04f 0000 	mov.w	r0, #0
 8000e3a:	4770      	bx	lr
 8000e3c:	f112 0f61 	cmn.w	r2, #97	; 0x61
 8000e40:	d101      	bne.n	8000e46 <__aeabi_f2iz+0x3a>
 8000e42:	0242      	lsls	r2, r0, #9
 8000e44:	d105      	bne.n	8000e52 <__aeabi_f2iz+0x46>
 8000e46:	f010 4000 	ands.w	r0, r0, #2147483648	; 0x80000000
 8000e4a:	bf08      	it	eq
 8000e4c:	f06f 4000 	mvneq.w	r0, #2147483648	; 0x80000000
 8000e50:	4770      	bx	lr
 8000e52:	f04f 0000 	mov.w	r0, #0
 8000e56:	4770      	bx	lr

08000e58 <CANSPI_Initialize>:
  MCP2515_SetSleepMode();
}

/* Initialize CAN */
bool CANSPI_Initialize(void)
{
 8000e58:	b580      	push	{r7, lr}
 8000e5a:	b088      	sub	sp, #32
 8000e5c:	af00      	add	r7, sp, #0
  RXF5 RXF5reg;
  RXM0 RXM0reg;
  RXM1 RXM1reg;
      
  /* Intialize Rx Mask values */
  RXM0reg.RXM0SIDH = 0x00;
 8000e5e:	2300      	movs	r3, #0
 8000e60:	713b      	strb	r3, [r7, #4]
  RXM0reg.RXM0SIDL = 0x00;
 8000e62:	2300      	movs	r3, #0
 8000e64:	717b      	strb	r3, [r7, #5]
  RXM0reg.RXM0EID8 = 0x00;
 8000e66:	2300      	movs	r3, #0
 8000e68:	71bb      	strb	r3, [r7, #6]
  RXM0reg.RXM0EID0 = 0x00;
 8000e6a:	2300      	movs	r3, #0
 8000e6c:	71fb      	strb	r3, [r7, #7]
  
  RXM1reg.RXM1SIDH = 0x00;
 8000e6e:	2300      	movs	r3, #0
 8000e70:	703b      	strb	r3, [r7, #0]
  RXM1reg.RXM1SIDL = 0x00;
 8000e72:	2300      	movs	r3, #0
 8000e74:	707b      	strb	r3, [r7, #1]
  RXM1reg.RXM1EID8 = 0x00;
 8000e76:	2300      	movs	r3, #0
 8000e78:	70bb      	strb	r3, [r7, #2]
  RXM1reg.RXM1EID0 = 0x00;
 8000e7a:	2300      	movs	r3, #0
 8000e7c:	70fb      	strb	r3, [r7, #3]
  
  /* Intialize Rx Filter values */
  RXF0reg.RXF0SIDH = 0x00;      
 8000e7e:	2300      	movs	r3, #0
 8000e80:	773b      	strb	r3, [r7, #28]
  RXF0reg.RXF0SIDL = 0x00;      //Starndard Filter
 8000e82:	2300      	movs	r3, #0
 8000e84:	777b      	strb	r3, [r7, #29]
  RXF0reg.RXF0EID8 = 0x00;
 8000e86:	2300      	movs	r3, #0
 8000e88:	77bb      	strb	r3, [r7, #30]
  RXF0reg.RXF0EID0 = 0x00;
 8000e8a:	2300      	movs	r3, #0
 8000e8c:	77fb      	strb	r3, [r7, #31]
  
  RXF1reg.RXF1SIDH = 0x00;
 8000e8e:	2300      	movs	r3, #0
 8000e90:	763b      	strb	r3, [r7, #24]
  RXF1reg.RXF1SIDL = 0x08;      //Exntended Filter
 8000e92:	2308      	movs	r3, #8
 8000e94:	767b      	strb	r3, [r7, #25]
  RXF1reg.RXF1EID8 = 0x00;
 8000e96:	2300      	movs	r3, #0
 8000e98:	76bb      	strb	r3, [r7, #26]
  RXF1reg.RXF1EID0 = 0x00;
 8000e9a:	2300      	movs	r3, #0
 8000e9c:	76fb      	strb	r3, [r7, #27]
  
  RXF2reg.RXF2SIDH = 0x00;
 8000e9e:	2300      	movs	r3, #0
 8000ea0:	753b      	strb	r3, [r7, #20]
  RXF2reg.RXF2SIDL = 0x00;
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	757b      	strb	r3, [r7, #21]
  RXF2reg.RXF2EID8 = 0x00;
 8000ea6:	2300      	movs	r3, #0
 8000ea8:	75bb      	strb	r3, [r7, #22]
  RXF2reg.RXF2EID0 = 0x00;
 8000eaa:	2300      	movs	r3, #0
 8000eac:	75fb      	strb	r3, [r7, #23]
  
  RXF3reg.RXF3SIDH = 0x00;
 8000eae:	2300      	movs	r3, #0
 8000eb0:	743b      	strb	r3, [r7, #16]
  RXF3reg.RXF3SIDL = 0x00;
 8000eb2:	2300      	movs	r3, #0
 8000eb4:	747b      	strb	r3, [r7, #17]
  RXF3reg.RXF3EID8 = 0x00;
 8000eb6:	2300      	movs	r3, #0
 8000eb8:	74bb      	strb	r3, [r7, #18]
  RXF3reg.RXF3EID0 = 0x00;
 8000eba:	2300      	movs	r3, #0
 8000ebc:	74fb      	strb	r3, [r7, #19]
  
  RXF4reg.RXF4SIDH = 0x00;
 8000ebe:	2300      	movs	r3, #0
 8000ec0:	733b      	strb	r3, [r7, #12]
  RXF4reg.RXF4SIDL = 0x00;
 8000ec2:	2300      	movs	r3, #0
 8000ec4:	737b      	strb	r3, [r7, #13]
  RXF4reg.RXF4EID8 = 0x00;
 8000ec6:	2300      	movs	r3, #0
 8000ec8:	73bb      	strb	r3, [r7, #14]
  RXF4reg.RXF4EID0 = 0x00;
 8000eca:	2300      	movs	r3, #0
 8000ecc:	73fb      	strb	r3, [r7, #15]
  
  RXF5reg.RXF5SIDH = 0x00;
 8000ece:	2300      	movs	r3, #0
 8000ed0:	723b      	strb	r3, [r7, #8]
  RXF5reg.RXF5SIDL = 0x08;
 8000ed2:	2308      	movs	r3, #8
 8000ed4:	727b      	strb	r3, [r7, #9]
  RXF5reg.RXF5EID8 = 0x00;
 8000ed6:	2300      	movs	r3, #0
 8000ed8:	72bb      	strb	r3, [r7, #10]
  RXF5reg.RXF5EID0 = 0x00;
 8000eda:	2300      	movs	r3, #0
 8000edc:	72fb      	strb	r3, [r7, #11]
  
  /* Intialize MCP2515, check SPI */
  if(!MCP2515_Initialize())
 8000ede:	f000 fa0d 	bl	80012fc <MCP2515_Initialize>
 8000ee2:	4603      	mov	r3, r0
 8000ee4:	f083 0301 	eor.w	r3, r3, #1
 8000ee8:	b2db      	uxtb	r3, r3
 8000eea:	2b00      	cmp	r3, #0
 8000eec:	d001      	beq.n	8000ef2 <CANSPI_Initialize+0x9a>
  {
    return false;
 8000eee:	2300      	movs	r3, #0
 8000ef0:	e05e      	b.n	8000fb0 <CANSPI_Initialize+0x158>
  }
    
  /* Change mode as configuration mode */
  if(!MCP2515_SetConfigMode())
 8000ef2:	f000 fa25 	bl	8001340 <MCP2515_SetConfigMode>
 8000ef6:	4603      	mov	r3, r0
 8000ef8:	f083 0301 	eor.w	r3, r3, #1
 8000efc:	b2db      	uxtb	r3, r3
 8000efe:	2b00      	cmp	r3, #0
 8000f00:	d001      	beq.n	8000f06 <CANSPI_Initialize+0xae>
  {
    return false;
 8000f02:	2300      	movs	r3, #0
 8000f04:	e054      	b.n	8000fb0 <CANSPI_Initialize+0x158>
  }
  
  /* Configure filter & mask */
  MCP2515_WriteByteSequence(MCP2515_RXM0SIDH, MCP2515_RXM0EID0, &(RXM0reg.RXM0SIDH));
 8000f06:	1d3b      	adds	r3, r7, #4
 8000f08:	461a      	mov	r2, r3
 8000f0a:	2123      	movs	r1, #35	; 0x23
 8000f0c:	2020      	movs	r0, #32
 8000f0e:	f000 fabb 	bl	8001488 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXM1SIDH, MCP2515_RXM1EID0, &(RXM1reg.RXM1SIDH));
 8000f12:	463b      	mov	r3, r7
 8000f14:	461a      	mov	r2, r3
 8000f16:	2127      	movs	r1, #39	; 0x27
 8000f18:	2024      	movs	r0, #36	; 0x24
 8000f1a:	f000 fab5 	bl	8001488 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF0SIDH, MCP2515_RXF0EID0, &(RXF0reg.RXF0SIDH));
 8000f1e:	f107 031c 	add.w	r3, r7, #28
 8000f22:	461a      	mov	r2, r3
 8000f24:	2103      	movs	r1, #3
 8000f26:	2000      	movs	r0, #0
 8000f28:	f000 faae 	bl	8001488 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF1SIDH, MCP2515_RXF1EID0, &(RXF1reg.RXF1SIDH));
 8000f2c:	f107 0318 	add.w	r3, r7, #24
 8000f30:	461a      	mov	r2, r3
 8000f32:	2107      	movs	r1, #7
 8000f34:	2004      	movs	r0, #4
 8000f36:	f000 faa7 	bl	8001488 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF2SIDH, MCP2515_RXF2EID0, &(RXF2reg.RXF2SIDH));
 8000f3a:	f107 0314 	add.w	r3, r7, #20
 8000f3e:	461a      	mov	r2, r3
 8000f40:	210b      	movs	r1, #11
 8000f42:	2008      	movs	r0, #8
 8000f44:	f000 faa0 	bl	8001488 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF3SIDH, MCP2515_RXF3EID0, &(RXF3reg.RXF3SIDH));
 8000f48:	f107 0310 	add.w	r3, r7, #16
 8000f4c:	461a      	mov	r2, r3
 8000f4e:	2113      	movs	r1, #19
 8000f50:	2010      	movs	r0, #16
 8000f52:	f000 fa99 	bl	8001488 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF4SIDH, MCP2515_RXF4EID0, &(RXF4reg.RXF4SIDH));
 8000f56:	f107 030c 	add.w	r3, r7, #12
 8000f5a:	461a      	mov	r2, r3
 8000f5c:	2117      	movs	r1, #23
 8000f5e:	2014      	movs	r0, #20
 8000f60:	f000 fa92 	bl	8001488 <MCP2515_WriteByteSequence>
  MCP2515_WriteByteSequence(MCP2515_RXF5SIDH, MCP2515_RXF5EID0, &(RXF5reg.RXF5SIDH));
 8000f64:	f107 0308 	add.w	r3, r7, #8
 8000f68:	461a      	mov	r2, r3
 8000f6a:	211b      	movs	r1, #27
 8000f6c:	2018      	movs	r0, #24
 8000f6e:	f000 fa8b 	bl	8001488 <MCP2515_WriteByteSequence>
  
  /* Accept All (Standard + Extended) */
  MCP2515_WriteByte(MCP2515_RXB0CTRL, 0x04);    //Enable BUKT, Accept Filter 0
 8000f72:	2104      	movs	r1, #4
 8000f74:	2060      	movs	r0, #96	; 0x60
 8000f76:	f000 fa63 	bl	8001440 <MCP2515_WriteByte>
  MCP2515_WriteByte(MCP2515_RXB1CTRL, 0x01);    //Accept Filter 1
 8000f7a:	2101      	movs	r1, #1
 8000f7c:	2070      	movs	r0, #112	; 0x70
 8000f7e:	f000 fa5f 	bl	8001440 <MCP2515_WriteByte>
  * tbit = 1tq + 5tq + 6tq + 4tq = 16tq
  * 16tq = 2us = 500kbps
  */
  
  /* 00(SJW 1tq) 000000 */  
  MCP2515_WriteByte(MCP2515_CNF1, 0x00);
 8000f82:	2100      	movs	r1, #0
 8000f84:	202a      	movs	r0, #42	; 0x2a
 8000f86:	f000 fa5b 	bl	8001440 <MCP2515_WriteByte>
  
  /* 1 1 100(5tq) 101(6tq) */  
  MCP2515_WriteByte(MCP2515_CNF2, 0xE5);
 8000f8a:	21e5      	movs	r1, #229	; 0xe5
 8000f8c:	2029      	movs	r0, #41	; 0x29
 8000f8e:	f000 fa57 	bl	8001440 <MCP2515_WriteByte>
  
  /* 1 0 000 011(4tq) */  
  MCP2515_WriteByte(MCP2515_CNF3, 0x83);
 8000f92:	2183      	movs	r1, #131	; 0x83
 8000f94:	2028      	movs	r0, #40	; 0x28
 8000f96:	f000 fa53 	bl	8001440 <MCP2515_WriteByte>
  
  /* Normal 모드로 설정 */
  if(!MCP2515_SetNormalMode())
 8000f9a:	f000 f9ef 	bl	800137c <MCP2515_SetNormalMode>
 8000f9e:	4603      	mov	r3, r0
 8000fa0:	f083 0301 	eor.w	r3, r3, #1
 8000fa4:	b2db      	uxtb	r3, r3
 8000fa6:	2b00      	cmp	r3, #0
 8000fa8:	d001      	beq.n	8000fae <CANSPI_Initialize+0x156>
    return false;
 8000faa:	2300      	movs	r3, #0
 8000fac:	e000      	b.n	8000fb0 <CANSPI_Initialize+0x158>
  
  return true;
 8000fae:	2301      	movs	r3, #1
}
 8000fb0:	4618      	mov	r0, r3
 8000fb2:	3720      	adds	r7, #32
 8000fb4:	46bd      	mov	sp, r7
 8000fb6:	bd80      	pop	{r7, pc}

08000fb8 <CANSPI_Transmit>:

/* Transmit CAN message */
uint8_t CANSPI_Transmit(uCAN_MSG *tempCanMsg) 
{
 8000fb8:	b580      	push	{r7, lr}
 8000fba:	b084      	sub	sp, #16
 8000fbc:	af00      	add	r7, sp, #0
 8000fbe:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 8000fc0:	2300      	movs	r3, #0
 8000fc2:	73fb      	strb	r3, [r7, #15]
  
  idReg.tempSIDH = 0;
 8000fc4:	4b36      	ldr	r3, [pc, #216]	; (80010a0 <CANSPI_Transmit+0xe8>)
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	701a      	strb	r2, [r3, #0]
  idReg.tempSIDL = 0;
 8000fca:	4b35      	ldr	r3, [pc, #212]	; (80010a0 <CANSPI_Transmit+0xe8>)
 8000fcc:	2200      	movs	r2, #0
 8000fce:	705a      	strb	r2, [r3, #1]
  idReg.tempEID8 = 0;
 8000fd0:	4b33      	ldr	r3, [pc, #204]	; (80010a0 <CANSPI_Transmit+0xe8>)
 8000fd2:	2200      	movs	r2, #0
 8000fd4:	709a      	strb	r2, [r3, #2]
  idReg.tempEID0 = 0;
 8000fd6:	4b32      	ldr	r3, [pc, #200]	; (80010a0 <CANSPI_Transmit+0xe8>)
 8000fd8:	2200      	movs	r2, #0
 8000fda:	70da      	strb	r2, [r3, #3]
  
  ctrlStatus.ctrl_status = MCP2515_ReadStatus();
 8000fdc:	f000 fac2 	bl	8001564 <MCP2515_ReadStatus>
 8000fe0:	4603      	mov	r3, r0
 8000fe2:	461a      	mov	r2, r3
 8000fe4:	4b2f      	ldr	r3, [pc, #188]	; (80010a4 <CANSPI_Transmit+0xec>)
 8000fe6:	701a      	strb	r2, [r3, #0]
  
  /* Finding empty buffer */
  if (ctrlStatus.TXB0REQ != 1)
 8000fe8:	4b2e      	ldr	r3, [pc, #184]	; (80010a4 <CANSPI_Transmit+0xec>)
 8000fea:	781b      	ldrb	r3, [r3, #0]
 8000fec:	f003 0304 	and.w	r3, r3, #4
 8000ff0:	b2db      	uxtb	r3, r3
 8000ff2:	2b00      	cmp	r3, #0
 8000ff4:	d115      	bne.n	8001022 <CANSPI_Transmit+0x6a>
  {
    /* convert CAN ID for register */
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8000ff6:	687b      	ldr	r3, [r7, #4]
 8000ff8:	6858      	ldr	r0, [r3, #4]
 8000ffa:	687b      	ldr	r3, [r7, #4]
 8000ffc:	781b      	ldrb	r3, [r3, #0]
 8000ffe:	4a28      	ldr	r2, [pc, #160]	; (80010a0 <CANSPI_Transmit+0xe8>)
 8001000:	4619      	mov	r1, r3
 8001002:	f000 f927 	bl	8001254 <convertCANid2Reg>
    
    /* Load data to Tx Buffer */
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB0SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8001006:	687b      	ldr	r3, [r7, #4]
 8001008:	7a1a      	ldrb	r2, [r3, #8]
 800100a:	687b      	ldr	r3, [r7, #4]
 800100c:	3309      	adds	r3, #9
 800100e:	4924      	ldr	r1, [pc, #144]	; (80010a0 <CANSPI_Transmit+0xe8>)
 8001010:	2040      	movs	r0, #64	; 0x40
 8001012:	f000 fa63 	bl	80014dc <MCP2515_LoadTxSequence>
    
    /* Request to transmit */
    MCP2515_RequestToSend(MCP2515_RTS_TX0);
 8001016:	2081      	movs	r0, #129	; 0x81
 8001018:	f000 fa8a 	bl	8001530 <MCP2515_RequestToSend>
    
    returnValue = 1;
 800101c:	2301      	movs	r3, #1
 800101e:	73fb      	strb	r3, [r7, #15]
 8001020:	e038      	b.n	8001094 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB1REQ != 1)
 8001022:	4b20      	ldr	r3, [pc, #128]	; (80010a4 <CANSPI_Transmit+0xec>)
 8001024:	781b      	ldrb	r3, [r3, #0]
 8001026:	f003 0310 	and.w	r3, r3, #16
 800102a:	b2db      	uxtb	r3, r3
 800102c:	2b00      	cmp	r3, #0
 800102e:	d115      	bne.n	800105c <CANSPI_Transmit+0xa4>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 8001030:	687b      	ldr	r3, [r7, #4]
 8001032:	6858      	ldr	r0, [r3, #4]
 8001034:	687b      	ldr	r3, [r7, #4]
 8001036:	781b      	ldrb	r3, [r3, #0]
 8001038:	4a19      	ldr	r2, [pc, #100]	; (80010a0 <CANSPI_Transmit+0xe8>)
 800103a:	4619      	mov	r1, r3
 800103c:	f000 f90a 	bl	8001254 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB1SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 8001040:	687b      	ldr	r3, [r7, #4]
 8001042:	7a1a      	ldrb	r2, [r3, #8]
 8001044:	687b      	ldr	r3, [r7, #4]
 8001046:	3309      	adds	r3, #9
 8001048:	4915      	ldr	r1, [pc, #84]	; (80010a0 <CANSPI_Transmit+0xe8>)
 800104a:	2042      	movs	r0, #66	; 0x42
 800104c:	f000 fa46 	bl	80014dc <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX1);
 8001050:	2082      	movs	r0, #130	; 0x82
 8001052:	f000 fa6d 	bl	8001530 <MCP2515_RequestToSend>
    
    returnValue = 1;
 8001056:	2301      	movs	r3, #1
 8001058:	73fb      	strb	r3, [r7, #15]
 800105a:	e01b      	b.n	8001094 <CANSPI_Transmit+0xdc>
  }
  else if (ctrlStatus.TXB2REQ != 1)
 800105c:	4b11      	ldr	r3, [pc, #68]	; (80010a4 <CANSPI_Transmit+0xec>)
 800105e:	781b      	ldrb	r3, [r3, #0]
 8001060:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001064:	b2db      	uxtb	r3, r3
 8001066:	2b00      	cmp	r3, #0
 8001068:	d114      	bne.n	8001094 <CANSPI_Transmit+0xdc>
  {
    convertCANid2Reg(tempCanMsg->frame.id, tempCanMsg->frame.idType, &idReg);
 800106a:	687b      	ldr	r3, [r7, #4]
 800106c:	6858      	ldr	r0, [r3, #4]
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	4a0b      	ldr	r2, [pc, #44]	; (80010a0 <CANSPI_Transmit+0xe8>)
 8001074:	4619      	mov	r1, r3
 8001076:	f000 f8ed 	bl	8001254 <convertCANid2Reg>
    
    MCP2515_LoadTxSequence(MCP2515_LOAD_TXB2SIDH, &(idReg.tempSIDH), tempCanMsg->frame.dlc, &(tempCanMsg->frame.data0));
 800107a:	687b      	ldr	r3, [r7, #4]
 800107c:	7a1a      	ldrb	r2, [r3, #8]
 800107e:	687b      	ldr	r3, [r7, #4]
 8001080:	3309      	adds	r3, #9
 8001082:	4907      	ldr	r1, [pc, #28]	; (80010a0 <CANSPI_Transmit+0xe8>)
 8001084:	2044      	movs	r0, #68	; 0x44
 8001086:	f000 fa29 	bl	80014dc <MCP2515_LoadTxSequence>
    MCP2515_RequestToSend(MCP2515_RTS_TX2);
 800108a:	2084      	movs	r0, #132	; 0x84
 800108c:	f000 fa50 	bl	8001530 <MCP2515_RequestToSend>
    
    returnValue = 1;
 8001090:	2301      	movs	r3, #1
 8001092:	73fb      	strb	r3, [r7, #15]
  }
  
  return (returnValue);
 8001094:	7bfb      	ldrb	r3, [r7, #15]
}
 8001096:	4618      	mov	r0, r3
 8001098:	3710      	adds	r7, #16
 800109a:	46bd      	mov	sp, r7
 800109c:	bd80      	pop	{r7, pc}
 800109e:	bf00      	nop
 80010a0:	20000210 	.word	0x20000210
 80010a4:	2000020c 	.word	0x2000020c

080010a8 <CANSPI_Receive>:

/* Receive CAN message */
uint8_t CANSPI_Receive(uCAN_MSG *tempCanMsg) 
{
 80010a8:	b580      	push	{r7, lr}
 80010aa:	b088      	sub	sp, #32
 80010ac:	af00      	add	r7, sp, #0
 80010ae:	6078      	str	r0, [r7, #4]
  uint8_t returnValue = 0;
 80010b0:	2300      	movs	r3, #0
 80010b2:	77fb      	strb	r3, [r7, #31]
  rx_reg_t rxReg;
  ctrl_rx_status_t rxStatus;
  
  rxStatus.ctrl_rx_status = MCP2515_GetRxStatus();
 80010b4:	f000 fa72 	bl	800159c <MCP2515_GetRxStatus>
 80010b8:	4603      	mov	r3, r0
 80010ba:	733b      	strb	r3, [r7, #12]
  
  /* Check receive buffer */
  if (rxStatus.rxBuffer != 0)
 80010bc:	7b3b      	ldrb	r3, [r7, #12]
 80010be:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010c2:	b2db      	uxtb	r3, r3
 80010c4:	2b00      	cmp	r3, #0
 80010c6:	d066      	beq.n	8001196 <CANSPI_Receive+0xee>
  {
    /* finding buffer which has a message */
    if ((rxStatus.rxBuffer == MSG_IN_RXB0)|(rxStatus.rxBuffer == MSG_IN_BOTH_BUFFERS))
 80010c8:	7b3b      	ldrb	r3, [r7, #12]
 80010ca:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010ce:	b2db      	uxtb	r3, r3
 80010d0:	2b40      	cmp	r3, #64	; 0x40
 80010d2:	bf0c      	ite	eq
 80010d4:	2301      	moveq	r3, #1
 80010d6:	2300      	movne	r3, #0
 80010d8:	b2da      	uxtb	r2, r3
 80010da:	7b3b      	ldrb	r3, [r7, #12]
 80010dc:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 80010e0:	b2db      	uxtb	r3, r3
 80010e2:	2bc0      	cmp	r3, #192	; 0xc0
 80010e4:	bf0c      	ite	eq
 80010e6:	2301      	moveq	r3, #1
 80010e8:	2300      	movne	r3, #0
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	4313      	orrs	r3, r2
 80010ee:	b2db      	uxtb	r3, r3
 80010f0:	2b00      	cmp	r3, #0
 80010f2:	d007      	beq.n	8001104 <CANSPI_Receive+0x5c>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB0SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 80010f4:	f107 0310 	add.w	r3, r7, #16
 80010f8:	220d      	movs	r2, #13
 80010fa:	4619      	mov	r1, r3
 80010fc:	2090      	movs	r0, #144	; 0x90
 80010fe:	f000 f97d 	bl	80013fc <MCP2515_ReadRxSequence>
 8001102:	e00c      	b.n	800111e <CANSPI_Receive+0x76>
    }
    else if (rxStatus.rxBuffer == MSG_IN_RXB1)
 8001104:	7b3b      	ldrb	r3, [r7, #12]
 8001106:	f023 033f 	bic.w	r3, r3, #63	; 0x3f
 800110a:	b2db      	uxtb	r3, r3
 800110c:	2b80      	cmp	r3, #128	; 0x80
 800110e:	d106      	bne.n	800111e <CANSPI_Receive+0x76>
    {
      MCP2515_ReadRxSequence(MCP2515_READ_RXB1SIDH, rxReg.rx_reg_array, sizeof(rxReg.rx_reg_array));
 8001110:	f107 0310 	add.w	r3, r7, #16
 8001114:	220d      	movs	r2, #13
 8001116:	4619      	mov	r1, r3
 8001118:	2094      	movs	r0, #148	; 0x94
 800111a:	f000 f96f 	bl	80013fc <MCP2515_ReadRxSequence>
    }
    
    /* if the message is extended CAN type */
    if (rxStatus.msgType == dEXTENDED_CAN_MSG_ID_2_0B)
 800111e:	7b3b      	ldrb	r3, [r7, #12]
 8001120:	f003 0318 	and.w	r3, r3, #24
 8001124:	b2db      	uxtb	r3, r3
 8001126:	2b10      	cmp	r3, #16
 8001128:	d10c      	bne.n	8001144 <CANSPI_Receive+0x9c>
    {
      tempCanMsg->frame.idType = (uint8_t) dEXTENDED_CAN_MSG_ID_2_0B;
 800112a:	687b      	ldr	r3, [r7, #4]
 800112c:	2202      	movs	r2, #2
 800112e:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2ExtendedCANid(rxReg.RXBnEID8, rxReg.RXBnEID0, rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 8001130:	7cb8      	ldrb	r0, [r7, #18]
 8001132:	7cf9      	ldrb	r1, [r7, #19]
 8001134:	7c3a      	ldrb	r2, [r7, #16]
 8001136:	7c7b      	ldrb	r3, [r7, #17]
 8001138:	f000 f832 	bl	80011a0 <convertReg2ExtendedCANid>
 800113c:	4602      	mov	r2, r0
 800113e:	687b      	ldr	r3, [r7, #4]
 8001140:	605a      	str	r2, [r3, #4]
 8001142:	e00b      	b.n	800115c <CANSPI_Receive+0xb4>
    } 
    else 
    {
      /* Standard type */
      tempCanMsg->frame.idType = (uint8_t) dSTANDARD_CAN_MSG_ID_2_0B;
 8001144:	687b      	ldr	r3, [r7, #4]
 8001146:	2201      	movs	r2, #1
 8001148:	701a      	strb	r2, [r3, #0]
      tempCanMsg->frame.id = convertReg2StandardCANid(rxReg.RXBnSIDH, rxReg.RXBnSIDL);
 800114a:	7c3b      	ldrb	r3, [r7, #16]
 800114c:	7c7a      	ldrb	r2, [r7, #17]
 800114e:	4611      	mov	r1, r2
 8001150:	4618      	mov	r0, r3
 8001152:	f000 f863 	bl	800121c <convertReg2StandardCANid>
 8001156:	4602      	mov	r2, r0
 8001158:	687b      	ldr	r3, [r7, #4]
 800115a:	605a      	str	r2, [r3, #4]
    }
    
    tempCanMsg->frame.dlc   = rxReg.RXBnDLC;
 800115c:	7d3a      	ldrb	r2, [r7, #20]
 800115e:	687b      	ldr	r3, [r7, #4]
 8001160:	721a      	strb	r2, [r3, #8]
    tempCanMsg->frame.data0 = rxReg.RXBnD0;
 8001162:	7d7a      	ldrb	r2, [r7, #21]
 8001164:	687b      	ldr	r3, [r7, #4]
 8001166:	725a      	strb	r2, [r3, #9]
    tempCanMsg->frame.data1 = rxReg.RXBnD1;
 8001168:	7dba      	ldrb	r2, [r7, #22]
 800116a:	687b      	ldr	r3, [r7, #4]
 800116c:	729a      	strb	r2, [r3, #10]
    tempCanMsg->frame.data2 = rxReg.RXBnD2;
 800116e:	7dfa      	ldrb	r2, [r7, #23]
 8001170:	687b      	ldr	r3, [r7, #4]
 8001172:	72da      	strb	r2, [r3, #11]
    tempCanMsg->frame.data3 = rxReg.RXBnD3;
 8001174:	7e3a      	ldrb	r2, [r7, #24]
 8001176:	687b      	ldr	r3, [r7, #4]
 8001178:	731a      	strb	r2, [r3, #12]
    tempCanMsg->frame.data4 = rxReg.RXBnD4;
 800117a:	7e7a      	ldrb	r2, [r7, #25]
 800117c:	687b      	ldr	r3, [r7, #4]
 800117e:	735a      	strb	r2, [r3, #13]
    tempCanMsg->frame.data5 = rxReg.RXBnD5;
 8001180:	7eba      	ldrb	r2, [r7, #26]
 8001182:	687b      	ldr	r3, [r7, #4]
 8001184:	739a      	strb	r2, [r3, #14]
    tempCanMsg->frame.data6 = rxReg.RXBnD6;
 8001186:	7efa      	ldrb	r2, [r7, #27]
 8001188:	687b      	ldr	r3, [r7, #4]
 800118a:	73da      	strb	r2, [r3, #15]
    tempCanMsg->frame.data7 = rxReg.RXBnD7;
 800118c:	7f3a      	ldrb	r2, [r7, #28]
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	741a      	strb	r2, [r3, #16]
    
    returnValue = 1;
 8001192:	2301      	movs	r3, #1
 8001194:	77fb      	strb	r3, [r7, #31]
  }
  
  return (returnValue);
 8001196:	7ffb      	ldrb	r3, [r7, #31]
}
 8001198:	4618      	mov	r0, r3
 800119a:	3720      	adds	r7, #32
 800119c:	46bd      	mov	sp, r7
 800119e:	bd80      	pop	{r7, pc}

080011a0 <convertReg2ExtendedCANid>:
  return (returnValue);
}

/* convert register value to extended CAN ID */
static uint32_t convertReg2ExtendedCANid(uint8_t tempRXBn_EIDH, uint8_t tempRXBn_EIDL, uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 80011a0:	b490      	push	{r4, r7}
 80011a2:	b086      	sub	sp, #24
 80011a4:	af00      	add	r7, sp, #0
 80011a6:	4604      	mov	r4, r0
 80011a8:	4608      	mov	r0, r1
 80011aa:	4611      	mov	r1, r2
 80011ac:	461a      	mov	r2, r3
 80011ae:	4623      	mov	r3, r4
 80011b0:	71fb      	strb	r3, [r7, #7]
 80011b2:	4603      	mov	r3, r0
 80011b4:	71bb      	strb	r3, [r7, #6]
 80011b6:	460b      	mov	r3, r1
 80011b8:	717b      	strb	r3, [r7, #5]
 80011ba:	4613      	mov	r3, r2
 80011bc:	713b      	strb	r3, [r7, #4]
  uint32_t returnValue = 0;
 80011be:	2300      	movs	r3, #0
 80011c0:	617b      	str	r3, [r7, #20]
  uint32_t ConvertedID = 0;
 80011c2:	2300      	movs	r3, #0
 80011c4:	613b      	str	r3, [r7, #16]
  uint8_t CAN_standardLo_ID_lo2bits;
  uint8_t CAN_standardLo_ID_hi3bits;
  
  CAN_standardLo_ID_lo2bits = (tempRXBn_SIDL & 0x03);
 80011c6:	793b      	ldrb	r3, [r7, #4]
 80011c8:	f003 0303 	and.w	r3, r3, #3
 80011cc:	73fb      	strb	r3, [r7, #15]
  CAN_standardLo_ID_hi3bits = (tempRXBn_SIDL >> 5);
 80011ce:	793b      	ldrb	r3, [r7, #4]
 80011d0:	095b      	lsrs	r3, r3, #5
 80011d2:	73bb      	strb	r3, [r7, #14]
  ConvertedID = (tempRXBn_SIDH << 3);
 80011d4:	797b      	ldrb	r3, [r7, #5]
 80011d6:	00db      	lsls	r3, r3, #3
 80011d8:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_hi3bits;
 80011da:	7bbb      	ldrb	r3, [r7, #14]
 80011dc:	693a      	ldr	r2, [r7, #16]
 80011de:	4413      	add	r3, r2
 80011e0:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 2);
 80011e2:	693b      	ldr	r3, [r7, #16]
 80011e4:	009b      	lsls	r3, r3, #2
 80011e6:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + CAN_standardLo_ID_lo2bits;
 80011e8:	7bfb      	ldrb	r3, [r7, #15]
 80011ea:	693a      	ldr	r2, [r7, #16]
 80011ec:	4413      	add	r3, r2
 80011ee:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80011f0:	693b      	ldr	r3, [r7, #16]
 80011f2:	021b      	lsls	r3, r3, #8
 80011f4:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDH;
 80011f6:	79fb      	ldrb	r3, [r7, #7]
 80011f8:	693a      	ldr	r2, [r7, #16]
 80011fa:	4413      	add	r3, r2
 80011fc:	613b      	str	r3, [r7, #16]
  ConvertedID = (ConvertedID << 8);
 80011fe:	693b      	ldr	r3, [r7, #16]
 8001200:	021b      	lsls	r3, r3, #8
 8001202:	613b      	str	r3, [r7, #16]
  ConvertedID = ConvertedID + tempRXBn_EIDL;
 8001204:	79bb      	ldrb	r3, [r7, #6]
 8001206:	693a      	ldr	r2, [r7, #16]
 8001208:	4413      	add	r3, r2
 800120a:	613b      	str	r3, [r7, #16]
  returnValue = ConvertedID;    
 800120c:	693b      	ldr	r3, [r7, #16]
 800120e:	617b      	str	r3, [r7, #20]
  return (returnValue);
 8001210:	697b      	ldr	r3, [r7, #20]
}
 8001212:	4618      	mov	r0, r3
 8001214:	3718      	adds	r7, #24
 8001216:	46bd      	mov	sp, r7
 8001218:	bc90      	pop	{r4, r7}
 800121a:	4770      	bx	lr

0800121c <convertReg2StandardCANid>:

/* convert register value to standard CAN ID */
static uint32_t convertReg2StandardCANid(uint8_t tempRXBn_SIDH, uint8_t tempRXBn_SIDL) 
{
 800121c:	b480      	push	{r7}
 800121e:	b085      	sub	sp, #20
 8001220:	af00      	add	r7, sp, #0
 8001222:	4603      	mov	r3, r0
 8001224:	460a      	mov	r2, r1
 8001226:	71fb      	strb	r3, [r7, #7]
 8001228:	4613      	mov	r3, r2
 800122a:	71bb      	strb	r3, [r7, #6]
  uint32_t returnValue = 0;
 800122c:	2300      	movs	r3, #0
 800122e:	60fb      	str	r3, [r7, #12]
  uint32_t ConvertedID;
  
  ConvertedID = (tempRXBn_SIDH << 3);
 8001230:	79fb      	ldrb	r3, [r7, #7]
 8001232:	00db      	lsls	r3, r3, #3
 8001234:	60bb      	str	r3, [r7, #8]
  ConvertedID = ConvertedID + (tempRXBn_SIDL >> 5);
 8001236:	79bb      	ldrb	r3, [r7, #6]
 8001238:	095b      	lsrs	r3, r3, #5
 800123a:	b2db      	uxtb	r3, r3
 800123c:	461a      	mov	r2, r3
 800123e:	68bb      	ldr	r3, [r7, #8]
 8001240:	4413      	add	r3, r2
 8001242:	60bb      	str	r3, [r7, #8]
  returnValue = ConvertedID;
 8001244:	68bb      	ldr	r3, [r7, #8]
 8001246:	60fb      	str	r3, [r7, #12]
  
  return (returnValue);
 8001248:	68fb      	ldr	r3, [r7, #12]
}
 800124a:	4618      	mov	r0, r3
 800124c:	3714      	adds	r7, #20
 800124e:	46bd      	mov	sp, r7
 8001250:	bc80      	pop	{r7}
 8001252:	4770      	bx	lr

08001254 <convertCANid2Reg>:

/* convert CAN ID to register value */
static void convertCANid2Reg(uint32_t tempPassedInID, uint8_t canIdType, id_reg_t *passedIdReg) 
{
 8001254:	b480      	push	{r7}
 8001256:	b087      	sub	sp, #28
 8001258:	af00      	add	r7, sp, #0
 800125a:	60f8      	str	r0, [r7, #12]
 800125c:	460b      	mov	r3, r1
 800125e:	607a      	str	r2, [r7, #4]
 8001260:	72fb      	strb	r3, [r7, #11]
  uint8_t wipSIDL = 0;
 8001262:	2300      	movs	r3, #0
 8001264:	75fb      	strb	r3, [r7, #23]
  
  if (canIdType == dEXTENDED_CAN_MSG_ID_2_0B) 
 8001266:	7afb      	ldrb	r3, [r7, #11]
 8001268:	2b02      	cmp	r3, #2
 800126a:	d12e      	bne.n	80012ca <convertCANid2Reg+0x76>
  {
    //EID0
    passedIdReg->tempEID0 = 0xFF & tempPassedInID;
 800126c:	68fb      	ldr	r3, [r7, #12]
 800126e:	b2da      	uxtb	r2, r3
 8001270:	687b      	ldr	r3, [r7, #4]
 8001272:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID >> 8;
 8001274:	68fb      	ldr	r3, [r7, #12]
 8001276:	0a1b      	lsrs	r3, r3, #8
 8001278:	60fb      	str	r3, [r7, #12]
    
    //EID8
    passedIdReg->tempEID8 = 0xFF & tempPassedInID;
 800127a:	68fb      	ldr	r3, [r7, #12]
 800127c:	b2da      	uxtb	r2, r3
 800127e:	687b      	ldr	r3, [r7, #4]
 8001280:	709a      	strb	r2, [r3, #2]
    tempPassedInID = tempPassedInID >> 8;
 8001282:	68fb      	ldr	r3, [r7, #12]
 8001284:	0a1b      	lsrs	r3, r3, #8
 8001286:	60fb      	str	r3, [r7, #12]
    
    //SIDL
    wipSIDL = 0x03 & tempPassedInID;
 8001288:	68fb      	ldr	r3, [r7, #12]
 800128a:	b2db      	uxtb	r3, r3
 800128c:	f003 0303 	and.w	r3, r3, #3
 8001290:	75fb      	strb	r3, [r7, #23]
    tempPassedInID = tempPassedInID << 3;
 8001292:	68fb      	ldr	r3, [r7, #12]
 8001294:	00db      	lsls	r3, r3, #3
 8001296:	60fb      	str	r3, [r7, #12]
    wipSIDL = (0xE0 & tempPassedInID) + wipSIDL;
 8001298:	68fb      	ldr	r3, [r7, #12]
 800129a:	b2db      	uxtb	r3, r3
 800129c:	f023 031f 	bic.w	r3, r3, #31
 80012a0:	b2da      	uxtb	r2, r3
 80012a2:	7dfb      	ldrb	r3, [r7, #23]
 80012a4:	4413      	add	r3, r2
 80012a6:	75fb      	strb	r3, [r7, #23]
    wipSIDL = wipSIDL + 0x08;
 80012a8:	7dfb      	ldrb	r3, [r7, #23]
 80012aa:	3308      	adds	r3, #8
 80012ac:	75fb      	strb	r3, [r7, #23]
    passedIdReg->tempSIDL = 0xEB & wipSIDL;
 80012ae:	7dfb      	ldrb	r3, [r7, #23]
 80012b0:	f023 0314 	bic.w	r3, r3, #20
 80012b4:	b2da      	uxtb	r2, r3
 80012b6:	687b      	ldr	r3, [r7, #4]
 80012b8:	705a      	strb	r2, [r3, #1]
    
    //SIDH
    tempPassedInID = tempPassedInID >> 8;
 80012ba:	68fb      	ldr	r3, [r7, #12]
 80012bc:	0a1b      	lsrs	r3, r3, #8
 80012be:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80012c0:	68fb      	ldr	r3, [r7, #12]
 80012c2:	b2da      	uxtb	r2, r3
 80012c4:	687b      	ldr	r3, [r7, #4]
 80012c6:	701a      	strb	r2, [r3, #0]
    tempPassedInID = tempPassedInID << 5;
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
    tempPassedInID = tempPassedInID >> 8;
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
  }
}
 80012c8:	e013      	b.n	80012f2 <convertCANid2Reg+0x9e>
    passedIdReg->tempEID8 = 0;
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2200      	movs	r2, #0
 80012ce:	709a      	strb	r2, [r3, #2]
    passedIdReg->tempEID0 = 0;
 80012d0:	687b      	ldr	r3, [r7, #4]
 80012d2:	2200      	movs	r2, #0
 80012d4:	70da      	strb	r2, [r3, #3]
    tempPassedInID = tempPassedInID << 5;
 80012d6:	68fb      	ldr	r3, [r7, #12]
 80012d8:	015b      	lsls	r3, r3, #5
 80012da:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDL = 0xFF & tempPassedInID;
 80012dc:	68fb      	ldr	r3, [r7, #12]
 80012de:	b2da      	uxtb	r2, r3
 80012e0:	687b      	ldr	r3, [r7, #4]
 80012e2:	705a      	strb	r2, [r3, #1]
    tempPassedInID = tempPassedInID >> 8;
 80012e4:	68fb      	ldr	r3, [r7, #12]
 80012e6:	0a1b      	lsrs	r3, r3, #8
 80012e8:	60fb      	str	r3, [r7, #12]
    passedIdReg->tempSIDH = 0xFF & tempPassedInID;
 80012ea:	68fb      	ldr	r3, [r7, #12]
 80012ec:	b2da      	uxtb	r2, r3
 80012ee:	687b      	ldr	r3, [r7, #4]
 80012f0:	701a      	strb	r2, [r3, #0]
}
 80012f2:	bf00      	nop
 80012f4:	371c      	adds	r7, #28
 80012f6:	46bd      	mov	sp, r7
 80012f8:	bc80      	pop	{r7}
 80012fa:	4770      	bx	lr

080012fc <MCP2515_Initialize>:
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length);
static uint8_t SPI_Rx(void);
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length);

/* initialize MCP2515 */
bool MCP2515_Initialize(void) {
 80012fc:	b580      	push	{r7, lr}
 80012fe:	b082      	sub	sp, #8
 8001300:	af00      	add	r7, sp, #0
	MCP2515_CS_HIGH();
 8001302:	2201      	movs	r2, #1
 8001304:	2140      	movs	r1, #64	; 0x40
 8001306:	480c      	ldr	r0, [pc, #48]	; (8001338 <MCP2515_Initialize+0x3c>)
 8001308:	f001 face 	bl	80028a8 <HAL_GPIO_WritePin>

	uint8_t loop = 10;
 800130c:	230a      	movs	r3, #10
 800130e:	71fb      	strb	r3, [r7, #7]

	do {
		/* check SPI Ready */
		if (HAL_SPI_GetState(SPI_CAN) == HAL_SPI_STATE_READY)
 8001310:	480a      	ldr	r0, [pc, #40]	; (800133c <MCP2515_Initialize+0x40>)
 8001312:	f003 f808 	bl	8004326 <HAL_SPI_GetState>
 8001316:	4603      	mov	r3, r0
 8001318:	2b01      	cmp	r3, #1
 800131a:	d101      	bne.n	8001320 <MCP2515_Initialize+0x24>
			return true;
 800131c:	2301      	movs	r3, #1
 800131e:	e006      	b.n	800132e <MCP2515_Initialize+0x32>

		loop--;
 8001320:	79fb      	ldrb	r3, [r7, #7]
 8001322:	3b01      	subs	r3, #1
 8001324:	71fb      	strb	r3, [r7, #7]
	} while (loop > 0);
 8001326:	79fb      	ldrb	r3, [r7, #7]
 8001328:	2b00      	cmp	r3, #0
 800132a:	d1f1      	bne.n	8001310 <MCP2515_Initialize+0x14>

	return false;
 800132c:	2300      	movs	r3, #0
}
 800132e:	4618      	mov	r0, r3
 8001330:	3708      	adds	r7, #8
 8001332:	46bd      	mov	sp, r7
 8001334:	bd80      	pop	{r7, pc}
 8001336:	bf00      	nop
 8001338:	40010c00 	.word	0x40010c00
 800133c:	20000270 	.word	0x20000270

08001340 <MCP2515_SetConfigMode>:

/* change mode as configuration mode */
bool MCP2515_SetConfigMode(void) {
 8001340:	b580      	push	{r7, lr}
 8001342:	b082      	sub	sp, #8
 8001344:	af00      	add	r7, sp, #0
	/* configure CANCTRL Register */
	MCP2515_WriteByte(MCP2515_CANCTRL, 0x80);
 8001346:	2180      	movs	r1, #128	; 0x80
 8001348:	200f      	movs	r0, #15
 800134a:	f000 f879 	bl	8001440 <MCP2515_WriteByte>

	uint8_t loop = 10;
 800134e:	230a      	movs	r3, #10
 8001350:	71fb      	strb	r3, [r7, #7]

	do {
		/* confirm mode configuration */
		if ((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x80)
 8001352:	200e      	movs	r0, #14
 8001354:	f000 f830 	bl	80013b8 <MCP2515_ReadByte>
 8001358:	4603      	mov	r3, r0
 800135a:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800135e:	2b80      	cmp	r3, #128	; 0x80
 8001360:	d101      	bne.n	8001366 <MCP2515_SetConfigMode+0x26>
			return true;
 8001362:	2301      	movs	r3, #1
 8001364:	e006      	b.n	8001374 <MCP2515_SetConfigMode+0x34>

		loop--;
 8001366:	79fb      	ldrb	r3, [r7, #7]
 8001368:	3b01      	subs	r3, #1
 800136a:	71fb      	strb	r3, [r7, #7]
	} while (loop > 0);
 800136c:	79fb      	ldrb	r3, [r7, #7]
 800136e:	2b00      	cmp	r3, #0
 8001370:	d1ef      	bne.n	8001352 <MCP2515_SetConfigMode+0x12>

	return false;
 8001372:	2300      	movs	r3, #0
}
 8001374:	4618      	mov	r0, r3
 8001376:	3708      	adds	r7, #8
 8001378:	46bd      	mov	sp, r7
 800137a:	bd80      	pop	{r7, pc}

0800137c <MCP2515_SetNormalMode>:

/* change mode as normal mode */
bool MCP2515_SetNormalMode(void) {
 800137c:	b580      	push	{r7, lr}
 800137e:	b082      	sub	sp, #8
 8001380:	af00      	add	r7, sp, #0
	/* configure CANCTRL Register */
	MCP2515_WriteByte(MCP2515_CANCTRL, 0x00);
 8001382:	2100      	movs	r1, #0
 8001384:	200f      	movs	r0, #15
 8001386:	f000 f85b 	bl	8001440 <MCP2515_WriteByte>

	uint8_t loop = 10;
 800138a:	230a      	movs	r3, #10
 800138c:	71fb      	strb	r3, [r7, #7]

	do {
		/* confirm mode configuration */
		if ((MCP2515_ReadByte(MCP2515_CANSTAT) & 0xE0) == 0x00)
 800138e:	200e      	movs	r0, #14
 8001390:	f000 f812 	bl	80013b8 <MCP2515_ReadByte>
 8001394:	4603      	mov	r3, r0
 8001396:	f003 03e0 	and.w	r3, r3, #224	; 0xe0
 800139a:	2b00      	cmp	r3, #0
 800139c:	d101      	bne.n	80013a2 <MCP2515_SetNormalMode+0x26>
			return true;
 800139e:	2301      	movs	r3, #1
 80013a0:	e006      	b.n	80013b0 <MCP2515_SetNormalMode+0x34>

		loop--;
 80013a2:	79fb      	ldrb	r3, [r7, #7]
 80013a4:	3b01      	subs	r3, #1
 80013a6:	71fb      	strb	r3, [r7, #7]
	} while (loop > 0);
 80013a8:	79fb      	ldrb	r3, [r7, #7]
 80013aa:	2b00      	cmp	r3, #0
 80013ac:	d1ef      	bne.n	800138e <MCP2515_SetNormalMode+0x12>

	return false;
 80013ae:	2300      	movs	r3, #0
}
 80013b0:	4618      	mov	r0, r3
 80013b2:	3708      	adds	r7, #8
 80013b4:	46bd      	mov	sp, r7
 80013b6:	bd80      	pop	{r7, pc}

080013b8 <MCP2515_ReadByte>:

	MCP2515_CS_HIGH();
}

/* read single byte */
uint8_t MCP2515_ReadByte(uint8_t address) {
 80013b8:	b580      	push	{r7, lr}
 80013ba:	b084      	sub	sp, #16
 80013bc:	af00      	add	r7, sp, #0
 80013be:	4603      	mov	r3, r0
 80013c0:	71fb      	strb	r3, [r7, #7]
	uint8_t retVal;

	MCP2515_CS_LOW();
 80013c2:	2200      	movs	r2, #0
 80013c4:	2140      	movs	r1, #64	; 0x40
 80013c6:	480c      	ldr	r0, [pc, #48]	; (80013f8 <MCP2515_ReadByte+0x40>)
 80013c8:	f001 fa6e 	bl	80028a8 <HAL_GPIO_WritePin>

	SPI_Tx(MCP2515_READ);
 80013cc:	2003      	movs	r0, #3
 80013ce:	f000 f901 	bl	80015d4 <SPI_Tx>
	SPI_Tx(address);
 80013d2:	79fb      	ldrb	r3, [r7, #7]
 80013d4:	4618      	mov	r0, r3
 80013d6:	f000 f8fd 	bl	80015d4 <SPI_Tx>
	retVal = SPI_Rx();
 80013da:	f000 f921 	bl	8001620 <SPI_Rx>
 80013de:	4603      	mov	r3, r0
 80013e0:	73fb      	strb	r3, [r7, #15]

	MCP2515_CS_HIGH();
 80013e2:	2201      	movs	r2, #1
 80013e4:	2140      	movs	r1, #64	; 0x40
 80013e6:	4804      	ldr	r0, [pc, #16]	; (80013f8 <MCP2515_ReadByte+0x40>)
 80013e8:	f001 fa5e 	bl	80028a8 <HAL_GPIO_WritePin>

	return retVal;
 80013ec:	7bfb      	ldrb	r3, [r7, #15]
}
 80013ee:	4618      	mov	r0, r3
 80013f0:	3710      	adds	r7, #16
 80013f2:	46bd      	mov	sp, r7
 80013f4:	bd80      	pop	{r7, pc}
 80013f6:	bf00      	nop
 80013f8:	40010c00 	.word	0x40010c00

080013fc <MCP2515_ReadRxSequence>:

/* read buffer */
void MCP2515_ReadRxSequence(uint8_t instruction, uint8_t *data, uint8_t length) {
 80013fc:	b580      	push	{r7, lr}
 80013fe:	b082      	sub	sp, #8
 8001400:	af00      	add	r7, sp, #0
 8001402:	4603      	mov	r3, r0
 8001404:	6039      	str	r1, [r7, #0]
 8001406:	71fb      	strb	r3, [r7, #7]
 8001408:	4613      	mov	r3, r2
 800140a:	71bb      	strb	r3, [r7, #6]
	MCP2515_CS_LOW();
 800140c:	2200      	movs	r2, #0
 800140e:	2140      	movs	r1, #64	; 0x40
 8001410:	480a      	ldr	r0, [pc, #40]	; (800143c <MCP2515_ReadRxSequence+0x40>)
 8001412:	f001 fa49 	bl	80028a8 <HAL_GPIO_WritePin>

	SPI_Tx(instruction);
 8001416:	79fb      	ldrb	r3, [r7, #7]
 8001418:	4618      	mov	r0, r3
 800141a:	f000 f8db 	bl	80015d4 <SPI_Tx>
	SPI_RxBuffer(data, length);
 800141e:	79bb      	ldrb	r3, [r7, #6]
 8001420:	4619      	mov	r1, r3
 8001422:	6838      	ldr	r0, [r7, #0]
 8001424:	f000 f90c 	bl	8001640 <SPI_RxBuffer>

	MCP2515_CS_HIGH();
 8001428:	2201      	movs	r2, #1
 800142a:	2140      	movs	r1, #64	; 0x40
 800142c:	4803      	ldr	r0, [pc, #12]	; (800143c <MCP2515_ReadRxSequence+0x40>)
 800142e:	f001 fa3b 	bl	80028a8 <HAL_GPIO_WritePin>
}
 8001432:	bf00      	nop
 8001434:	3708      	adds	r7, #8
 8001436:	46bd      	mov	sp, r7
 8001438:	bd80      	pop	{r7, pc}
 800143a:	bf00      	nop
 800143c:	40010c00 	.word	0x40010c00

08001440 <MCP2515_WriteByte>:

/* write single byte */
void MCP2515_WriteByte(uint8_t address, uint8_t data) {
 8001440:	b580      	push	{r7, lr}
 8001442:	b082      	sub	sp, #8
 8001444:	af00      	add	r7, sp, #0
 8001446:	4603      	mov	r3, r0
 8001448:	460a      	mov	r2, r1
 800144a:	71fb      	strb	r3, [r7, #7]
 800144c:	4613      	mov	r3, r2
 800144e:	71bb      	strb	r3, [r7, #6]
	MCP2515_CS_LOW();
 8001450:	2200      	movs	r2, #0
 8001452:	2140      	movs	r1, #64	; 0x40
 8001454:	480b      	ldr	r0, [pc, #44]	; (8001484 <MCP2515_WriteByte+0x44>)
 8001456:	f001 fa27 	bl	80028a8 <HAL_GPIO_WritePin>

	SPI_Tx(MCP2515_WRITE);
 800145a:	2002      	movs	r0, #2
 800145c:	f000 f8ba 	bl	80015d4 <SPI_Tx>
	SPI_Tx(address);
 8001460:	79fb      	ldrb	r3, [r7, #7]
 8001462:	4618      	mov	r0, r3
 8001464:	f000 f8b6 	bl	80015d4 <SPI_Tx>
	SPI_Tx(data);
 8001468:	79bb      	ldrb	r3, [r7, #6]
 800146a:	4618      	mov	r0, r3
 800146c:	f000 f8b2 	bl	80015d4 <SPI_Tx>

	MCP2515_CS_HIGH();
 8001470:	2201      	movs	r2, #1
 8001472:	2140      	movs	r1, #64	; 0x40
 8001474:	4803      	ldr	r0, [pc, #12]	; (8001484 <MCP2515_WriteByte+0x44>)
 8001476:	f001 fa17 	bl	80028a8 <HAL_GPIO_WritePin>
}
 800147a:	bf00      	nop
 800147c:	3708      	adds	r7, #8
 800147e:	46bd      	mov	sp, r7
 8001480:	bd80      	pop	{r7, pc}
 8001482:	bf00      	nop
 8001484:	40010c00 	.word	0x40010c00

08001488 <MCP2515_WriteByteSequence>:

/* write buffer */
void MCP2515_WriteByteSequence(uint8_t startAddress, uint8_t endAddress,
		uint8_t *data) {
 8001488:	b580      	push	{r7, lr}
 800148a:	b082      	sub	sp, #8
 800148c:	af00      	add	r7, sp, #0
 800148e:	4603      	mov	r3, r0
 8001490:	603a      	str	r2, [r7, #0]
 8001492:	71fb      	strb	r3, [r7, #7]
 8001494:	460b      	mov	r3, r1
 8001496:	71bb      	strb	r3, [r7, #6]
	MCP2515_CS_LOW();
 8001498:	2200      	movs	r2, #0
 800149a:	2140      	movs	r1, #64	; 0x40
 800149c:	480e      	ldr	r0, [pc, #56]	; (80014d8 <MCP2515_WriteByteSequence+0x50>)
 800149e:	f001 fa03 	bl	80028a8 <HAL_GPIO_WritePin>

	SPI_Tx(MCP2515_WRITE);
 80014a2:	2002      	movs	r0, #2
 80014a4:	f000 f896 	bl	80015d4 <SPI_Tx>
	SPI_Tx(startAddress);
 80014a8:	79fb      	ldrb	r3, [r7, #7]
 80014aa:	4618      	mov	r0, r3
 80014ac:	f000 f892 	bl	80015d4 <SPI_Tx>
	SPI_TxBuffer(data, (endAddress - startAddress + 1));
 80014b0:	79ba      	ldrb	r2, [r7, #6]
 80014b2:	79fb      	ldrb	r3, [r7, #7]
 80014b4:	1ad3      	subs	r3, r2, r3
 80014b6:	b2db      	uxtb	r3, r3
 80014b8:	3301      	adds	r3, #1
 80014ba:	b2db      	uxtb	r3, r3
 80014bc:	4619      	mov	r1, r3
 80014be:	6838      	ldr	r0, [r7, #0]
 80014c0:	f000 f89a 	bl	80015f8 <SPI_TxBuffer>

	MCP2515_CS_HIGH();
 80014c4:	2201      	movs	r2, #1
 80014c6:	2140      	movs	r1, #64	; 0x40
 80014c8:	4803      	ldr	r0, [pc, #12]	; (80014d8 <MCP2515_WriteByteSequence+0x50>)
 80014ca:	f001 f9ed 	bl	80028a8 <HAL_GPIO_WritePin>
}
 80014ce:	bf00      	nop
 80014d0:	3708      	adds	r7, #8
 80014d2:	46bd      	mov	sp, r7
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	40010c00 	.word	0x40010c00

080014dc <MCP2515_LoadTxSequence>:

/* write to TxBuffer */
void MCP2515_LoadTxSequence(uint8_t instruction, uint8_t *idReg, uint8_t dlc,
		uint8_t *data) {
 80014dc:	b580      	push	{r7, lr}
 80014de:	b084      	sub	sp, #16
 80014e0:	af00      	add	r7, sp, #0
 80014e2:	60b9      	str	r1, [r7, #8]
 80014e4:	607b      	str	r3, [r7, #4]
 80014e6:	4603      	mov	r3, r0
 80014e8:	73fb      	strb	r3, [r7, #15]
 80014ea:	4613      	mov	r3, r2
 80014ec:	73bb      	strb	r3, [r7, #14]
	MCP2515_CS_LOW();
 80014ee:	2200      	movs	r2, #0
 80014f0:	2140      	movs	r1, #64	; 0x40
 80014f2:	480e      	ldr	r0, [pc, #56]	; (800152c <MCP2515_LoadTxSequence+0x50>)
 80014f4:	f001 f9d8 	bl	80028a8 <HAL_GPIO_WritePin>

	SPI_Tx(instruction);
 80014f8:	7bfb      	ldrb	r3, [r7, #15]
 80014fa:	4618      	mov	r0, r3
 80014fc:	f000 f86a 	bl	80015d4 <SPI_Tx>
	SPI_TxBuffer(idReg, 4);
 8001500:	2104      	movs	r1, #4
 8001502:	68b8      	ldr	r0, [r7, #8]
 8001504:	f000 f878 	bl	80015f8 <SPI_TxBuffer>
	SPI_Tx(dlc);
 8001508:	7bbb      	ldrb	r3, [r7, #14]
 800150a:	4618      	mov	r0, r3
 800150c:	f000 f862 	bl	80015d4 <SPI_Tx>
	SPI_TxBuffer(data, dlc);
 8001510:	7bbb      	ldrb	r3, [r7, #14]
 8001512:	4619      	mov	r1, r3
 8001514:	6878      	ldr	r0, [r7, #4]
 8001516:	f000 f86f 	bl	80015f8 <SPI_TxBuffer>

	MCP2515_CS_HIGH();
 800151a:	2201      	movs	r2, #1
 800151c:	2140      	movs	r1, #64	; 0x40
 800151e:	4803      	ldr	r0, [pc, #12]	; (800152c <MCP2515_LoadTxSequence+0x50>)
 8001520:	f001 f9c2 	bl	80028a8 <HAL_GPIO_WritePin>
}
 8001524:	bf00      	nop
 8001526:	3710      	adds	r7, #16
 8001528:	46bd      	mov	sp, r7
 800152a:	bd80      	pop	{r7, pc}
 800152c:	40010c00 	.word	0x40010c00

08001530 <MCP2515_RequestToSend>:

	MCP2515_CS_HIGH();
}

/* request to send */
void MCP2515_RequestToSend(uint8_t instruction) {
 8001530:	b580      	push	{r7, lr}
 8001532:	b082      	sub	sp, #8
 8001534:	af00      	add	r7, sp, #0
 8001536:	4603      	mov	r3, r0
 8001538:	71fb      	strb	r3, [r7, #7]
	MCP2515_CS_LOW();
 800153a:	2200      	movs	r2, #0
 800153c:	2140      	movs	r1, #64	; 0x40
 800153e:	4808      	ldr	r0, [pc, #32]	; (8001560 <MCP2515_RequestToSend+0x30>)
 8001540:	f001 f9b2 	bl	80028a8 <HAL_GPIO_WritePin>

	SPI_Tx(instruction);
 8001544:	79fb      	ldrb	r3, [r7, #7]
 8001546:	4618      	mov	r0, r3
 8001548:	f000 f844 	bl	80015d4 <SPI_Tx>

	MCP2515_CS_HIGH();
 800154c:	2201      	movs	r2, #1
 800154e:	2140      	movs	r1, #64	; 0x40
 8001550:	4803      	ldr	r0, [pc, #12]	; (8001560 <MCP2515_RequestToSend+0x30>)
 8001552:	f001 f9a9 	bl	80028a8 <HAL_GPIO_WritePin>
}
 8001556:	bf00      	nop
 8001558:	3708      	adds	r7, #8
 800155a:	46bd      	mov	sp, r7
 800155c:	bd80      	pop	{r7, pc}
 800155e:	bf00      	nop
 8001560:	40010c00 	.word	0x40010c00

08001564 <MCP2515_ReadStatus>:

/* read status */
uint8_t MCP2515_ReadStatus(void) {
 8001564:	b580      	push	{r7, lr}
 8001566:	b082      	sub	sp, #8
 8001568:	af00      	add	r7, sp, #0
	uint8_t retVal;

	MCP2515_CS_LOW();
 800156a:	2200      	movs	r2, #0
 800156c:	2140      	movs	r1, #64	; 0x40
 800156e:	480a      	ldr	r0, [pc, #40]	; (8001598 <MCP2515_ReadStatus+0x34>)
 8001570:	f001 f99a 	bl	80028a8 <HAL_GPIO_WritePin>

	SPI_Tx(MCP2515_READ_STATUS);
 8001574:	20a0      	movs	r0, #160	; 0xa0
 8001576:	f000 f82d 	bl	80015d4 <SPI_Tx>
	retVal = SPI_Rx();
 800157a:	f000 f851 	bl	8001620 <SPI_Rx>
 800157e:	4603      	mov	r3, r0
 8001580:	71fb      	strb	r3, [r7, #7]

	MCP2515_CS_HIGH();
 8001582:	2201      	movs	r2, #1
 8001584:	2140      	movs	r1, #64	; 0x40
 8001586:	4804      	ldr	r0, [pc, #16]	; (8001598 <MCP2515_ReadStatus+0x34>)
 8001588:	f001 f98e 	bl	80028a8 <HAL_GPIO_WritePin>

	return retVal;
 800158c:	79fb      	ldrb	r3, [r7, #7]
}
 800158e:	4618      	mov	r0, r3
 8001590:	3708      	adds	r7, #8
 8001592:	46bd      	mov	sp, r7
 8001594:	bd80      	pop	{r7, pc}
 8001596:	bf00      	nop
 8001598:	40010c00 	.word	0x40010c00

0800159c <MCP2515_GetRxStatus>:

/* read RX STATUS register */
uint8_t MCP2515_GetRxStatus(void) {
 800159c:	b580      	push	{r7, lr}
 800159e:	b082      	sub	sp, #8
 80015a0:	af00      	add	r7, sp, #0
	uint8_t retVal;

	MCP2515_CS_LOW();
 80015a2:	2200      	movs	r2, #0
 80015a4:	2140      	movs	r1, #64	; 0x40
 80015a6:	480a      	ldr	r0, [pc, #40]	; (80015d0 <MCP2515_GetRxStatus+0x34>)
 80015a8:	f001 f97e 	bl	80028a8 <HAL_GPIO_WritePin>

	SPI_Tx(MCP2515_RX_STATUS);
 80015ac:	20b0      	movs	r0, #176	; 0xb0
 80015ae:	f000 f811 	bl	80015d4 <SPI_Tx>
	retVal = SPI_Rx();
 80015b2:	f000 f835 	bl	8001620 <SPI_Rx>
 80015b6:	4603      	mov	r3, r0
 80015b8:	71fb      	strb	r3, [r7, #7]

	MCP2515_CS_HIGH();
 80015ba:	2201      	movs	r2, #1
 80015bc:	2140      	movs	r1, #64	; 0x40
 80015be:	4804      	ldr	r0, [pc, #16]	; (80015d0 <MCP2515_GetRxStatus+0x34>)
 80015c0:	f001 f972 	bl	80028a8 <HAL_GPIO_WritePin>

	return retVal;
 80015c4:	79fb      	ldrb	r3, [r7, #7]
}
 80015c6:	4618      	mov	r0, r3
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40010c00 	.word	0x40010c00

080015d4 <SPI_Tx>:

	MCP2515_CS_HIGH();
}

/* SPI Tx wrapper function  */
static void SPI_Tx(uint8_t data) {
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b082      	sub	sp, #8
 80015d8:	af00      	add	r7, sp, #0
 80015da:	4603      	mov	r3, r0
 80015dc:	71fb      	strb	r3, [r7, #7]
	HAL_SPI_Transmit(SPI_CAN, &data, 1, SPI_TIMEOUT);
 80015de:	1df9      	adds	r1, r7, #7
 80015e0:	230a      	movs	r3, #10
 80015e2:	2201      	movs	r2, #1
 80015e4:	4803      	ldr	r0, [pc, #12]	; (80015f4 <SPI_Tx+0x20>)
 80015e6:	f002 fa93 	bl	8003b10 <HAL_SPI_Transmit>
}
 80015ea:	bf00      	nop
 80015ec:	3708      	adds	r7, #8
 80015ee:	46bd      	mov	sp, r7
 80015f0:	bd80      	pop	{r7, pc}
 80015f2:	bf00      	nop
 80015f4:	20000270 	.word	0x20000270

080015f8 <SPI_TxBuffer>:

/* SPI Tx wrapper function */
static void SPI_TxBuffer(uint8_t *buffer, uint8_t length) {
 80015f8:	b580      	push	{r7, lr}
 80015fa:	b082      	sub	sp, #8
 80015fc:	af00      	add	r7, sp, #0
 80015fe:	6078      	str	r0, [r7, #4]
 8001600:	460b      	mov	r3, r1
 8001602:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Transmit(SPI_CAN, buffer, length, SPI_TIMEOUT);
 8001604:	78fb      	ldrb	r3, [r7, #3]
 8001606:	b29a      	uxth	r2, r3
 8001608:	230a      	movs	r3, #10
 800160a:	6879      	ldr	r1, [r7, #4]
 800160c:	4803      	ldr	r0, [pc, #12]	; (800161c <SPI_TxBuffer+0x24>)
 800160e:	f002 fa7f 	bl	8003b10 <HAL_SPI_Transmit>
}
 8001612:	bf00      	nop
 8001614:	3708      	adds	r7, #8
 8001616:	46bd      	mov	sp, r7
 8001618:	bd80      	pop	{r7, pc}
 800161a:	bf00      	nop
 800161c:	20000270 	.word	0x20000270

08001620 <SPI_Rx>:

/* SPI Rx wrapper function */
static uint8_t SPI_Rx(void) {
 8001620:	b580      	push	{r7, lr}
 8001622:	b082      	sub	sp, #8
 8001624:	af00      	add	r7, sp, #0
	uint8_t retVal;
	HAL_SPI_Receive(SPI_CAN, &retVal, 1, SPI_TIMEOUT);
 8001626:	1df9      	adds	r1, r7, #7
 8001628:	230a      	movs	r3, #10
 800162a:	2201      	movs	r2, #1
 800162c:	4803      	ldr	r0, [pc, #12]	; (800163c <SPI_Rx+0x1c>)
 800162e:	f002 fbb2 	bl	8003d96 <HAL_SPI_Receive>
	return retVal;
 8001632:	79fb      	ldrb	r3, [r7, #7]
}
 8001634:	4618      	mov	r0, r3
 8001636:	3708      	adds	r7, #8
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	20000270 	.word	0x20000270

08001640 <SPI_RxBuffer>:

/* SPI Rx wrapper function */
static void SPI_RxBuffer(uint8_t *buffer, uint8_t length) {
 8001640:	b580      	push	{r7, lr}
 8001642:	b082      	sub	sp, #8
 8001644:	af00      	add	r7, sp, #0
 8001646:	6078      	str	r0, [r7, #4]
 8001648:	460b      	mov	r3, r1
 800164a:	70fb      	strb	r3, [r7, #3]
	HAL_SPI_Receive(SPI_CAN, buffer, length, SPI_TIMEOUT);
 800164c:	78fb      	ldrb	r3, [r7, #3]
 800164e:	b29a      	uxth	r2, r3
 8001650:	230a      	movs	r3, #10
 8001652:	6879      	ldr	r1, [r7, #4]
 8001654:	4803      	ldr	r0, [pc, #12]	; (8001664 <SPI_RxBuffer+0x24>)
 8001656:	f002 fb9e 	bl	8003d96 <HAL_SPI_Receive>
}
 800165a:	bf00      	nop
 800165c:	3708      	adds	r7, #8
 800165e:	46bd      	mov	sp, r7
 8001660:	bd80      	pop	{r7, pc}
 8001662:	bf00      	nop
 8001664:	20000270 	.word	0x20000270

08001668 <HD44780_Init>:
        0b00110,
        0b00000
};

void HD44780_Init(uint8_t rows)
{
 8001668:	b580      	push	{r7, lr}
 800166a:	b082      	sub	sp, #8
 800166c:	af00      	add	r7, sp, #0
 800166e:	4603      	mov	r3, r0
 8001670:	71fb      	strb	r3, [r7, #7]
  dpRows = rows;
 8001672:	4a38      	ldr	r2, [pc, #224]	; (8001754 <HD44780_Init+0xec>)
 8001674:	79fb      	ldrb	r3, [r7, #7]
 8001676:	7013      	strb	r3, [r2, #0]

  dpBacklight = LCD_BACKLIGHT;
 8001678:	4b37      	ldr	r3, [pc, #220]	; (8001758 <HD44780_Init+0xf0>)
 800167a:	2208      	movs	r2, #8
 800167c:	701a      	strb	r2, [r3, #0]

  dpFunction = LCD_4BITMODE | LCD_1LINE | LCD_5x8DOTS;
 800167e:	4b37      	ldr	r3, [pc, #220]	; (800175c <HD44780_Init+0xf4>)
 8001680:	2200      	movs	r2, #0
 8001682:	701a      	strb	r2, [r3, #0]

  if (dpRows > 1)
 8001684:	4b33      	ldr	r3, [pc, #204]	; (8001754 <HD44780_Init+0xec>)
 8001686:	781b      	ldrb	r3, [r3, #0]
 8001688:	2b01      	cmp	r3, #1
 800168a:	d907      	bls.n	800169c <HD44780_Init+0x34>
  {
    dpFunction |= LCD_2LINE;
 800168c:	4b33      	ldr	r3, [pc, #204]	; (800175c <HD44780_Init+0xf4>)
 800168e:	781b      	ldrb	r3, [r3, #0]
 8001690:	f043 0308 	orr.w	r3, r3, #8
 8001694:	b2da      	uxtb	r2, r3
 8001696:	4b31      	ldr	r3, [pc, #196]	; (800175c <HD44780_Init+0xf4>)
 8001698:	701a      	strb	r2, [r3, #0]
 800169a:	e006      	b.n	80016aa <HD44780_Init+0x42>
  }
  else
  {
    dpFunction |= LCD_5x10DOTS;
 800169c:	4b2f      	ldr	r3, [pc, #188]	; (800175c <HD44780_Init+0xf4>)
 800169e:	781b      	ldrb	r3, [r3, #0]
 80016a0:	f043 0304 	orr.w	r3, r3, #4
 80016a4:	b2da      	uxtb	r2, r3
 80016a6:	4b2d      	ldr	r3, [pc, #180]	; (800175c <HD44780_Init+0xf4>)
 80016a8:	701a      	strb	r2, [r3, #0]
  }

  /* Wait for initialization */
  DelayInit();
 80016aa:	f000 f97f 	bl	80019ac <DelayInit>
  HAL_Delay(50);
 80016ae:	2032      	movs	r0, #50	; 0x32
 80016b0:	f000 fe6e 	bl	8002390 <HAL_Delay>

  ExpanderWrite(dpBacklight);
 80016b4:	4b28      	ldr	r3, [pc, #160]	; (8001758 <HD44780_Init+0xf0>)
 80016b6:	781b      	ldrb	r3, [r3, #0]
 80016b8:	4618      	mov	r0, r3
 80016ba:	f000 f93d 	bl	8001938 <ExpanderWrite>
  HAL_Delay(1000);
 80016be:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 80016c2:	f000 fe65 	bl	8002390 <HAL_Delay>

  /* 4bit Mode */
  Write4Bits(0x03 << 4);
 80016c6:	2030      	movs	r0, #48	; 0x30
 80016c8:	f000 f925 	bl	8001916 <Write4Bits>
  DelayUS(4500);
 80016cc:	f241 1094 	movw	r0, #4500	; 0x1194
 80016d0:	f000 f994 	bl	80019fc <DelayUS>

  Write4Bits(0x03 << 4);
 80016d4:	2030      	movs	r0, #48	; 0x30
 80016d6:	f000 f91e 	bl	8001916 <Write4Bits>
  DelayUS(4500);
 80016da:	f241 1094 	movw	r0, #4500	; 0x1194
 80016de:	f000 f98d 	bl	80019fc <DelayUS>

  Write4Bits(0x03 << 4);
 80016e2:	2030      	movs	r0, #48	; 0x30
 80016e4:	f000 f917 	bl	8001916 <Write4Bits>
  DelayUS(4500);
 80016e8:	f241 1094 	movw	r0, #4500	; 0x1194
 80016ec:	f000 f986 	bl	80019fc <DelayUS>

  Write4Bits(0x02 << 4);
 80016f0:	2020      	movs	r0, #32
 80016f2:	f000 f910 	bl	8001916 <Write4Bits>
  DelayUS(100);
 80016f6:	2064      	movs	r0, #100	; 0x64
 80016f8:	f000 f980 	bl	80019fc <DelayUS>

  /* Display Control */
  SendCommand(LCD_FUNCTIONSET | dpFunction);
 80016fc:	4b17      	ldr	r3, [pc, #92]	; (800175c <HD44780_Init+0xf4>)
 80016fe:	781b      	ldrb	r3, [r3, #0]
 8001700:	f043 0320 	orr.w	r3, r3, #32
 8001704:	b2db      	uxtb	r3, r3
 8001706:	4618      	mov	r0, r3
 8001708:	f000 f8c8 	bl	800189c <SendCommand>

  dpControl = LCD_DISPLAYON | LCD_CURSOROFF | LCD_BLINKOFF;
 800170c:	4b14      	ldr	r3, [pc, #80]	; (8001760 <HD44780_Init+0xf8>)
 800170e:	2204      	movs	r2, #4
 8001710:	701a      	strb	r2, [r3, #0]
  HD44780_Display();
 8001712:	f000 f843 	bl	800179c <HD44780_Display>
  HD44780_Clear();
 8001716:	f000 f82b 	bl	8001770 <HD44780_Clear>

  /* Display Mode */
  dpMode = LCD_ENTRYLEFT | LCD_ENTRYSHIFTDECREMENT;
 800171a:	4b12      	ldr	r3, [pc, #72]	; (8001764 <HD44780_Init+0xfc>)
 800171c:	2202      	movs	r2, #2
 800171e:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8001720:	4b10      	ldr	r3, [pc, #64]	; (8001764 <HD44780_Init+0xfc>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	f043 0304 	orr.w	r3, r3, #4
 8001728:	b2db      	uxtb	r3, r3
 800172a:	4618      	mov	r0, r3
 800172c:	f000 f8b6 	bl	800189c <SendCommand>
  DelayUS(4500);
 8001730:	f241 1094 	movw	r0, #4500	; 0x1194
 8001734:	f000 f962 	bl	80019fc <DelayUS>

  HD44780_CreateSpecialChar(0, special1);
 8001738:	490b      	ldr	r1, [pc, #44]	; (8001768 <HD44780_Init+0x100>)
 800173a:	2000      	movs	r0, #0
 800173c:	f000 f870 	bl	8001820 <HD44780_CreateSpecialChar>
  HD44780_CreateSpecialChar(1, special2);
 8001740:	490a      	ldr	r1, [pc, #40]	; (800176c <HD44780_Init+0x104>)
 8001742:	2001      	movs	r0, #1
 8001744:	f000 f86c 	bl	8001820 <HD44780_CreateSpecialChar>

  HD44780_Home();
 8001748:	f000 f81d 	bl	8001786 <HD44780_Home>
}
 800174c:	bf00      	nop
 800174e:	3708      	adds	r7, #8
 8001750:	46bd      	mov	sp, r7
 8001752:	bd80      	pop	{r7, pc}
 8001754:	20000217 	.word	0x20000217
 8001758:	20000218 	.word	0x20000218
 800175c:	20000214 	.word	0x20000214
 8001760:	20000215 	.word	0x20000215
 8001764:	20000216 	.word	0x20000216
 8001768:	20000000 	.word	0x20000000
 800176c:	20000008 	.word	0x20000008

08001770 <HD44780_Clear>:

void HD44780_Clear()
{
 8001770:	b580      	push	{r7, lr}
 8001772:	af00      	add	r7, sp, #0
  SendCommand(LCD_CLEARDISPLAY);
 8001774:	2001      	movs	r0, #1
 8001776:	f000 f891 	bl	800189c <SendCommand>
  DelayUS(2000);
 800177a:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 800177e:	f000 f93d 	bl	80019fc <DelayUS>
}
 8001782:	bf00      	nop
 8001784:	bd80      	pop	{r7, pc}

08001786 <HD44780_Home>:

void HD44780_Home()
{
 8001786:	b580      	push	{r7, lr}
 8001788:	af00      	add	r7, sp, #0
  SendCommand(LCD_RETURNHOME);
 800178a:	2002      	movs	r0, #2
 800178c:	f000 f886 	bl	800189c <SendCommand>
  DelayUS(2000);
 8001790:	f44f 60fa 	mov.w	r0, #2000	; 0x7d0
 8001794:	f000 f932 	bl	80019fc <DelayUS>
}
 8001798:	bf00      	nop
 800179a:	bd80      	pop	{r7, pc}

0800179c <HD44780_Display>:
  dpControl &= ~LCD_DISPLAYON;
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
}

void HD44780_Display()
{
 800179c:	b580      	push	{r7, lr}
 800179e:	af00      	add	r7, sp, #0
  dpControl |= LCD_DISPLAYON;
 80017a0:	4b08      	ldr	r3, [pc, #32]	; (80017c4 <HD44780_Display+0x28>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	f043 0304 	orr.w	r3, r3, #4
 80017a8:	b2da      	uxtb	r2, r3
 80017aa:	4b06      	ldr	r3, [pc, #24]	; (80017c4 <HD44780_Display+0x28>)
 80017ac:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_DISPLAYCONTROL | dpControl);
 80017ae:	4b05      	ldr	r3, [pc, #20]	; (80017c4 <HD44780_Display+0x28>)
 80017b0:	781b      	ldrb	r3, [r3, #0]
 80017b2:	f043 0308 	orr.w	r3, r3, #8
 80017b6:	b2db      	uxtb	r3, r3
 80017b8:	4618      	mov	r0, r3
 80017ba:	f000 f86f 	bl	800189c <SendCommand>
}
 80017be:	bf00      	nop
 80017c0:	bd80      	pop	{r7, pc}
 80017c2:	bf00      	nop
 80017c4:	20000215 	.word	0x20000215

080017c8 <HD44780_LeftToRight>:
{
  SendCommand(LCD_CURSORSHIFT | LCD_DISPLAYMOVE | LCD_MOVERIGHT);
}

void HD44780_LeftToRight(void)
{
 80017c8:	b580      	push	{r7, lr}
 80017ca:	af00      	add	r7, sp, #0
  dpMode |= LCD_ENTRYLEFT;
 80017cc:	4b08      	ldr	r3, [pc, #32]	; (80017f0 <HD44780_LeftToRight+0x28>)
 80017ce:	781b      	ldrb	r3, [r3, #0]
 80017d0:	f043 0302 	orr.w	r3, r3, #2
 80017d4:	b2da      	uxtb	r2, r3
 80017d6:	4b06      	ldr	r3, [pc, #24]	; (80017f0 <HD44780_LeftToRight+0x28>)
 80017d8:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 80017da:	4b05      	ldr	r3, [pc, #20]	; (80017f0 <HD44780_LeftToRight+0x28>)
 80017dc:	781b      	ldrb	r3, [r3, #0]
 80017de:	f043 0304 	orr.w	r3, r3, #4
 80017e2:	b2db      	uxtb	r3, r3
 80017e4:	4618      	mov	r0, r3
 80017e6:	f000 f859 	bl	800189c <SendCommand>
}
 80017ea:	bf00      	nop
 80017ec:	bd80      	pop	{r7, pc}
 80017ee:	bf00      	nop
 80017f0:	20000216 	.word	0x20000216

080017f4 <HD44780_RightToLeft>:

void HD44780_RightToLeft(void)
{
 80017f4:	b580      	push	{r7, lr}
 80017f6:	af00      	add	r7, sp, #0
  dpMode &= ~LCD_ENTRYLEFT;
 80017f8:	4b08      	ldr	r3, [pc, #32]	; (800181c <HD44780_RightToLeft+0x28>)
 80017fa:	781b      	ldrb	r3, [r3, #0]
 80017fc:	f023 0302 	bic.w	r3, r3, #2
 8001800:	b2da      	uxtb	r2, r3
 8001802:	4b06      	ldr	r3, [pc, #24]	; (800181c <HD44780_RightToLeft+0x28>)
 8001804:	701a      	strb	r2, [r3, #0]
  SendCommand(LCD_ENTRYMODESET | dpMode);
 8001806:	4b05      	ldr	r3, [pc, #20]	; (800181c <HD44780_RightToLeft+0x28>)
 8001808:	781b      	ldrb	r3, [r3, #0]
 800180a:	f043 0304 	orr.w	r3, r3, #4
 800180e:	b2db      	uxtb	r3, r3
 8001810:	4618      	mov	r0, r3
 8001812:	f000 f843 	bl	800189c <SendCommand>
}
 8001816:	bf00      	nop
 8001818:	bd80      	pop	{r7, pc}
 800181a:	bf00      	nop
 800181c:	20000216 	.word	0x20000216

08001820 <HD44780_CreateSpecialChar>:
  dpMode &= ~LCD_ENTRYSHIFTINCREMENT;
  SendCommand(LCD_ENTRYMODESET | dpMode);
}

void HD44780_CreateSpecialChar(uint8_t location, uint8_t charmap[])
{
 8001820:	b580      	push	{r7, lr}
 8001822:	b084      	sub	sp, #16
 8001824:	af00      	add	r7, sp, #0
 8001826:	4603      	mov	r3, r0
 8001828:	6039      	str	r1, [r7, #0]
 800182a:	71fb      	strb	r3, [r7, #7]
  location &= 0x7;
 800182c:	79fb      	ldrb	r3, [r7, #7]
 800182e:	f003 0307 	and.w	r3, r3, #7
 8001832:	71fb      	strb	r3, [r7, #7]
  SendCommand(LCD_SETCGRAMADDR | (location << 3));
 8001834:	79fb      	ldrb	r3, [r7, #7]
 8001836:	00db      	lsls	r3, r3, #3
 8001838:	b25b      	sxtb	r3, r3
 800183a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800183e:	b25b      	sxtb	r3, r3
 8001840:	b2db      	uxtb	r3, r3
 8001842:	4618      	mov	r0, r3
 8001844:	f000 f82a 	bl	800189c <SendCommand>
  for (int i=0; i<8; i++)
 8001848:	2300      	movs	r3, #0
 800184a:	60fb      	str	r3, [r7, #12]
 800184c:	e009      	b.n	8001862 <HD44780_CreateSpecialChar+0x42>
  {
    SendChar(charmap[i]);
 800184e:	68fb      	ldr	r3, [r7, #12]
 8001850:	683a      	ldr	r2, [r7, #0]
 8001852:	4413      	add	r3, r2
 8001854:	781b      	ldrb	r3, [r3, #0]
 8001856:	4618      	mov	r0, r3
 8001858:	f000 f82e 	bl	80018b8 <SendChar>
  for (int i=0; i<8; i++)
 800185c:	68fb      	ldr	r3, [r7, #12]
 800185e:	3301      	adds	r3, #1
 8001860:	60fb      	str	r3, [r7, #12]
 8001862:	68fb      	ldr	r3, [r7, #12]
 8001864:	2b07      	cmp	r3, #7
 8001866:	ddf2      	ble.n	800184e <HD44780_CreateSpecialChar+0x2e>
  }
}
 8001868:	bf00      	nop
 800186a:	bf00      	nop
 800186c:	3710      	adds	r7, #16
 800186e:	46bd      	mov	sp, r7
 8001870:	bd80      	pop	{r7, pc}

08001872 <HD44780_PrintStr>:
{
  HD44780_CreateSpecialChar(char_num, rows);
}

void HD44780_PrintStr(const char c[])
{
 8001872:	b580      	push	{r7, lr}
 8001874:	b082      	sub	sp, #8
 8001876:	af00      	add	r7, sp, #0
 8001878:	6078      	str	r0, [r7, #4]
  while(*c) SendChar(*c++);
 800187a:	e006      	b.n	800188a <HD44780_PrintStr+0x18>
 800187c:	687b      	ldr	r3, [r7, #4]
 800187e:	1c5a      	adds	r2, r3, #1
 8001880:	607a      	str	r2, [r7, #4]
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4618      	mov	r0, r3
 8001886:	f000 f817 	bl	80018b8 <SendChar>
 800188a:	687b      	ldr	r3, [r7, #4]
 800188c:	781b      	ldrb	r3, [r3, #0]
 800188e:	2b00      	cmp	r3, #0
 8001890:	d1f4      	bne.n	800187c <HD44780_PrintStr+0xa>
}
 8001892:	bf00      	nop
 8001894:	bf00      	nop
 8001896:	3708      	adds	r7, #8
 8001898:	46bd      	mov	sp, r7
 800189a:	bd80      	pop	{r7, pc}

0800189c <SendCommand>:
  dpBacklight=LCD_BACKLIGHT;
  ExpanderWrite(0);
}

static void SendCommand(uint8_t cmd)
{
 800189c:	b580      	push	{r7, lr}
 800189e:	b082      	sub	sp, #8
 80018a0:	af00      	add	r7, sp, #0
 80018a2:	4603      	mov	r3, r0
 80018a4:	71fb      	strb	r3, [r7, #7]
  Send(cmd, 0);
 80018a6:	79fb      	ldrb	r3, [r7, #7]
 80018a8:	2100      	movs	r1, #0
 80018aa:	4618      	mov	r0, r3
 80018ac:	f000 f812 	bl	80018d4 <Send>
}
 80018b0:	bf00      	nop
 80018b2:	3708      	adds	r7, #8
 80018b4:	46bd      	mov	sp, r7
 80018b6:	bd80      	pop	{r7, pc}

080018b8 <SendChar>:

static void SendChar(uint8_t ch)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	4603      	mov	r3, r0
 80018c0:	71fb      	strb	r3, [r7, #7]
  Send(ch, RS);
 80018c2:	79fb      	ldrb	r3, [r7, #7]
 80018c4:	2101      	movs	r1, #1
 80018c6:	4618      	mov	r0, r3
 80018c8:	f000 f804 	bl	80018d4 <Send>
}
 80018cc:	bf00      	nop
 80018ce:	3708      	adds	r7, #8
 80018d0:	46bd      	mov	sp, r7
 80018d2:	bd80      	pop	{r7, pc}

080018d4 <Send>:

static void Send(uint8_t value, uint8_t mode)
{
 80018d4:	b580      	push	{r7, lr}
 80018d6:	b084      	sub	sp, #16
 80018d8:	af00      	add	r7, sp, #0
 80018da:	4603      	mov	r3, r0
 80018dc:	460a      	mov	r2, r1
 80018de:	71fb      	strb	r3, [r7, #7]
 80018e0:	4613      	mov	r3, r2
 80018e2:	71bb      	strb	r3, [r7, #6]
  uint8_t highnib = value & 0xF0;
 80018e4:	79fb      	ldrb	r3, [r7, #7]
 80018e6:	f023 030f 	bic.w	r3, r3, #15
 80018ea:	73fb      	strb	r3, [r7, #15]
  uint8_t lownib = (value<<4) & 0xF0;
 80018ec:	79fb      	ldrb	r3, [r7, #7]
 80018ee:	011b      	lsls	r3, r3, #4
 80018f0:	73bb      	strb	r3, [r7, #14]
  Write4Bits((highnib)|mode);
 80018f2:	7bfa      	ldrb	r2, [r7, #15]
 80018f4:	79bb      	ldrb	r3, [r7, #6]
 80018f6:	4313      	orrs	r3, r2
 80018f8:	b2db      	uxtb	r3, r3
 80018fa:	4618      	mov	r0, r3
 80018fc:	f000 f80b 	bl	8001916 <Write4Bits>
  Write4Bits((lownib)|mode);
 8001900:	7bba      	ldrb	r2, [r7, #14]
 8001902:	79bb      	ldrb	r3, [r7, #6]
 8001904:	4313      	orrs	r3, r2
 8001906:	b2db      	uxtb	r3, r3
 8001908:	4618      	mov	r0, r3
 800190a:	f000 f804 	bl	8001916 <Write4Bits>
}
 800190e:	bf00      	nop
 8001910:	3710      	adds	r7, #16
 8001912:	46bd      	mov	sp, r7
 8001914:	bd80      	pop	{r7, pc}

08001916 <Write4Bits>:

static void Write4Bits(uint8_t value)
{
 8001916:	b580      	push	{r7, lr}
 8001918:	b082      	sub	sp, #8
 800191a:	af00      	add	r7, sp, #0
 800191c:	4603      	mov	r3, r0
 800191e:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(value);
 8001920:	79fb      	ldrb	r3, [r7, #7]
 8001922:	4618      	mov	r0, r3
 8001924:	f000 f808 	bl	8001938 <ExpanderWrite>
  PulseEnable(value);
 8001928:	79fb      	ldrb	r3, [r7, #7]
 800192a:	4618      	mov	r0, r3
 800192c:	f000 f820 	bl	8001970 <PulseEnable>
}
 8001930:	bf00      	nop
 8001932:	3708      	adds	r7, #8
 8001934:	46bd      	mov	sp, r7
 8001936:	bd80      	pop	{r7, pc}

08001938 <ExpanderWrite>:

static void ExpanderWrite(uint8_t _data)
{
 8001938:	b580      	push	{r7, lr}
 800193a:	b086      	sub	sp, #24
 800193c:	af02      	add	r7, sp, #8
 800193e:	4603      	mov	r3, r0
 8001940:	71fb      	strb	r3, [r7, #7]
  uint8_t data = _data | dpBacklight;
 8001942:	4b09      	ldr	r3, [pc, #36]	; (8001968 <ExpanderWrite+0x30>)
 8001944:	781a      	ldrb	r2, [r3, #0]
 8001946:	79fb      	ldrb	r3, [r7, #7]
 8001948:	4313      	orrs	r3, r2
 800194a:	b2db      	uxtb	r3, r3
 800194c:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_Master_Transmit(&hi2c1, DEVICE_ADDR, (uint8_t*)&data, 1, 10);
 800194e:	f107 020f 	add.w	r2, r7, #15
 8001952:	230a      	movs	r3, #10
 8001954:	9300      	str	r3, [sp, #0]
 8001956:	2301      	movs	r3, #1
 8001958:	214e      	movs	r1, #78	; 0x4e
 800195a:	4804      	ldr	r0, [pc, #16]	; (800196c <ExpanderWrite+0x34>)
 800195c:	f001 f900 	bl	8002b60 <HAL_I2C_Master_Transmit>
}
 8001960:	bf00      	nop
 8001962:	3710      	adds	r7, #16
 8001964:	46bd      	mov	sp, r7
 8001966:	bd80      	pop	{r7, pc}
 8001968:	20000218 	.word	0x20000218
 800196c:	2000021c 	.word	0x2000021c

08001970 <PulseEnable>:

static void PulseEnable(uint8_t _data)
{
 8001970:	b580      	push	{r7, lr}
 8001972:	b082      	sub	sp, #8
 8001974:	af00      	add	r7, sp, #0
 8001976:	4603      	mov	r3, r0
 8001978:	71fb      	strb	r3, [r7, #7]
  ExpanderWrite(_data | ENABLE);
 800197a:	79fb      	ldrb	r3, [r7, #7]
 800197c:	f043 0304 	orr.w	r3, r3, #4
 8001980:	b2db      	uxtb	r3, r3
 8001982:	4618      	mov	r0, r3
 8001984:	f7ff ffd8 	bl	8001938 <ExpanderWrite>
  DelayUS(20);
 8001988:	2014      	movs	r0, #20
 800198a:	f000 f837 	bl	80019fc <DelayUS>

  ExpanderWrite(_data & ~ENABLE);
 800198e:	79fb      	ldrb	r3, [r7, #7]
 8001990:	f023 0304 	bic.w	r3, r3, #4
 8001994:	b2db      	uxtb	r3, r3
 8001996:	4618      	mov	r0, r3
 8001998:	f7ff ffce 	bl	8001938 <ExpanderWrite>
  DelayUS(20);
 800199c:	2014      	movs	r0, #20
 800199e:	f000 f82d 	bl	80019fc <DelayUS>
}
 80019a2:	bf00      	nop
 80019a4:	3708      	adds	r7, #8
 80019a6:	46bd      	mov	sp, r7
 80019a8:	bd80      	pop	{r7, pc}
	...

080019ac <DelayInit>:

static void DelayInit(void)
{
 80019ac:	b480      	push	{r7}
 80019ae:	af00      	add	r7, sp, #0
  CoreDebug->DEMCR &= ~CoreDebug_DEMCR_TRCENA_Msk;
 80019b0:	4b10      	ldr	r3, [pc, #64]	; (80019f4 <DelayInit+0x48>)
 80019b2:	68db      	ldr	r3, [r3, #12]
 80019b4:	4a0f      	ldr	r2, [pc, #60]	; (80019f4 <DelayInit+0x48>)
 80019b6:	f023 7380 	bic.w	r3, r3, #16777216	; 0x1000000
 80019ba:	60d3      	str	r3, [r2, #12]
  CoreDebug->DEMCR |=  CoreDebug_DEMCR_TRCENA_Msk;
 80019bc:	4b0d      	ldr	r3, [pc, #52]	; (80019f4 <DelayInit+0x48>)
 80019be:	68db      	ldr	r3, [r3, #12]
 80019c0:	4a0c      	ldr	r2, [pc, #48]	; (80019f4 <DelayInit+0x48>)
 80019c2:	f043 7380 	orr.w	r3, r3, #16777216	; 0x1000000
 80019c6:	60d3      	str	r3, [r2, #12]

  DWT->CTRL &= ~DWT_CTRL_CYCCNTENA_Msk; //~0x00000001;
 80019c8:	4b0b      	ldr	r3, [pc, #44]	; (80019f8 <DelayInit+0x4c>)
 80019ca:	681b      	ldr	r3, [r3, #0]
 80019cc:	4a0a      	ldr	r2, [pc, #40]	; (80019f8 <DelayInit+0x4c>)
 80019ce:	f023 0301 	bic.w	r3, r3, #1
 80019d2:	6013      	str	r3, [r2, #0]
  DWT->CTRL |=  DWT_CTRL_CYCCNTENA_Msk; //0x00000001;
 80019d4:	4b08      	ldr	r3, [pc, #32]	; (80019f8 <DelayInit+0x4c>)
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	4a07      	ldr	r2, [pc, #28]	; (80019f8 <DelayInit+0x4c>)
 80019da:	f043 0301 	orr.w	r3, r3, #1
 80019de:	6013      	str	r3, [r2, #0]

  DWT->CYCCNT = 0;
 80019e0:	4b05      	ldr	r3, [pc, #20]	; (80019f8 <DelayInit+0x4c>)
 80019e2:	2200      	movs	r2, #0
 80019e4:	605a      	str	r2, [r3, #4]

  /* 3 NO OPERATION instructions */
  __ASM volatile ("NOP");
 80019e6:	bf00      	nop
  __ASM volatile ("NOP");
 80019e8:	bf00      	nop
  __ASM volatile ("NOP");
 80019ea:	bf00      	nop
}
 80019ec:	bf00      	nop
 80019ee:	46bd      	mov	sp, r7
 80019f0:	bc80      	pop	{r7}
 80019f2:	4770      	bx	lr
 80019f4:	e000edf0 	.word	0xe000edf0
 80019f8:	e0001000 	.word	0xe0001000

080019fc <DelayUS>:

static void DelayUS(uint32_t us) {
 80019fc:	b480      	push	{r7}
 80019fe:	b087      	sub	sp, #28
 8001a00:	af00      	add	r7, sp, #0
 8001a02:	6078      	str	r0, [r7, #4]
  uint32_t cycles = (SystemCoreClock/1000000L)*us;
 8001a04:	4b0d      	ldr	r3, [pc, #52]	; (8001a3c <DelayUS+0x40>)
 8001a06:	681b      	ldr	r3, [r3, #0]
 8001a08:	4a0d      	ldr	r2, [pc, #52]	; (8001a40 <DelayUS+0x44>)
 8001a0a:	fba2 2303 	umull	r2, r3, r2, r3
 8001a0e:	0c9a      	lsrs	r2, r3, #18
 8001a10:	687b      	ldr	r3, [r7, #4]
 8001a12:	fb02 f303 	mul.w	r3, r2, r3
 8001a16:	617b      	str	r3, [r7, #20]
  uint32_t start = DWT->CYCCNT;
 8001a18:	4b0a      	ldr	r3, [pc, #40]	; (8001a44 <DelayUS+0x48>)
 8001a1a:	685b      	ldr	r3, [r3, #4]
 8001a1c:	613b      	str	r3, [r7, #16]
  volatile uint32_t cnt;

  do
  {
    cnt = DWT->CYCCNT - start;
 8001a1e:	4b09      	ldr	r3, [pc, #36]	; (8001a44 <DelayUS+0x48>)
 8001a20:	685a      	ldr	r2, [r3, #4]
 8001a22:	693b      	ldr	r3, [r7, #16]
 8001a24:	1ad3      	subs	r3, r2, r3
 8001a26:	60fb      	str	r3, [r7, #12]
  } while(cnt < cycles);
 8001a28:	68fb      	ldr	r3, [r7, #12]
 8001a2a:	697a      	ldr	r2, [r7, #20]
 8001a2c:	429a      	cmp	r2, r3
 8001a2e:	d8f6      	bhi.n	8001a1e <DelayUS+0x22>
}
 8001a30:	bf00      	nop
 8001a32:	bf00      	nop
 8001a34:	371c      	adds	r7, #28
 8001a36:	46bd      	mov	sp, r7
 8001a38:	bc80      	pop	{r7}
 8001a3a:	4770      	bx	lr
 8001a3c:	2000001c 	.word	0x2000001c
 8001a40:	431bde83 	.word	0x431bde83
 8001a44:	e0001000 	.word	0xe0001000

08001a48 <main>:

/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void) {
 8001a48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001a4c:	b094      	sub	sp, #80	; 0x50
 8001a4e:	af04      	add	r7, sp, #16
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001a50:	f000 fc3c 	bl	80022cc <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 8001a54:	f000 f8fc 	bl	8001c50 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001a58:	f000 f9a4 	bl	8001da4 <MX_GPIO_Init>
	MX_I2C1_Init();
 8001a5c:	f000 f93e 	bl	8001cdc <MX_I2C1_Init>
	MX_SPI1_Init();
 8001a60:	f000 f96a 	bl	8001d38 <MX_SPI1_Init>
	/* USER CODE BEGIN 2 */
	CANSPI_Initialize();
 8001a64:	f7ff f9f8 	bl	8000e58 <CANSPI_Initialize>
	HD44780_Init(2);
 8001a68:	2002      	movs	r0, #2
 8001a6a:	f7ff fdfd 	bl	8001668 <HD44780_Init>
	/* USER CODE END 2 */
	/* Infinite loop */
	/* USER CODE BEGIN WHILE */
	while (1) {
		if (CANSPI_Receive(&rxMessage)) {
 8001a6e:	4871      	ldr	r0, [pc, #452]	; (8001c34 <main+0x1ec>)
 8001a70:	f7ff fb1a 	bl	80010a8 <CANSPI_Receive>
 8001a74:	4603      	mov	r3, r0
 8001a76:	2b00      	cmp	r3, #0
 8001a78:	d07d      	beq.n	8001b76 <main+0x12e>
			// Process received message
			float receivedTemperature = convertRawToTemperature(
					rxMessage.frame.data0, rxMessage.frame.data1);
 8001a7a:	4b6e      	ldr	r3, [pc, #440]	; (8001c34 <main+0x1ec>)
 8001a7c:	7a5b      	ldrb	r3, [r3, #9]
			float receivedTemperature = convertRawToTemperature(
 8001a7e:	461a      	mov	r2, r3
					rxMessage.frame.data0, rxMessage.frame.data1);
 8001a80:	4b6c      	ldr	r3, [pc, #432]	; (8001c34 <main+0x1ec>)
 8001a82:	7a9b      	ldrb	r3, [r3, #10]
			float receivedTemperature = convertRawToTemperature(
 8001a84:	4619      	mov	r1, r3
 8001a86:	4610      	mov	r0, r2
 8001a88:	f000 fb9c 	bl	80021c4 <convertRawToTemperature>
 8001a8c:	63f8      	str	r0, [r7, #60]	; 0x3c
			float receivedSpeed = convertRawToSpeed(rxMessage.frame.data2,
 8001a8e:	4b69      	ldr	r3, [pc, #420]	; (8001c34 <main+0x1ec>)
 8001a90:	7adb      	ldrb	r3, [r3, #11]
 8001a92:	461a      	mov	r2, r3
					rxMessage.frame.data3);
 8001a94:	4b67      	ldr	r3, [pc, #412]	; (8001c34 <main+0x1ec>)
 8001a96:	7b1b      	ldrb	r3, [r3, #12]
			float receivedSpeed = convertRawToSpeed(rxMessage.frame.data2,
 8001a98:	4619      	mov	r1, r3
 8001a9a:	4610      	mov	r0, r2
 8001a9c:	f000 fb9e 	bl	80021dc <convertRawToSpeed>
 8001aa0:	63b8      	str	r0, [r7, #56]	; 0x38
			float receivedFuel = convertRawToFuel(rxMessage.frame.data4,
 8001aa2:	4b64      	ldr	r3, [pc, #400]	; (8001c34 <main+0x1ec>)
 8001aa4:	7b5b      	ldrb	r3, [r3, #13]
 8001aa6:	461a      	mov	r2, r3
					rxMessage.frame.data5);
 8001aa8:	4b62      	ldr	r3, [pc, #392]	; (8001c34 <main+0x1ec>)
 8001aaa:	7b9b      	ldrb	r3, [r3, #14]
			float receivedFuel = convertRawToFuel(rxMessage.frame.data4,
 8001aac:	4619      	mov	r1, r3
 8001aae:	4610      	mov	r0, r2
 8001ab0:	f000 fba0 	bl	80021f4 <convertRawToFuel>
 8001ab4:	6378      	str	r0, [r7, #52]	; 0x34

			// Chuyển hướng hiển thị từ trái sang phải
			HD44780_LeftToRight();
 8001ab6:	f7ff fe87 	bl	80017c8 <HD44780_LeftToRight>

			// In dữ liệu nhận được lên màn hình LCD
			char receivedData[50]; // Đảm bảo đủ kích thước cho chuỗi
			sprintf(receivedData, "Temp: %.2f C, Speed: %.2f km/h, Fuel: %.2f",
 8001aba:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001abc:	f7fe fd68 	bl	8000590 <__aeabi_f2d>
 8001ac0:	4680      	mov	r8, r0
 8001ac2:	4689      	mov	r9, r1
 8001ac4:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001ac6:	f7fe fd63 	bl	8000590 <__aeabi_f2d>
 8001aca:	4604      	mov	r4, r0
 8001acc:	460d      	mov	r5, r1
 8001ace:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001ad0:	f7fe fd5e 	bl	8000590 <__aeabi_f2d>
 8001ad4:	4602      	mov	r2, r0
 8001ad6:	460b      	mov	r3, r1
 8001ad8:	4638      	mov	r0, r7
 8001ada:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8001ade:	e9cd 4500 	strd	r4, r5, [sp]
 8001ae2:	4642      	mov	r2, r8
 8001ae4:	464b      	mov	r3, r9
 8001ae6:	4954      	ldr	r1, [pc, #336]	; (8001c38 <main+0x1f0>)
 8001ae8:	f003 fa30 	bl	8004f4c <siprintf>
					receivedTemperature, receivedSpeed, receivedFuel);
			HD44780_Clear();
 8001aec:	f7ff fe40 	bl	8001770 <HD44780_Clear>
			HD44780_PrintStr(receivedData);
 8001af0:	463b      	mov	r3, r7
 8001af2:	4618      	mov	r0, r3
 8001af4:	f7ff febd 	bl	8001872 <HD44780_PrintStr>

			// Modify and transmit the received message
			txMessage.frame.idType = rxMessage.frame.idType;
 8001af8:	4b4e      	ldr	r3, [pc, #312]	; (8001c34 <main+0x1ec>)
 8001afa:	781a      	ldrb	r2, [r3, #0]
 8001afc:	4b4f      	ldr	r3, [pc, #316]	; (8001c3c <main+0x1f4>)
 8001afe:	701a      	strb	r2, [r3, #0]
			txMessage.frame.id = rxMessage.frame.id;
 8001b00:	4b4c      	ldr	r3, [pc, #304]	; (8001c34 <main+0x1ec>)
 8001b02:	685b      	ldr	r3, [r3, #4]
 8001b04:	4a4d      	ldr	r2, [pc, #308]	; (8001c3c <main+0x1f4>)
 8001b06:	6053      	str	r3, [r2, #4]
			txMessage.frame.dlc = 8;
 8001b08:	4b4c      	ldr	r3, [pc, #304]	; (8001c3c <main+0x1f4>)
 8001b0a:	2208      	movs	r2, #8
 8001b0c:	721a      	strb	r2, [r3, #8]
			txMessage.frame.data0 = extractIntegerPart(receivedTemperature);
 8001b0e:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001b10:	f000 fb7c 	bl	800220c <extractIntegerPart>
 8001b14:	4603      	mov	r3, r0
 8001b16:	b2da      	uxtb	r2, r3
 8001b18:	4b48      	ldr	r3, [pc, #288]	; (8001c3c <main+0x1f4>)
 8001b1a:	725a      	strb	r2, [r3, #9]
			txMessage.frame.data1 = extractDecimalPart(receivedTemperature);
 8001b1c:	6bf8      	ldr	r0, [r7, #60]	; 0x3c
 8001b1e:	f000 fb8d 	bl	800223c <extractDecimalPart>
 8001b22:	4603      	mov	r3, r0
 8001b24:	b2da      	uxtb	r2, r3
 8001b26:	4b45      	ldr	r3, [pc, #276]	; (8001c3c <main+0x1f4>)
 8001b28:	729a      	strb	r2, [r3, #10]
			txMessage.frame.data2 = extractIntegerPart(receivedSpeed);
 8001b2a:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001b2c:	f000 fb6e 	bl	800220c <extractIntegerPart>
 8001b30:	4603      	mov	r3, r0
 8001b32:	b2da      	uxtb	r2, r3
 8001b34:	4b41      	ldr	r3, [pc, #260]	; (8001c3c <main+0x1f4>)
 8001b36:	72da      	strb	r2, [r3, #11]
			txMessage.frame.data3 = extractDecimalPart(receivedSpeed);
 8001b38:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8001b3a:	f000 fb7f 	bl	800223c <extractDecimalPart>
 8001b3e:	4603      	mov	r3, r0
 8001b40:	b2da      	uxtb	r2, r3
 8001b42:	4b3e      	ldr	r3, [pc, #248]	; (8001c3c <main+0x1f4>)
 8001b44:	731a      	strb	r2, [r3, #12]
			txMessage.frame.data4 = extractIntegerPart(receivedFuel);
 8001b46:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b48:	f000 fb60 	bl	800220c <extractIntegerPart>
 8001b4c:	4603      	mov	r3, r0
 8001b4e:	b2da      	uxtb	r2, r3
 8001b50:	4b3a      	ldr	r3, [pc, #232]	; (8001c3c <main+0x1f4>)
 8001b52:	735a      	strb	r2, [r3, #13]
			txMessage.frame.data5 = extractDecimalPart(receivedFuel);
 8001b54:	6b78      	ldr	r0, [r7, #52]	; 0x34
 8001b56:	f000 fb71 	bl	800223c <extractDecimalPart>
 8001b5a:	4603      	mov	r3, r0
 8001b5c:	b2da      	uxtb	r2, r3
 8001b5e:	4b37      	ldr	r3, [pc, #220]	; (8001c3c <main+0x1f4>)
 8001b60:	739a      	strb	r2, [r3, #14]
			txMessage.frame.data6 = 0;
 8001b62:	4b36      	ldr	r3, [pc, #216]	; (8001c3c <main+0x1f4>)
 8001b64:	2200      	movs	r2, #0
 8001b66:	73da      	strb	r2, [r3, #15]
			txMessage.frame.data7 = 0;
 8001b68:	4b34      	ldr	r3, [pc, #208]	; (8001c3c <main+0x1f4>)
 8001b6a:	2200      	movs	r2, #0
 8001b6c:	741a      	strb	r2, [r3, #16]

			CANSPI_Transmit(&txMessage);
 8001b6e:	4833      	ldr	r0, [pc, #204]	; (8001c3c <main+0x1f4>)
 8001b70:	f7ff fa22 	bl	8000fb8 <CANSPI_Transmit>
 8001b74:	e058      	b.n	8001c28 <main+0x1e0>
		} else {
			// Chuyển hướng hiển thị từ phải sang trái
			HD44780_RightToLeft();
 8001b76:	f7ff fe3d 	bl	80017f4 <HD44780_RightToLeft>
			 sprintf(transmittedData, "T: %f, %f", extractIntegerPart(temperature), temperature);
			 HD44780_Clear();
			 HD44780_PrintStr(transmittedData);*/

			// Prepare and transmit a new message with static data
			txMessage.frame.idType = dSTANDARD_CAN_MSG_ID_2_0B;
 8001b7a:	4b30      	ldr	r3, [pc, #192]	; (8001c3c <main+0x1f4>)
 8001b7c:	2201      	movs	r2, #1
 8001b7e:	701a      	strb	r2, [r3, #0]
			txMessage.frame.id = 0x0A;
 8001b80:	4b2e      	ldr	r3, [pc, #184]	; (8001c3c <main+0x1f4>)
 8001b82:	220a      	movs	r2, #10
 8001b84:	605a      	str	r2, [r3, #4]
			txMessage.frame.dlc = 8;
 8001b86:	4b2d      	ldr	r3, [pc, #180]	; (8001c3c <main+0x1f4>)
 8001b88:	2208      	movs	r2, #8
 8001b8a:	721a      	strb	r2, [r3, #8]
			txMessage.frame.data0 = extractIntegerPart(temperature);
 8001b8c:	4b2c      	ldr	r3, [pc, #176]	; (8001c40 <main+0x1f8>)
 8001b8e:	681b      	ldr	r3, [r3, #0]
 8001b90:	4618      	mov	r0, r3
 8001b92:	f000 fb3b 	bl	800220c <extractIntegerPart>
 8001b96:	4603      	mov	r3, r0
 8001b98:	b2da      	uxtb	r2, r3
 8001b9a:	4b28      	ldr	r3, [pc, #160]	; (8001c3c <main+0x1f4>)
 8001b9c:	725a      	strb	r2, [r3, #9]
			txMessage.frame.data1 = extractDecimalPart(temperature);
 8001b9e:	4b28      	ldr	r3, [pc, #160]	; (8001c40 <main+0x1f8>)
 8001ba0:	681b      	ldr	r3, [r3, #0]
 8001ba2:	4618      	mov	r0, r3
 8001ba4:	f000 fb4a 	bl	800223c <extractDecimalPart>
 8001ba8:	4603      	mov	r3, r0
 8001baa:	b2da      	uxtb	r2, r3
 8001bac:	4b23      	ldr	r3, [pc, #140]	; (8001c3c <main+0x1f4>)
 8001bae:	729a      	strb	r2, [r3, #10]
			txMessage.frame.data2 = extractIntegerPart(speed);
 8001bb0:	4b24      	ldr	r3, [pc, #144]	; (8001c44 <main+0x1fc>)
 8001bb2:	681b      	ldr	r3, [r3, #0]
 8001bb4:	4618      	mov	r0, r3
 8001bb6:	f000 fb29 	bl	800220c <extractIntegerPart>
 8001bba:	4603      	mov	r3, r0
 8001bbc:	b2da      	uxtb	r2, r3
 8001bbe:	4b1f      	ldr	r3, [pc, #124]	; (8001c3c <main+0x1f4>)
 8001bc0:	72da      	strb	r2, [r3, #11]
			txMessage.frame.data3 = extractDecimalPart(speed);
 8001bc2:	4b20      	ldr	r3, [pc, #128]	; (8001c44 <main+0x1fc>)
 8001bc4:	681b      	ldr	r3, [r3, #0]
 8001bc6:	4618      	mov	r0, r3
 8001bc8:	f000 fb38 	bl	800223c <extractDecimalPart>
 8001bcc:	4603      	mov	r3, r0
 8001bce:	b2da      	uxtb	r2, r3
 8001bd0:	4b1a      	ldr	r3, [pc, #104]	; (8001c3c <main+0x1f4>)
 8001bd2:	731a      	strb	r2, [r3, #12]
			txMessage.frame.data4 = extractIntegerPart(fuel);
 8001bd4:	4b1c      	ldr	r3, [pc, #112]	; (8001c48 <main+0x200>)
 8001bd6:	681b      	ldr	r3, [r3, #0]
 8001bd8:	4618      	mov	r0, r3
 8001bda:	f000 fb17 	bl	800220c <extractIntegerPart>
 8001bde:	4603      	mov	r3, r0
 8001be0:	b2da      	uxtb	r2, r3
 8001be2:	4b16      	ldr	r3, [pc, #88]	; (8001c3c <main+0x1f4>)
 8001be4:	735a      	strb	r2, [r3, #13]
			txMessage.frame.data5 = extractDecimalPart(fuel);
 8001be6:	4b18      	ldr	r3, [pc, #96]	; (8001c48 <main+0x200>)
 8001be8:	681b      	ldr	r3, [r3, #0]
 8001bea:	4618      	mov	r0, r3
 8001bec:	f000 fb26 	bl	800223c <extractDecimalPart>
 8001bf0:	4603      	mov	r3, r0
 8001bf2:	b2da      	uxtb	r2, r3
 8001bf4:	4b11      	ldr	r3, [pc, #68]	; (8001c3c <main+0x1f4>)
 8001bf6:	739a      	strb	r2, [r3, #14]
			txMessage.frame.data6 = 0;
 8001bf8:	4b10      	ldr	r3, [pc, #64]	; (8001c3c <main+0x1f4>)
 8001bfa:	2200      	movs	r2, #0
 8001bfc:	73da      	strb	r2, [r3, #15]
			txMessage.frame.data7 = 0;
 8001bfe:	4b0f      	ldr	r3, [pc, #60]	; (8001c3c <main+0x1f4>)
 8001c00:	2200      	movs	r2, #0
 8001c02:	741a      	strb	r2, [r3, #16]

			CANSPI_Transmit(&txMessage);
 8001c04:	480d      	ldr	r0, [pc, #52]	; (8001c3c <main+0x1f4>)
 8001c06:	f7ff f9d7 	bl	8000fb8 <CANSPI_Transmit>

			char lcdMessage[50]; // Đảm bảo đủ kích thước cho chuỗi
			sprintf(lcdMessage, "ID: %lu, DLC: %u", txMessage.frame.data0,
 8001c0a:	4b0c      	ldr	r3, [pc, #48]	; (8001c3c <main+0x1f4>)
 8001c0c:	7a5b      	ldrb	r3, [r3, #9]
 8001c0e:	461a      	mov	r2, r3
					txMessage.frame.data1);
 8001c10:	4b0a      	ldr	r3, [pc, #40]	; (8001c3c <main+0x1f4>)
 8001c12:	7a9b      	ldrb	r3, [r3, #10]
			sprintf(lcdMessage, "ID: %lu, DLC: %u", txMessage.frame.data0,
 8001c14:	4638      	mov	r0, r7
 8001c16:	490d      	ldr	r1, [pc, #52]	; (8001c4c <main+0x204>)
 8001c18:	f003 f998 	bl	8004f4c <siprintf>
			HD44780_Clear();
 8001c1c:	f7ff fda8 	bl	8001770 <HD44780_Clear>
			HD44780_PrintStr(lcdMessage);
 8001c20:	463b      	mov	r3, r7
 8001c22:	4618      	mov	r0, r3
 8001c24:	f7ff fe25 	bl	8001872 <HD44780_PrintStr>
		}

		HAL_Delay(1000);
 8001c28:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001c2c:	f000 fbb0 	bl	8002390 <HAL_Delay>
		if (CANSPI_Receive(&rxMessage)) {
 8001c30:	e71d      	b.n	8001a6e <main+0x26>
 8001c32:	bf00      	nop
 8001c34:	200002dc 	.word	0x200002dc
 8001c38:	08007300 	.word	0x08007300
 8001c3c:	200002c8 	.word	0x200002c8
 8001c40:	20000010 	.word	0x20000010
 8001c44:	20000014 	.word	0x20000014
 8001c48:	20000018 	.word	0x20000018
 8001c4c:	0800732c 	.word	0x0800732c

08001c50 <SystemClock_Config>:

/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b090      	sub	sp, #64	; 0x40
 8001c54:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = { 0 };
 8001c56:	f107 0318 	add.w	r3, r7, #24
 8001c5a:	2228      	movs	r2, #40	; 0x28
 8001c5c:	2100      	movs	r1, #0
 8001c5e:	4618      	mov	r0, r3
 8001c60:	f003 f9d7 	bl	8005012 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = { 0 };
 8001c64:	1d3b      	adds	r3, r7, #4
 8001c66:	2200      	movs	r2, #0
 8001c68:	601a      	str	r2, [r3, #0]
 8001c6a:	605a      	str	r2, [r3, #4]
 8001c6c:	609a      	str	r2, [r3, #8]
 8001c6e:	60da      	str	r2, [r3, #12]
 8001c70:	611a      	str	r2, [r3, #16]

	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001c72:	2301      	movs	r3, #1
 8001c74:	61bb      	str	r3, [r7, #24]
	RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001c76:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c7a:	61fb      	str	r3, [r7, #28]
	RCC_OscInitStruct.HSEPredivValue = RCC_HSE_PREDIV_DIV1;
 8001c7c:	2300      	movs	r3, #0
 8001c7e:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001c80:	2301      	movs	r3, #1
 8001c82:	62bb      	str	r3, [r7, #40]	; 0x28
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001c84:	2302      	movs	r3, #2
 8001c86:	637b      	str	r3, [r7, #52]	; 0x34
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 8001c88:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 8001c8c:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLMUL = RCC_PLL_MUL9;
 8001c8e:	f44f 13e0 	mov.w	r3, #1835008	; 0x1c0000
 8001c92:	63fb      	str	r3, [r7, #60]	; 0x3c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK) {
 8001c94:	f107 0318 	add.w	r3, r7, #24
 8001c98:	4618      	mov	r0, r3
 8001c9a:	f001 fab9 	bl	8003210 <HAL_RCC_OscConfig>
 8001c9e:	4603      	mov	r3, r0
 8001ca0:	2b00      	cmp	r3, #0
 8001ca2:	d001      	beq.n	8001ca8 <SystemClock_Config+0x58>
		Error_Handler();
 8001ca4:	f000 f8de 	bl	8001e64 <Error_Handler>
	}

	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_SYSCLK
 8001ca8:	230f      	movs	r3, #15
 8001caa:	607b      	str	r3, [r7, #4]
			| RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001cac:	2302      	movs	r3, #2
 8001cae:	60bb      	str	r3, [r7, #8]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001cb0:	2300      	movs	r3, #0
 8001cb2:	60fb      	str	r3, [r7, #12]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001cb4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8001cb8:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001cba:	2300      	movs	r3, #0
 8001cbc:	617b      	str	r3, [r7, #20]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK) {
 8001cbe:	1d3b      	adds	r3, r7, #4
 8001cc0:	2102      	movs	r1, #2
 8001cc2:	4618      	mov	r0, r3
 8001cc4:	f001 fd26 	bl	8003714 <HAL_RCC_ClockConfig>
 8001cc8:	4603      	mov	r3, r0
 8001cca:	2b00      	cmp	r3, #0
 8001ccc:	d001      	beq.n	8001cd2 <SystemClock_Config+0x82>
		Error_Handler();
 8001cce:	f000 f8c9 	bl	8001e64 <Error_Handler>
	}
}
 8001cd2:	bf00      	nop
 8001cd4:	3740      	adds	r7, #64	; 0x40
 8001cd6:	46bd      	mov	sp, r7
 8001cd8:	bd80      	pop	{r7, pc}
	...

08001cdc <MX_I2C1_Init>:
/**
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void) {
 8001cdc:	b580      	push	{r7, lr}
 8001cde:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001ce0:	4b12      	ldr	r3, [pc, #72]	; (8001d2c <MX_I2C1_Init+0x50>)
 8001ce2:	4a13      	ldr	r2, [pc, #76]	; (8001d30 <MX_I2C1_Init+0x54>)
 8001ce4:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001ce6:	4b11      	ldr	r3, [pc, #68]	; (8001d2c <MX_I2C1_Init+0x50>)
 8001ce8:	4a12      	ldr	r2, [pc, #72]	; (8001d34 <MX_I2C1_Init+0x58>)
 8001cea:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001cec:	4b0f      	ldr	r3, [pc, #60]	; (8001d2c <MX_I2C1_Init+0x50>)
 8001cee:	2200      	movs	r2, #0
 8001cf0:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 8001cf2:	4b0e      	ldr	r3, [pc, #56]	; (8001d2c <MX_I2C1_Init+0x50>)
 8001cf4:	2200      	movs	r2, #0
 8001cf6:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001cf8:	4b0c      	ldr	r3, [pc, #48]	; (8001d2c <MX_I2C1_Init+0x50>)
 8001cfa:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001cfe:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001d00:	4b0a      	ldr	r3, [pc, #40]	; (8001d2c <MX_I2C1_Init+0x50>)
 8001d02:	2200      	movs	r2, #0
 8001d04:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001d06:	4b09      	ldr	r3, [pc, #36]	; (8001d2c <MX_I2C1_Init+0x50>)
 8001d08:	2200      	movs	r2, #0
 8001d0a:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001d0c:	4b07      	ldr	r3, [pc, #28]	; (8001d2c <MX_I2C1_Init+0x50>)
 8001d0e:	2200      	movs	r2, #0
 8001d10:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001d12:	4b06      	ldr	r3, [pc, #24]	; (8001d2c <MX_I2C1_Init+0x50>)
 8001d14:	2200      	movs	r2, #0
 8001d16:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK) {
 8001d18:	4804      	ldr	r0, [pc, #16]	; (8001d2c <MX_I2C1_Init+0x50>)
 8001d1a:	f000 fddd 	bl	80028d8 <HAL_I2C_Init>
 8001d1e:	4603      	mov	r3, r0
 8001d20:	2b00      	cmp	r3, #0
 8001d22:	d001      	beq.n	8001d28 <MX_I2C1_Init+0x4c>
		Error_Handler();
 8001d24:	f000 f89e 	bl	8001e64 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001d28:	bf00      	nop
 8001d2a:	bd80      	pop	{r7, pc}
 8001d2c:	2000021c 	.word	0x2000021c
 8001d30:	40005400 	.word	0x40005400
 8001d34:	000186a0 	.word	0x000186a0

08001d38 <MX_SPI1_Init>:
/**
 * @brief SPI1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_SPI1_Init(void) {
 8001d38:	b580      	push	{r7, lr}
 8001d3a:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN SPI1_Init 1 */

	/* USER CODE END SPI1_Init 1 */
	/* SPI1 parameter configuration*/
	hspi1.Instance = SPI1;
 8001d3c:	4b17      	ldr	r3, [pc, #92]	; (8001d9c <MX_SPI1_Init+0x64>)
 8001d3e:	4a18      	ldr	r2, [pc, #96]	; (8001da0 <MX_SPI1_Init+0x68>)
 8001d40:	601a      	str	r2, [r3, #0]
	hspi1.Init.Mode = SPI_MODE_MASTER;
 8001d42:	4b16      	ldr	r3, [pc, #88]	; (8001d9c <MX_SPI1_Init+0x64>)
 8001d44:	f44f 7282 	mov.w	r2, #260	; 0x104
 8001d48:	605a      	str	r2, [r3, #4]
	hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001d4a:	4b14      	ldr	r3, [pc, #80]	; (8001d9c <MX_SPI1_Init+0x64>)
 8001d4c:	2200      	movs	r2, #0
 8001d4e:	609a      	str	r2, [r3, #8]
	hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001d50:	4b12      	ldr	r3, [pc, #72]	; (8001d9c <MX_SPI1_Init+0x64>)
 8001d52:	2200      	movs	r2, #0
 8001d54:	60da      	str	r2, [r3, #12]
	hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001d56:	4b11      	ldr	r3, [pc, #68]	; (8001d9c <MX_SPI1_Init+0x64>)
 8001d58:	2200      	movs	r2, #0
 8001d5a:	611a      	str	r2, [r3, #16]
	hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001d5c:	4b0f      	ldr	r3, [pc, #60]	; (8001d9c <MX_SPI1_Init+0x64>)
 8001d5e:	2200      	movs	r2, #0
 8001d60:	615a      	str	r2, [r3, #20]
	hspi1.Init.NSS = SPI_NSS_SOFT;
 8001d62:	4b0e      	ldr	r3, [pc, #56]	; (8001d9c <MX_SPI1_Init+0x64>)
 8001d64:	f44f 7200 	mov.w	r2, #512	; 0x200
 8001d68:	619a      	str	r2, [r3, #24]
	hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_128;
 8001d6a:	4b0c      	ldr	r3, [pc, #48]	; (8001d9c <MX_SPI1_Init+0x64>)
 8001d6c:	2230      	movs	r2, #48	; 0x30
 8001d6e:	61da      	str	r2, [r3, #28]
	hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001d70:	4b0a      	ldr	r3, [pc, #40]	; (8001d9c <MX_SPI1_Init+0x64>)
 8001d72:	2200      	movs	r2, #0
 8001d74:	621a      	str	r2, [r3, #32]
	hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001d76:	4b09      	ldr	r3, [pc, #36]	; (8001d9c <MX_SPI1_Init+0x64>)
 8001d78:	2200      	movs	r2, #0
 8001d7a:	625a      	str	r2, [r3, #36]	; 0x24
	hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001d7c:	4b07      	ldr	r3, [pc, #28]	; (8001d9c <MX_SPI1_Init+0x64>)
 8001d7e:	2200      	movs	r2, #0
 8001d80:	629a      	str	r2, [r3, #40]	; 0x28
	hspi1.Init.CRCPolynomial = 10;
 8001d82:	4b06      	ldr	r3, [pc, #24]	; (8001d9c <MX_SPI1_Init+0x64>)
 8001d84:	220a      	movs	r2, #10
 8001d86:	62da      	str	r2, [r3, #44]	; 0x2c
	if (HAL_SPI_Init(&hspi1) != HAL_OK) {
 8001d88:	4804      	ldr	r0, [pc, #16]	; (8001d9c <MX_SPI1_Init+0x64>)
 8001d8a:	f001 fe3d 	bl	8003a08 <HAL_SPI_Init>
 8001d8e:	4603      	mov	r3, r0
 8001d90:	2b00      	cmp	r3, #0
 8001d92:	d001      	beq.n	8001d98 <MX_SPI1_Init+0x60>
		Error_Handler();
 8001d94:	f000 f866 	bl	8001e64 <Error_Handler>
	}
	/* USER CODE BEGIN SPI1_Init 2 */

	/* USER CODE END SPI1_Init 2 */

}
 8001d98:	bf00      	nop
 8001d9a:	bd80      	pop	{r7, pc}
 8001d9c:	20000270 	.word	0x20000270
 8001da0:	40013000 	.word	0x40013000

08001da4 <MX_GPIO_Init>:
/**
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void) {
 8001da4:	b580      	push	{r7, lr}
 8001da6:	b088      	sub	sp, #32
 8001da8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = { 0 };
 8001daa:	f107 0310 	add.w	r3, r7, #16
 8001dae:	2200      	movs	r2, #0
 8001db0:	601a      	str	r2, [r3, #0]
 8001db2:	605a      	str	r2, [r3, #4]
 8001db4:	609a      	str	r2, [r3, #8]
 8001db6:	60da      	str	r2, [r3, #12]
	/* USER CODE BEGIN MX_GPIO_Init_1 */
	/* USER CODE END MX_GPIO_Init_1 */

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOD_CLK_ENABLE();
 8001db8:	4b27      	ldr	r3, [pc, #156]	; (8001e58 <MX_GPIO_Init+0xb4>)
 8001dba:	699b      	ldr	r3, [r3, #24]
 8001dbc:	4a26      	ldr	r2, [pc, #152]	; (8001e58 <MX_GPIO_Init+0xb4>)
 8001dbe:	f043 0320 	orr.w	r3, r3, #32
 8001dc2:	6193      	str	r3, [r2, #24]
 8001dc4:	4b24      	ldr	r3, [pc, #144]	; (8001e58 <MX_GPIO_Init+0xb4>)
 8001dc6:	699b      	ldr	r3, [r3, #24]
 8001dc8:	f003 0320 	and.w	r3, r3, #32
 8001dcc:	60fb      	str	r3, [r7, #12]
 8001dce:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001dd0:	4b21      	ldr	r3, [pc, #132]	; (8001e58 <MX_GPIO_Init+0xb4>)
 8001dd2:	699b      	ldr	r3, [r3, #24]
 8001dd4:	4a20      	ldr	r2, [pc, #128]	; (8001e58 <MX_GPIO_Init+0xb4>)
 8001dd6:	f043 0304 	orr.w	r3, r3, #4
 8001dda:	6193      	str	r3, [r2, #24]
 8001ddc:	4b1e      	ldr	r3, [pc, #120]	; (8001e58 <MX_GPIO_Init+0xb4>)
 8001dde:	699b      	ldr	r3, [r3, #24]
 8001de0:	f003 0304 	and.w	r3, r3, #4
 8001de4:	60bb      	str	r3, [r7, #8]
 8001de6:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001de8:	4b1b      	ldr	r3, [pc, #108]	; (8001e58 <MX_GPIO_Init+0xb4>)
 8001dea:	699b      	ldr	r3, [r3, #24]
 8001dec:	4a1a      	ldr	r2, [pc, #104]	; (8001e58 <MX_GPIO_Init+0xb4>)
 8001dee:	f043 0308 	orr.w	r3, r3, #8
 8001df2:	6193      	str	r3, [r2, #24]
 8001df4:	4b18      	ldr	r3, [pc, #96]	; (8001e58 <MX_GPIO_Init+0xb4>)
 8001df6:	699b      	ldr	r3, [r3, #24]
 8001df8:	f003 0308 	and.w	r3, r3, #8
 8001dfc:	607b      	str	r3, [r7, #4]
 8001dfe:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOA, LED1_Pin | LED2_Pin, GPIO_PIN_RESET);
 8001e00:	2200      	movs	r2, #0
 8001e02:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001e06:	4815      	ldr	r0, [pc, #84]	; (8001e5c <MX_GPIO_Init+0xb8>)
 8001e08:	f000 fd4e 	bl	80028a8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(CAN_CS_GPIO_Port, CAN_CS_Pin, GPIO_PIN_RESET);
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2140      	movs	r1, #64	; 0x40
 8001e10:	4813      	ldr	r0, [pc, #76]	; (8001e60 <MX_GPIO_Init+0xbc>)
 8001e12:	f000 fd49 	bl	80028a8 <HAL_GPIO_WritePin>

	/*Configure GPIO pins : LED1_Pin LED2_Pin */
	GPIO_InitStruct.Pin = LED1_Pin | LED2_Pin;
 8001e16:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001e1a:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e1c:	2301      	movs	r3, #1
 8001e1e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e20:	2300      	movs	r3, #0
 8001e22:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e24:	2302      	movs	r3, #2
 8001e26:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001e28:	f107 0310 	add.w	r3, r7, #16
 8001e2c:	4619      	mov	r1, r3
 8001e2e:	480b      	ldr	r0, [pc, #44]	; (8001e5c <MX_GPIO_Init+0xb8>)
 8001e30:	f000 fbb6 	bl	80025a0 <HAL_GPIO_Init>

	/*Configure GPIO pin : CAN_CS_Pin */
	GPIO_InitStruct.Pin = CAN_CS_Pin;
 8001e34:	2340      	movs	r3, #64	; 0x40
 8001e36:	613b      	str	r3, [r7, #16]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001e38:	2301      	movs	r3, #1
 8001e3a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001e3c:	2300      	movs	r3, #0
 8001e3e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001e40:	2302      	movs	r3, #2
 8001e42:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(CAN_CS_GPIO_Port, &GPIO_InitStruct);
 8001e44:	f107 0310 	add.w	r3, r7, #16
 8001e48:	4619      	mov	r1, r3
 8001e4a:	4805      	ldr	r0, [pc, #20]	; (8001e60 <MX_GPIO_Init+0xbc>)
 8001e4c:	f000 fba8 	bl	80025a0 <HAL_GPIO_Init>

	/* USER CODE BEGIN MX_GPIO_Init_2 */
	/* USER CODE END MX_GPIO_Init_2 */
}
 8001e50:	bf00      	nop
 8001e52:	3720      	adds	r7, #32
 8001e54:	46bd      	mov	sp, r7
 8001e56:	bd80      	pop	{r7, pc}
 8001e58:	40021000 	.word	0x40021000
 8001e5c:	40010800 	.word	0x40010800
 8001e60:	40010c00 	.word	0x40010c00

08001e64 <Error_Handler>:

/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void) {
 8001e64:	b480      	push	{r7}
 8001e66:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001e68:	b672      	cpsid	i
}
 8001e6a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1) {
 8001e6c:	e7fe      	b.n	8001e6c <Error_Handler+0x8>
	...

08001e70 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001e70:	b480      	push	{r7}
 8001e72:	b083      	sub	sp, #12
 8001e74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_AFIO_CLK_ENABLE();
 8001e76:	4b0e      	ldr	r3, [pc, #56]	; (8001eb0 <HAL_MspInit+0x40>)
 8001e78:	699b      	ldr	r3, [r3, #24]
 8001e7a:	4a0d      	ldr	r2, [pc, #52]	; (8001eb0 <HAL_MspInit+0x40>)
 8001e7c:	f043 0301 	orr.w	r3, r3, #1
 8001e80:	6193      	str	r3, [r2, #24]
 8001e82:	4b0b      	ldr	r3, [pc, #44]	; (8001eb0 <HAL_MspInit+0x40>)
 8001e84:	699b      	ldr	r3, [r3, #24]
 8001e86:	f003 0301 	and.w	r3, r3, #1
 8001e8a:	607b      	str	r3, [r7, #4]
 8001e8c:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001e8e:	4b08      	ldr	r3, [pc, #32]	; (8001eb0 <HAL_MspInit+0x40>)
 8001e90:	69db      	ldr	r3, [r3, #28]
 8001e92:	4a07      	ldr	r2, [pc, #28]	; (8001eb0 <HAL_MspInit+0x40>)
 8001e94:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001e98:	61d3      	str	r3, [r2, #28]
 8001e9a:	4b05      	ldr	r3, [pc, #20]	; (8001eb0 <HAL_MspInit+0x40>)
 8001e9c:	69db      	ldr	r3, [r3, #28]
 8001e9e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001ea2:	603b      	str	r3, [r7, #0]
 8001ea4:	683b      	ldr	r3, [r7, #0]
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ea6:	bf00      	nop
 8001ea8:	370c      	adds	r7, #12
 8001eaa:	46bd      	mov	sp, r7
 8001eac:	bc80      	pop	{r7}
 8001eae:	4770      	bx	lr
 8001eb0:	40021000 	.word	0x40021000

08001eb4 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001eb4:	b580      	push	{r7, lr}
 8001eb6:	b08a      	sub	sp, #40	; 0x28
 8001eb8:	af00      	add	r7, sp, #0
 8001eba:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ebc:	f107 0314 	add.w	r3, r7, #20
 8001ec0:	2200      	movs	r2, #0
 8001ec2:	601a      	str	r2, [r3, #0]
 8001ec4:	605a      	str	r2, [r3, #4]
 8001ec6:	609a      	str	r2, [r3, #8]
 8001ec8:	60da      	str	r2, [r3, #12]
  if(hi2c->Instance==I2C1)
 8001eca:	687b      	ldr	r3, [r7, #4]
 8001ecc:	681b      	ldr	r3, [r3, #0]
 8001ece:	4a1d      	ldr	r2, [pc, #116]	; (8001f44 <HAL_I2C_MspInit+0x90>)
 8001ed0:	4293      	cmp	r3, r2
 8001ed2:	d132      	bne.n	8001f3a <HAL_I2C_MspInit+0x86>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001ed4:	4b1c      	ldr	r3, [pc, #112]	; (8001f48 <HAL_I2C_MspInit+0x94>)
 8001ed6:	699b      	ldr	r3, [r3, #24]
 8001ed8:	4a1b      	ldr	r2, [pc, #108]	; (8001f48 <HAL_I2C_MspInit+0x94>)
 8001eda:	f043 0308 	orr.w	r3, r3, #8
 8001ede:	6193      	str	r3, [r2, #24]
 8001ee0:	4b19      	ldr	r3, [pc, #100]	; (8001f48 <HAL_I2C_MspInit+0x94>)
 8001ee2:	699b      	ldr	r3, [r3, #24]
 8001ee4:	f003 0308 	and.w	r3, r3, #8
 8001ee8:	613b      	str	r3, [r7, #16]
 8001eea:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001eec:	f44f 7340 	mov.w	r3, #768	; 0x300
 8001ef0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001ef2:	2312      	movs	r3, #18
 8001ef4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001ef6:	2303      	movs	r3, #3
 8001ef8:	623b      	str	r3, [r7, #32]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001efa:	f107 0314 	add.w	r3, r7, #20
 8001efe:	4619      	mov	r1, r3
 8001f00:	4812      	ldr	r0, [pc, #72]	; (8001f4c <HAL_I2C_MspInit+0x98>)
 8001f02:	f000 fb4d 	bl	80025a0 <HAL_GPIO_Init>

    __HAL_AFIO_REMAP_I2C1_ENABLE();
 8001f06:	4b12      	ldr	r3, [pc, #72]	; (8001f50 <HAL_I2C_MspInit+0x9c>)
 8001f08:	685b      	ldr	r3, [r3, #4]
 8001f0a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f0c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f0e:	f043 63e0 	orr.w	r3, r3, #117440512	; 0x7000000
 8001f12:	627b      	str	r3, [r7, #36]	; 0x24
 8001f14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f16:	f043 0302 	orr.w	r3, r3, #2
 8001f1a:	627b      	str	r3, [r7, #36]	; 0x24
 8001f1c:	4a0c      	ldr	r2, [pc, #48]	; (8001f50 <HAL_I2C_MspInit+0x9c>)
 8001f1e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8001f20:	6053      	str	r3, [r2, #4]

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f22:	4b09      	ldr	r3, [pc, #36]	; (8001f48 <HAL_I2C_MspInit+0x94>)
 8001f24:	69db      	ldr	r3, [r3, #28]
 8001f26:	4a08      	ldr	r2, [pc, #32]	; (8001f48 <HAL_I2C_MspInit+0x94>)
 8001f28:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001f2c:	61d3      	str	r3, [r2, #28]
 8001f2e:	4b06      	ldr	r3, [pc, #24]	; (8001f48 <HAL_I2C_MspInit+0x94>)
 8001f30:	69db      	ldr	r3, [r3, #28]
 8001f32:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001f36:	60fb      	str	r3, [r7, #12]
 8001f38:	68fb      	ldr	r3, [r7, #12]
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8001f3a:	bf00      	nop
 8001f3c:	3728      	adds	r7, #40	; 0x28
 8001f3e:	46bd      	mov	sp, r7
 8001f40:	bd80      	pop	{r7, pc}
 8001f42:	bf00      	nop
 8001f44:	40005400 	.word	0x40005400
 8001f48:	40021000 	.word	0x40021000
 8001f4c:	40010c00 	.word	0x40010c00
 8001f50:	40010000 	.word	0x40010000

08001f54 <HAL_SPI_MspInit>:
* This function configures the hardware resources used in this example
* @param hspi: SPI handle pointer
* @retval None
*/
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8001f54:	b580      	push	{r7, lr}
 8001f56:	b088      	sub	sp, #32
 8001f58:	af00      	add	r7, sp, #0
 8001f5a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001f5c:	f107 0310 	add.w	r3, r7, #16
 8001f60:	2200      	movs	r2, #0
 8001f62:	601a      	str	r2, [r3, #0]
 8001f64:	605a      	str	r2, [r3, #4]
 8001f66:	609a      	str	r2, [r3, #8]
 8001f68:	60da      	str	r2, [r3, #12]
  if(hspi->Instance==SPI1)
 8001f6a:	687b      	ldr	r3, [r7, #4]
 8001f6c:	681b      	ldr	r3, [r3, #0]
 8001f6e:	4a1b      	ldr	r2, [pc, #108]	; (8001fdc <HAL_SPI_MspInit+0x88>)
 8001f70:	4293      	cmp	r3, r2
 8001f72:	d12f      	bne.n	8001fd4 <HAL_SPI_MspInit+0x80>
  {
  /* USER CODE BEGIN SPI1_MspInit 0 */

  /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 8001f74:	4b1a      	ldr	r3, [pc, #104]	; (8001fe0 <HAL_SPI_MspInit+0x8c>)
 8001f76:	699b      	ldr	r3, [r3, #24]
 8001f78:	4a19      	ldr	r2, [pc, #100]	; (8001fe0 <HAL_SPI_MspInit+0x8c>)
 8001f7a:	f443 5380 	orr.w	r3, r3, #4096	; 0x1000
 8001f7e:	6193      	str	r3, [r2, #24]
 8001f80:	4b17      	ldr	r3, [pc, #92]	; (8001fe0 <HAL_SPI_MspInit+0x8c>)
 8001f82:	699b      	ldr	r3, [r3, #24]
 8001f84:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8001f88:	60fb      	str	r3, [r7, #12]
 8001f8a:	68fb      	ldr	r3, [r7, #12]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8001f8c:	4b14      	ldr	r3, [pc, #80]	; (8001fe0 <HAL_SPI_MspInit+0x8c>)
 8001f8e:	699b      	ldr	r3, [r3, #24]
 8001f90:	4a13      	ldr	r2, [pc, #76]	; (8001fe0 <HAL_SPI_MspInit+0x8c>)
 8001f92:	f043 0304 	orr.w	r3, r3, #4
 8001f96:	6193      	str	r3, [r2, #24]
 8001f98:	4b11      	ldr	r3, [pc, #68]	; (8001fe0 <HAL_SPI_MspInit+0x8c>)
 8001f9a:	699b      	ldr	r3, [r3, #24]
 8001f9c:	f003 0304 	and.w	r3, r3, #4
 8001fa0:	60bb      	str	r3, [r7, #8]
 8001fa2:	68bb      	ldr	r3, [r7, #8]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_7;
 8001fa4:	23a0      	movs	r3, #160	; 0xa0
 8001fa6:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8001fa8:	2302      	movs	r3, #2
 8001faa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001fac:	2303      	movs	r3, #3
 8001fae:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fb0:	f107 0310 	add.w	r3, r7, #16
 8001fb4:	4619      	mov	r1, r3
 8001fb6:	480b      	ldr	r0, [pc, #44]	; (8001fe4 <HAL_SPI_MspInit+0x90>)
 8001fb8:	f000 faf2 	bl	80025a0 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8001fbc:	2340      	movs	r3, #64	; 0x40
 8001fbe:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8001fc0:	2300      	movs	r3, #0
 8001fc2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001fc4:	2300      	movs	r3, #0
 8001fc6:	61bb      	str	r3, [r7, #24]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001fc8:	f107 0310 	add.w	r3, r7, #16
 8001fcc:	4619      	mov	r1, r3
 8001fce:	4805      	ldr	r0, [pc, #20]	; (8001fe4 <HAL_SPI_MspInit+0x90>)
 8001fd0:	f000 fae6 	bl	80025a0 <HAL_GPIO_Init>
  /* USER CODE BEGIN SPI1_MspInit 1 */

  /* USER CODE END SPI1_MspInit 1 */
  }

}
 8001fd4:	bf00      	nop
 8001fd6:	3720      	adds	r7, #32
 8001fd8:	46bd      	mov	sp, r7
 8001fda:	bd80      	pop	{r7, pc}
 8001fdc:	40013000 	.word	0x40013000
 8001fe0:	40021000 	.word	0x40021000
 8001fe4:	40010800 	.word	0x40010800

08001fe8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001fe8:	b480      	push	{r7}
 8001fea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8001fec:	e7fe      	b.n	8001fec <NMI_Handler+0x4>

08001fee <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8001fee:	b480      	push	{r7}
 8001ff0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001ff2:	e7fe      	b.n	8001ff2 <HardFault_Handler+0x4>

08001ff4 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001ff4:	b480      	push	{r7}
 8001ff6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001ff8:	e7fe      	b.n	8001ff8 <MemManage_Handler+0x4>

08001ffa <BusFault_Handler>:

/**
  * @brief This function handles Prefetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8001ffa:	b480      	push	{r7}
 8001ffc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001ffe:	e7fe      	b.n	8001ffe <BusFault_Handler+0x4>

08002000 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002000:	b480      	push	{r7}
 8002002:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002004:	e7fe      	b.n	8002004 <UsageFault_Handler+0x4>

08002006 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002006:	b480      	push	{r7}
 8002008:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 800200a:	bf00      	nop
 800200c:	46bd      	mov	sp, r7
 800200e:	bc80      	pop	{r7}
 8002010:	4770      	bx	lr

08002012 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002012:	b480      	push	{r7}
 8002014:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002016:	bf00      	nop
 8002018:	46bd      	mov	sp, r7
 800201a:	bc80      	pop	{r7}
 800201c:	4770      	bx	lr

0800201e <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800201e:	b480      	push	{r7}
 8002020:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002022:	bf00      	nop
 8002024:	46bd      	mov	sp, r7
 8002026:	bc80      	pop	{r7}
 8002028:	4770      	bx	lr

0800202a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800202a:	b580      	push	{r7, lr}
 800202c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800202e:	f000 f993 	bl	8002358 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002032:	bf00      	nop
 8002034:	bd80      	pop	{r7, pc}

08002036 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002036:	b480      	push	{r7}
 8002038:	af00      	add	r7, sp, #0
  return 1;
 800203a:	2301      	movs	r3, #1
}
 800203c:	4618      	mov	r0, r3
 800203e:	46bd      	mov	sp, r7
 8002040:	bc80      	pop	{r7}
 8002042:	4770      	bx	lr

08002044 <_kill>:

int _kill(int pid, int sig)
{
 8002044:	b580      	push	{r7, lr}
 8002046:	b082      	sub	sp, #8
 8002048:	af00      	add	r7, sp, #0
 800204a:	6078      	str	r0, [r7, #4]
 800204c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800204e:	f003 f833 	bl	80050b8 <__errno>
 8002052:	4603      	mov	r3, r0
 8002054:	2216      	movs	r2, #22
 8002056:	601a      	str	r2, [r3, #0]
  return -1;
 8002058:	f04f 33ff 	mov.w	r3, #4294967295
}
 800205c:	4618      	mov	r0, r3
 800205e:	3708      	adds	r7, #8
 8002060:	46bd      	mov	sp, r7
 8002062:	bd80      	pop	{r7, pc}

08002064 <_exit>:

void _exit (int status)
{
 8002064:	b580      	push	{r7, lr}
 8002066:	b082      	sub	sp, #8
 8002068:	af00      	add	r7, sp, #0
 800206a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800206c:	f04f 31ff 	mov.w	r1, #4294967295
 8002070:	6878      	ldr	r0, [r7, #4]
 8002072:	f7ff ffe7 	bl	8002044 <_kill>
  while (1) {}    /* Make sure we hang here */
 8002076:	e7fe      	b.n	8002076 <_exit+0x12>

08002078 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002078:	b580      	push	{r7, lr}
 800207a:	b086      	sub	sp, #24
 800207c:	af00      	add	r7, sp, #0
 800207e:	60f8      	str	r0, [r7, #12]
 8002080:	60b9      	str	r1, [r7, #8]
 8002082:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002084:	2300      	movs	r3, #0
 8002086:	617b      	str	r3, [r7, #20]
 8002088:	e00a      	b.n	80020a0 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800208a:	f3af 8000 	nop.w
 800208e:	4601      	mov	r1, r0
 8002090:	68bb      	ldr	r3, [r7, #8]
 8002092:	1c5a      	adds	r2, r3, #1
 8002094:	60ba      	str	r2, [r7, #8]
 8002096:	b2ca      	uxtb	r2, r1
 8002098:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800209a:	697b      	ldr	r3, [r7, #20]
 800209c:	3301      	adds	r3, #1
 800209e:	617b      	str	r3, [r7, #20]
 80020a0:	697a      	ldr	r2, [r7, #20]
 80020a2:	687b      	ldr	r3, [r7, #4]
 80020a4:	429a      	cmp	r2, r3
 80020a6:	dbf0      	blt.n	800208a <_read+0x12>
  }

  return len;
 80020a8:	687b      	ldr	r3, [r7, #4]
}
 80020aa:	4618      	mov	r0, r3
 80020ac:	3718      	adds	r7, #24
 80020ae:	46bd      	mov	sp, r7
 80020b0:	bd80      	pop	{r7, pc}

080020b2 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80020b2:	b580      	push	{r7, lr}
 80020b4:	b086      	sub	sp, #24
 80020b6:	af00      	add	r7, sp, #0
 80020b8:	60f8      	str	r0, [r7, #12]
 80020ba:	60b9      	str	r1, [r7, #8]
 80020bc:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020be:	2300      	movs	r3, #0
 80020c0:	617b      	str	r3, [r7, #20]
 80020c2:	e009      	b.n	80020d8 <_write+0x26>
  {
    __io_putchar(*ptr++);
 80020c4:	68bb      	ldr	r3, [r7, #8]
 80020c6:	1c5a      	adds	r2, r3, #1
 80020c8:	60ba      	str	r2, [r7, #8]
 80020ca:	781b      	ldrb	r3, [r3, #0]
 80020cc:	4618      	mov	r0, r3
 80020ce:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80020d2:	697b      	ldr	r3, [r7, #20]
 80020d4:	3301      	adds	r3, #1
 80020d6:	617b      	str	r3, [r7, #20]
 80020d8:	697a      	ldr	r2, [r7, #20]
 80020da:	687b      	ldr	r3, [r7, #4]
 80020dc:	429a      	cmp	r2, r3
 80020de:	dbf1      	blt.n	80020c4 <_write+0x12>
  }
  return len;
 80020e0:	687b      	ldr	r3, [r7, #4]
}
 80020e2:	4618      	mov	r0, r3
 80020e4:	3718      	adds	r7, #24
 80020e6:	46bd      	mov	sp, r7
 80020e8:	bd80      	pop	{r7, pc}

080020ea <_close>:

int _close(int file)
{
 80020ea:	b480      	push	{r7}
 80020ec:	b083      	sub	sp, #12
 80020ee:	af00      	add	r7, sp, #0
 80020f0:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 80020f2:	f04f 33ff 	mov.w	r3, #4294967295
}
 80020f6:	4618      	mov	r0, r3
 80020f8:	370c      	adds	r7, #12
 80020fa:	46bd      	mov	sp, r7
 80020fc:	bc80      	pop	{r7}
 80020fe:	4770      	bx	lr

08002100 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002100:	b480      	push	{r7}
 8002102:	b083      	sub	sp, #12
 8002104:	af00      	add	r7, sp, #0
 8002106:	6078      	str	r0, [r7, #4]
 8002108:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800210a:	683b      	ldr	r3, [r7, #0]
 800210c:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8002110:	605a      	str	r2, [r3, #4]
  return 0;
 8002112:	2300      	movs	r3, #0
}
 8002114:	4618      	mov	r0, r3
 8002116:	370c      	adds	r7, #12
 8002118:	46bd      	mov	sp, r7
 800211a:	bc80      	pop	{r7}
 800211c:	4770      	bx	lr

0800211e <_isatty>:

int _isatty(int file)
{
 800211e:	b480      	push	{r7}
 8002120:	b083      	sub	sp, #12
 8002122:	af00      	add	r7, sp, #0
 8002124:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002126:	2301      	movs	r3, #1
}
 8002128:	4618      	mov	r0, r3
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	bc80      	pop	{r7}
 8002130:	4770      	bx	lr

08002132 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002132:	b480      	push	{r7}
 8002134:	b085      	sub	sp, #20
 8002136:	af00      	add	r7, sp, #0
 8002138:	60f8      	str	r0, [r7, #12]
 800213a:	60b9      	str	r1, [r7, #8]
 800213c:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800213e:	2300      	movs	r3, #0
}
 8002140:	4618      	mov	r0, r3
 8002142:	3714      	adds	r7, #20
 8002144:	46bd      	mov	sp, r7
 8002146:	bc80      	pop	{r7}
 8002148:	4770      	bx	lr
	...

0800214c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800214c:	b580      	push	{r7, lr}
 800214e:	b086      	sub	sp, #24
 8002150:	af00      	add	r7, sp, #0
 8002152:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002154:	4a14      	ldr	r2, [pc, #80]	; (80021a8 <_sbrk+0x5c>)
 8002156:	4b15      	ldr	r3, [pc, #84]	; (80021ac <_sbrk+0x60>)
 8002158:	1ad3      	subs	r3, r2, r3
 800215a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800215c:	697b      	ldr	r3, [r7, #20]
 800215e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002160:	4b13      	ldr	r3, [pc, #76]	; (80021b0 <_sbrk+0x64>)
 8002162:	681b      	ldr	r3, [r3, #0]
 8002164:	2b00      	cmp	r3, #0
 8002166:	d102      	bne.n	800216e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002168:	4b11      	ldr	r3, [pc, #68]	; (80021b0 <_sbrk+0x64>)
 800216a:	4a12      	ldr	r2, [pc, #72]	; (80021b4 <_sbrk+0x68>)
 800216c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800216e:	4b10      	ldr	r3, [pc, #64]	; (80021b0 <_sbrk+0x64>)
 8002170:	681a      	ldr	r2, [r3, #0]
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	4413      	add	r3, r2
 8002176:	693a      	ldr	r2, [r7, #16]
 8002178:	429a      	cmp	r2, r3
 800217a:	d207      	bcs.n	800218c <_sbrk+0x40>
  {
    errno = ENOMEM;
 800217c:	f002 ff9c 	bl	80050b8 <__errno>
 8002180:	4603      	mov	r3, r0
 8002182:	220c      	movs	r2, #12
 8002184:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002186:	f04f 33ff 	mov.w	r3, #4294967295
 800218a:	e009      	b.n	80021a0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800218c:	4b08      	ldr	r3, [pc, #32]	; (80021b0 <_sbrk+0x64>)
 800218e:	681b      	ldr	r3, [r3, #0]
 8002190:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002192:	4b07      	ldr	r3, [pc, #28]	; (80021b0 <_sbrk+0x64>)
 8002194:	681a      	ldr	r2, [r3, #0]
 8002196:	687b      	ldr	r3, [r7, #4]
 8002198:	4413      	add	r3, r2
 800219a:	4a05      	ldr	r2, [pc, #20]	; (80021b0 <_sbrk+0x64>)
 800219c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800219e:	68fb      	ldr	r3, [r7, #12]
}
 80021a0:	4618      	mov	r0, r3
 80021a2:	3718      	adds	r7, #24
 80021a4:	46bd      	mov	sp, r7
 80021a6:	bd80      	pop	{r7, pc}
 80021a8:	20005000 	.word	0x20005000
 80021ac:	00000400 	.word	0x00000400
 80021b0:	200002f0 	.word	0x200002f0
 80021b4:	20000448 	.word	0x20000448

080021b8 <SystemInit>:
  * @note   This function should be used only after reset.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 80021b8:	b480      	push	{r7}
 80021ba:	af00      	add	r7, sp, #0

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM. */
#endif /* USER_VECT_TAB_ADDRESS */
}
 80021bc:	bf00      	nop
 80021be:	46bd      	mov	sp, r7
 80021c0:	bc80      	pop	{r7}
 80021c2:	4770      	bx	lr

080021c4 <convertRawToTemperature>:

#include "utils.h"
#include <stdint.h>
#include <math.h>

float convertRawToTemperature(int raw1, int raw2) {
 80021c4:	b480      	push	{r7}
 80021c6:	b083      	sub	sp, #12
 80021c8:	af00      	add	r7, sp, #0
 80021ca:	6078      	str	r0, [r7, #4]
 80021cc:	6039      	str	r1, [r7, #0]
    // Implementation
	return 0.0f;
 80021ce:	f04f 0300 	mov.w	r3, #0
}
 80021d2:	4618      	mov	r0, r3
 80021d4:	370c      	adds	r7, #12
 80021d6:	46bd      	mov	sp, r7
 80021d8:	bc80      	pop	{r7}
 80021da:	4770      	bx	lr

080021dc <convertRawToSpeed>:

float convertRawToSpeed(int raw1, int raw2) {
 80021dc:	b480      	push	{r7}
 80021de:	b083      	sub	sp, #12
 80021e0:	af00      	add	r7, sp, #0
 80021e2:	6078      	str	r0, [r7, #4]
 80021e4:	6039      	str	r1, [r7, #0]
    // Implementation
	return 0.0f;
 80021e6:	f04f 0300 	mov.w	r3, #0
}
 80021ea:	4618      	mov	r0, r3
 80021ec:	370c      	adds	r7, #12
 80021ee:	46bd      	mov	sp, r7
 80021f0:	bc80      	pop	{r7}
 80021f2:	4770      	bx	lr

080021f4 <convertRawToFuel>:

float convertRawToFuel(int raw1, int raw2) {
 80021f4:	b480      	push	{r7}
 80021f6:	b083      	sub	sp, #12
 80021f8:	af00      	add	r7, sp, #0
 80021fa:	6078      	str	r0, [r7, #4]
 80021fc:	6039      	str	r1, [r7, #0]
    // Implementation
	return 0.0f;
 80021fe:	f04f 0300 	mov.w	r3, #0
}
 8002202:	4618      	mov	r0, r3
 8002204:	370c      	adds	r7, #12
 8002206:	46bd      	mov	sp, r7
 8002208:	bc80      	pop	{r7}
 800220a:	4770      	bx	lr

0800220c <extractIntegerPart>:

int extractIntegerPart(float value) {
 800220c:	b580      	push	{r7, lr}
 800220e:	b082      	sub	sp, #8
 8002210:	af00      	add	r7, sp, #0
 8002212:	6078      	str	r0, [r7, #4]
    return (int)floor(value);
 8002214:	6878      	ldr	r0, [r7, #4]
 8002216:	f7fe f9bb 	bl	8000590 <__aeabi_f2d>
 800221a:	4602      	mov	r2, r0
 800221c:	460b      	mov	r3, r1
 800221e:	4610      	mov	r0, r2
 8002220:	4619      	mov	r1, r3
 8002222:	f004 ffe1 	bl	80071e8 <floor>
 8002226:	4602      	mov	r2, r0
 8002228:	460b      	mov	r3, r1
 800222a:	4610      	mov	r0, r2
 800222c:	4619      	mov	r1, r3
 800222e:	f7fe fcb7 	bl	8000ba0 <__aeabi_d2iz>
 8002232:	4603      	mov	r3, r0
}
 8002234:	4618      	mov	r0, r3
 8002236:	3708      	adds	r7, #8
 8002238:	46bd      	mov	sp, r7
 800223a:	bd80      	pop	{r7, pc}

0800223c <extractDecimalPart>:
int extractIntegerPart2(float value) {
    // Implementation
	return (uint8_t)value;
}

int extractDecimalPart(float value) {
 800223c:	b580      	push	{r7, lr}
 800223e:	b084      	sub	sp, #16
 8002240:	af00      	add	r7, sp, #0
 8002242:	6078      	str	r0, [r7, #4]
    // Trừ đi phần nguyên để giữ lại phần thập phân
    float decimalPart = value - (int)value;
 8002244:	6878      	ldr	r0, [r7, #4]
 8002246:	f7fe fde1 	bl	8000e0c <__aeabi_f2iz>
 800224a:	4603      	mov	r3, r0
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe fd89 	bl	8000d64 <__aeabi_i2f>
 8002252:	4603      	mov	r3, r0
 8002254:	4619      	mov	r1, r3
 8002256:	6878      	ldr	r0, [r7, #4]
 8002258:	f7fe fcce 	bl	8000bf8 <__aeabi_fsub>
 800225c:	4603      	mov	r3, r0
 800225e:	60fb      	str	r3, [r7, #12]

    // Nhân với 100 hoặc 1000 để tăng độ chính xác, tùy thuộc vào số lượng chữ số thập phân bạn muốn giữ lại
    decimalPart *= 100;
 8002260:	4906      	ldr	r1, [pc, #24]	; (800227c <extractDecimalPart+0x40>)
 8002262:	68f8      	ldr	r0, [r7, #12]
 8002264:	f7fd ff7c 	bl	8000160 <__aeabi_fmul>
 8002268:	4603      	mov	r3, r0
 800226a:	60fb      	str	r3, [r7, #12]

    // Ép kiểu về int và trả về kết quả
    return (int)decimalPart;
 800226c:	68f8      	ldr	r0, [r7, #12]
 800226e:	f7fe fdcd 	bl	8000e0c <__aeabi_f2iz>
 8002272:	4603      	mov	r3, r0
}
 8002274:	4618      	mov	r0, r3
 8002276:	3710      	adds	r7, #16
 8002278:	46bd      	mov	sp, r7
 800227a:	bd80      	pop	{r7, pc}
 800227c:	42c80000 	.word	0x42c80000

08002280 <Reset_Handler>:
  .weak Reset_Handler
  .type Reset_Handler, %function
Reset_Handler:

/* Call the clock system initialization function.*/
    bl  SystemInit
 8002280:	f7ff ff9a 	bl	80021b8 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 8002284:	480b      	ldr	r0, [pc, #44]	; (80022b4 <LoopFillZerobss+0xe>)
  ldr r1, =_edata
 8002286:	490c      	ldr	r1, [pc, #48]	; (80022b8 <LoopFillZerobss+0x12>)
  ldr r2, =_sidata
 8002288:	4a0c      	ldr	r2, [pc, #48]	; (80022bc <LoopFillZerobss+0x16>)
  movs r3, #0
 800228a:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800228c:	e002      	b.n	8002294 <LoopCopyDataInit>

0800228e <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800228e:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002290:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002292:	3304      	adds	r3, #4

08002294 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002294:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002296:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002298:	d3f9      	bcc.n	800228e <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800229a:	4a09      	ldr	r2, [pc, #36]	; (80022c0 <LoopFillZerobss+0x1a>)
  ldr r4, =_ebss
 800229c:	4c09      	ldr	r4, [pc, #36]	; (80022c4 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800229e:	2300      	movs	r3, #0
  b LoopFillZerobss
 80022a0:	e001      	b.n	80022a6 <LoopFillZerobss>

080022a2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80022a2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80022a4:	3204      	adds	r2, #4

080022a6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80022a6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80022a8:	d3fb      	bcc.n	80022a2 <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80022aa:	f002 ff0b 	bl	80050c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl main
 80022ae:	f7ff fbcb 	bl	8001a48 <main>
  bx lr
 80022b2:	4770      	bx	lr
  ldr r0, =_sdata
 80022b4:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80022b8:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80022bc:	080076e4 	.word	0x080076e4
  ldr r2, =_sbss
 80022c0:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80022c4:	20000444 	.word	0x20000444

080022c8 <ADC1_2_IRQHandler>:
 * @retval : None
*/
    .section .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b Infinite_Loop
 80022c8:	e7fe      	b.n	80022c8 <ADC1_2_IRQHandler>
	...

080022cc <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80022cc:	b580      	push	{r7, lr}
 80022ce:	af00      	add	r7, sp, #0
    defined(STM32F102x6) || defined(STM32F102xB) || \
    defined(STM32F103x6) || defined(STM32F103xB) || defined(STM32F103xE) || defined(STM32F103xG) || \
    defined(STM32F105xC) || defined(STM32F107xC)

  /* Prefetch buffer is not available on value line devices */
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80022d0:	4b08      	ldr	r3, [pc, #32]	; (80022f4 <HAL_Init+0x28>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4a07      	ldr	r2, [pc, #28]	; (80022f4 <HAL_Init+0x28>)
 80022d6:	f043 0310 	orr.w	r3, r3, #16
 80022da:	6013      	str	r3, [r2, #0]
#endif
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80022dc:	2003      	movs	r0, #3
 80022de:	f000 f92b 	bl	8002538 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80022e2:	200f      	movs	r0, #15
 80022e4:	f000 f808 	bl	80022f8 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80022e8:	f7ff fdc2 	bl	8001e70 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80022ec:	2300      	movs	r3, #0
}
 80022ee:	4618      	mov	r0, r3
 80022f0:	bd80      	pop	{r7, pc}
 80022f2:	bf00      	nop
 80022f4:	40022000 	.word	0x40022000

080022f8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80022f8:	b580      	push	{r7, lr}
 80022fa:	b082      	sub	sp, #8
 80022fc:	af00      	add	r7, sp, #0
 80022fe:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002300:	4b12      	ldr	r3, [pc, #72]	; (800234c <HAL_InitTick+0x54>)
 8002302:	681a      	ldr	r2, [r3, #0]
 8002304:	4b12      	ldr	r3, [pc, #72]	; (8002350 <HAL_InitTick+0x58>)
 8002306:	781b      	ldrb	r3, [r3, #0]
 8002308:	4619      	mov	r1, r3
 800230a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 800230e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002312:	fbb2 f3f3 	udiv	r3, r2, r3
 8002316:	4618      	mov	r0, r3
 8002318:	f000 f935 	bl	8002586 <HAL_SYSTICK_Config>
 800231c:	4603      	mov	r3, r0
 800231e:	2b00      	cmp	r3, #0
 8002320:	d001      	beq.n	8002326 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002322:	2301      	movs	r3, #1
 8002324:	e00e      	b.n	8002344 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	2b0f      	cmp	r3, #15
 800232a:	d80a      	bhi.n	8002342 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800232c:	2200      	movs	r2, #0
 800232e:	6879      	ldr	r1, [r7, #4]
 8002330:	f04f 30ff 	mov.w	r0, #4294967295
 8002334:	f000 f90b 	bl	800254e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002338:	4a06      	ldr	r2, [pc, #24]	; (8002354 <HAL_InitTick+0x5c>)
 800233a:	687b      	ldr	r3, [r7, #4]
 800233c:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800233e:	2300      	movs	r3, #0
 8002340:	e000      	b.n	8002344 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002342:	2301      	movs	r3, #1
}
 8002344:	4618      	mov	r0, r3
 8002346:	3708      	adds	r7, #8
 8002348:	46bd      	mov	sp, r7
 800234a:	bd80      	pop	{r7, pc}
 800234c:	2000001c 	.word	0x2000001c
 8002350:	20000024 	.word	0x20000024
 8002354:	20000020 	.word	0x20000020

08002358 <HAL_IncTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002358:	b480      	push	{r7}
 800235a:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800235c:	4b05      	ldr	r3, [pc, #20]	; (8002374 <HAL_IncTick+0x1c>)
 800235e:	781b      	ldrb	r3, [r3, #0]
 8002360:	461a      	mov	r2, r3
 8002362:	4b05      	ldr	r3, [pc, #20]	; (8002378 <HAL_IncTick+0x20>)
 8002364:	681b      	ldr	r3, [r3, #0]
 8002366:	4413      	add	r3, r2
 8002368:	4a03      	ldr	r2, [pc, #12]	; (8002378 <HAL_IncTick+0x20>)
 800236a:	6013      	str	r3, [r2, #0]
}
 800236c:	bf00      	nop
 800236e:	46bd      	mov	sp, r7
 8002370:	bc80      	pop	{r7}
 8002372:	4770      	bx	lr
 8002374:	20000024 	.word	0x20000024
 8002378:	200002f4 	.word	0x200002f4

0800237c <HAL_GetTick>:
  * @note  This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800237c:	b480      	push	{r7}
 800237e:	af00      	add	r7, sp, #0
  return uwTick;
 8002380:	4b02      	ldr	r3, [pc, #8]	; (800238c <HAL_GetTick+0x10>)
 8002382:	681b      	ldr	r3, [r3, #0]
}
 8002384:	4618      	mov	r0, r3
 8002386:	46bd      	mov	sp, r7
 8002388:	bc80      	pop	{r7}
 800238a:	4770      	bx	lr
 800238c:	200002f4 	.word	0x200002f4

08002390 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8002390:	b580      	push	{r7, lr}
 8002392:	b084      	sub	sp, #16
 8002394:	af00      	add	r7, sp, #0
 8002396:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8002398:	f7ff fff0 	bl	800237c <HAL_GetTick>
 800239c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800239e:	687b      	ldr	r3, [r7, #4]
 80023a0:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80023a2:	68fb      	ldr	r3, [r7, #12]
 80023a4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80023a8:	d005      	beq.n	80023b6 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80023aa:	4b0a      	ldr	r3, [pc, #40]	; (80023d4 <HAL_Delay+0x44>)
 80023ac:	781b      	ldrb	r3, [r3, #0]
 80023ae:	461a      	mov	r2, r3
 80023b0:	68fb      	ldr	r3, [r7, #12]
 80023b2:	4413      	add	r3, r2
 80023b4:	60fb      	str	r3, [r7, #12]
  }

  while ((HAL_GetTick() - tickstart) < wait)
 80023b6:	bf00      	nop
 80023b8:	f7ff ffe0 	bl	800237c <HAL_GetTick>
 80023bc:	4602      	mov	r2, r0
 80023be:	68bb      	ldr	r3, [r7, #8]
 80023c0:	1ad3      	subs	r3, r2, r3
 80023c2:	68fa      	ldr	r2, [r7, #12]
 80023c4:	429a      	cmp	r2, r3
 80023c6:	d8f7      	bhi.n	80023b8 <HAL_Delay+0x28>
  {
  }
}
 80023c8:	bf00      	nop
 80023ca:	bf00      	nop
 80023cc:	3710      	adds	r7, #16
 80023ce:	46bd      	mov	sp, r7
 80023d0:	bd80      	pop	{r7, pc}
 80023d2:	bf00      	nop
 80023d4:	20000024 	.word	0x20000024

080023d8 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80023d8:	b480      	push	{r7}
 80023da:	b085      	sub	sp, #20
 80023dc:	af00      	add	r7, sp, #0
 80023de:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80023e0:	687b      	ldr	r3, [r7, #4]
 80023e2:	f003 0307 	and.w	r3, r3, #7
 80023e6:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80023e8:	4b0c      	ldr	r3, [pc, #48]	; (800241c <__NVIC_SetPriorityGrouping+0x44>)
 80023ea:	68db      	ldr	r3, [r3, #12]
 80023ec:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80023ee:	68ba      	ldr	r2, [r7, #8]
 80023f0:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 80023f4:	4013      	ands	r3, r2
 80023f6:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos) );               /* Insert write key and priority group */
 80023f8:	68fb      	ldr	r3, [r7, #12]
 80023fa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80023fc:	68bb      	ldr	r3, [r7, #8]
 80023fe:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002400:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002404:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002408:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800240a:	4a04      	ldr	r2, [pc, #16]	; (800241c <__NVIC_SetPriorityGrouping+0x44>)
 800240c:	68bb      	ldr	r3, [r7, #8]
 800240e:	60d3      	str	r3, [r2, #12]
}
 8002410:	bf00      	nop
 8002412:	3714      	adds	r7, #20
 8002414:	46bd      	mov	sp, r7
 8002416:	bc80      	pop	{r7}
 8002418:	4770      	bx	lr
 800241a:	bf00      	nop
 800241c:	e000ed00 	.word	0xe000ed00

08002420 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002420:	b480      	push	{r7}
 8002422:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002424:	4b04      	ldr	r3, [pc, #16]	; (8002438 <__NVIC_GetPriorityGrouping+0x18>)
 8002426:	68db      	ldr	r3, [r3, #12]
 8002428:	0a1b      	lsrs	r3, r3, #8
 800242a:	f003 0307 	and.w	r3, r3, #7
}
 800242e:	4618      	mov	r0, r3
 8002430:	46bd      	mov	sp, r7
 8002432:	bc80      	pop	{r7}
 8002434:	4770      	bx	lr
 8002436:	bf00      	nop
 8002438:	e000ed00 	.word	0xe000ed00

0800243c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800243c:	b480      	push	{r7}
 800243e:	b083      	sub	sp, #12
 8002440:	af00      	add	r7, sp, #0
 8002442:	4603      	mov	r3, r0
 8002444:	6039      	str	r1, [r7, #0]
 8002446:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002448:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800244c:	2b00      	cmp	r3, #0
 800244e:	db0a      	blt.n	8002466 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002450:	683b      	ldr	r3, [r7, #0]
 8002452:	b2da      	uxtb	r2, r3
 8002454:	490c      	ldr	r1, [pc, #48]	; (8002488 <__NVIC_SetPriority+0x4c>)
 8002456:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800245a:	0112      	lsls	r2, r2, #4
 800245c:	b2d2      	uxtb	r2, r2
 800245e:	440b      	add	r3, r1
 8002460:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002464:	e00a      	b.n	800247c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002466:	683b      	ldr	r3, [r7, #0]
 8002468:	b2da      	uxtb	r2, r3
 800246a:	4908      	ldr	r1, [pc, #32]	; (800248c <__NVIC_SetPriority+0x50>)
 800246c:	79fb      	ldrb	r3, [r7, #7]
 800246e:	f003 030f 	and.w	r3, r3, #15
 8002472:	3b04      	subs	r3, #4
 8002474:	0112      	lsls	r2, r2, #4
 8002476:	b2d2      	uxtb	r2, r2
 8002478:	440b      	add	r3, r1
 800247a:	761a      	strb	r2, [r3, #24]
}
 800247c:	bf00      	nop
 800247e:	370c      	adds	r7, #12
 8002480:	46bd      	mov	sp, r7
 8002482:	bc80      	pop	{r7}
 8002484:	4770      	bx	lr
 8002486:	bf00      	nop
 8002488:	e000e100 	.word	0xe000e100
 800248c:	e000ed00 	.word	0xe000ed00

08002490 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002490:	b480      	push	{r7}
 8002492:	b089      	sub	sp, #36	; 0x24
 8002494:	af00      	add	r7, sp, #0
 8002496:	60f8      	str	r0, [r7, #12]
 8002498:	60b9      	str	r1, [r7, #8]
 800249a:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 800249c:	68fb      	ldr	r3, [r7, #12]
 800249e:	f003 0307 	and.w	r3, r3, #7
 80024a2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80024a4:	69fb      	ldr	r3, [r7, #28]
 80024a6:	f1c3 0307 	rsb	r3, r3, #7
 80024aa:	2b04      	cmp	r3, #4
 80024ac:	bf28      	it	cs
 80024ae:	2304      	movcs	r3, #4
 80024b0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80024b2:	69fb      	ldr	r3, [r7, #28]
 80024b4:	3304      	adds	r3, #4
 80024b6:	2b06      	cmp	r3, #6
 80024b8:	d902      	bls.n	80024c0 <NVIC_EncodePriority+0x30>
 80024ba:	69fb      	ldr	r3, [r7, #28]
 80024bc:	3b03      	subs	r3, #3
 80024be:	e000      	b.n	80024c2 <NVIC_EncodePriority+0x32>
 80024c0:	2300      	movs	r3, #0
 80024c2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024c4:	f04f 32ff 	mov.w	r2, #4294967295
 80024c8:	69bb      	ldr	r3, [r7, #24]
 80024ca:	fa02 f303 	lsl.w	r3, r2, r3
 80024ce:	43da      	mvns	r2, r3
 80024d0:	68bb      	ldr	r3, [r7, #8]
 80024d2:	401a      	ands	r2, r3
 80024d4:	697b      	ldr	r3, [r7, #20]
 80024d6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80024d8:	f04f 31ff 	mov.w	r1, #4294967295
 80024dc:	697b      	ldr	r3, [r7, #20]
 80024de:	fa01 f303 	lsl.w	r3, r1, r3
 80024e2:	43d9      	mvns	r1, r3
 80024e4:	687b      	ldr	r3, [r7, #4]
 80024e6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80024e8:	4313      	orrs	r3, r2
         );
}
 80024ea:	4618      	mov	r0, r3
 80024ec:	3724      	adds	r7, #36	; 0x24
 80024ee:	46bd      	mov	sp, r7
 80024f0:	bc80      	pop	{r7}
 80024f2:	4770      	bx	lr

080024f4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80024f4:	b580      	push	{r7, lr}
 80024f6:	b082      	sub	sp, #8
 80024f8:	af00      	add	r7, sp, #0
 80024fa:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80024fc:	687b      	ldr	r3, [r7, #4]
 80024fe:	3b01      	subs	r3, #1
 8002500:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002504:	d301      	bcc.n	800250a <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002506:	2301      	movs	r3, #1
 8002508:	e00f      	b.n	800252a <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800250a:	4a0a      	ldr	r2, [pc, #40]	; (8002534 <SysTick_Config+0x40>)
 800250c:	687b      	ldr	r3, [r7, #4]
 800250e:	3b01      	subs	r3, #1
 8002510:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002512:	210f      	movs	r1, #15
 8002514:	f04f 30ff 	mov.w	r0, #4294967295
 8002518:	f7ff ff90 	bl	800243c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800251c:	4b05      	ldr	r3, [pc, #20]	; (8002534 <SysTick_Config+0x40>)
 800251e:	2200      	movs	r2, #0
 8002520:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002522:	4b04      	ldr	r3, [pc, #16]	; (8002534 <SysTick_Config+0x40>)
 8002524:	2207      	movs	r2, #7
 8002526:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002528:	2300      	movs	r3, #0
}
 800252a:	4618      	mov	r0, r3
 800252c:	3708      	adds	r7, #8
 800252e:	46bd      	mov	sp, r7
 8002530:	bd80      	pop	{r7, pc}
 8002532:	bf00      	nop
 8002534:	e000e010 	.word	0xe000e010

08002538 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002538:	b580      	push	{r7, lr}
 800253a:	b082      	sub	sp, #8
 800253c:	af00      	add	r7, sp, #0
 800253e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002540:	6878      	ldr	r0, [r7, #4]
 8002542:	f7ff ff49 	bl	80023d8 <__NVIC_SetPriorityGrouping>
}
 8002546:	bf00      	nop
 8002548:	3708      	adds	r7, #8
 800254a:	46bd      	mov	sp, r7
 800254c:	bd80      	pop	{r7, pc}

0800254e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800254e:	b580      	push	{r7, lr}
 8002550:	b086      	sub	sp, #24
 8002552:	af00      	add	r7, sp, #0
 8002554:	4603      	mov	r3, r0
 8002556:	60b9      	str	r1, [r7, #8]
 8002558:	607a      	str	r2, [r7, #4]
 800255a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800255c:	2300      	movs	r3, #0
 800255e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002560:	f7ff ff5e 	bl	8002420 <__NVIC_GetPriorityGrouping>
 8002564:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002566:	687a      	ldr	r2, [r7, #4]
 8002568:	68b9      	ldr	r1, [r7, #8]
 800256a:	6978      	ldr	r0, [r7, #20]
 800256c:	f7ff ff90 	bl	8002490 <NVIC_EncodePriority>
 8002570:	4602      	mov	r2, r0
 8002572:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002576:	4611      	mov	r1, r2
 8002578:	4618      	mov	r0, r3
 800257a:	f7ff ff5f 	bl	800243c <__NVIC_SetPriority>
}
 800257e:	bf00      	nop
 8002580:	3718      	adds	r7, #24
 8002582:	46bd      	mov	sp, r7
 8002584:	bd80      	pop	{r7, pc}

08002586 <HAL_SYSTICK_Config>:
  * @param  TicksNumb: Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002586:	b580      	push	{r7, lr}
 8002588:	b082      	sub	sp, #8
 800258a:	af00      	add	r7, sp, #0
 800258c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800258e:	6878      	ldr	r0, [r7, #4]
 8002590:	f7ff ffb0 	bl	80024f4 <SysTick_Config>
 8002594:	4603      	mov	r3, r0
}
 8002596:	4618      	mov	r0, r3
 8002598:	3708      	adds	r7, #8
 800259a:	46bd      	mov	sp, r7
 800259c:	bd80      	pop	{r7, pc}
	...

080025a0 <HAL_GPIO_Init>:
  * @param  GPIO_Init: pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80025a0:	b480      	push	{r7}
 80025a2:	b08b      	sub	sp, #44	; 0x2c
 80025a4:	af00      	add	r7, sp, #0
 80025a6:	6078      	str	r0, [r7, #4]
 80025a8:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00u;
 80025aa:	2300      	movs	r3, #0
 80025ac:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t ioposition;
  uint32_t iocurrent;
  uint32_t temp;
  uint32_t config = 0x00u;
 80025ae:	2300      	movs	r3, #0
 80025b0:	623b      	str	r3, [r7, #32]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 80025b2:	e169      	b.n	8002888 <HAL_GPIO_Init+0x2e8>
  {
    /* Get the IO position */
    ioposition = (0x01uL << position);
 80025b4:	2201      	movs	r2, #1
 80025b6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80025b8:	fa02 f303 	lsl.w	r3, r2, r3
 80025bc:	61fb      	str	r3, [r7, #28]

    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80025be:	683b      	ldr	r3, [r7, #0]
 80025c0:	681b      	ldr	r3, [r3, #0]
 80025c2:	69fa      	ldr	r2, [r7, #28]
 80025c4:	4013      	ands	r3, r2
 80025c6:	61bb      	str	r3, [r7, #24]

    if (iocurrent == ioposition)
 80025c8:	69ba      	ldr	r2, [r7, #24]
 80025ca:	69fb      	ldr	r3, [r7, #28]
 80025cc:	429a      	cmp	r2, r3
 80025ce:	f040 8158 	bne.w	8002882 <HAL_GPIO_Init+0x2e2>
    {
      /* Check the Alternate function parameters */
      assert_param(IS_GPIO_AF_INSTANCE(GPIOx));

      /* Based on the required mode, filling config variable with MODEy[1:0] and CNFy[3:2] corresponding bits */
      switch (GPIO_Init->Mode)
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	685b      	ldr	r3, [r3, #4]
 80025d6:	4a9a      	ldr	r2, [pc, #616]	; (8002840 <HAL_GPIO_Init+0x2a0>)
 80025d8:	4293      	cmp	r3, r2
 80025da:	d05e      	beq.n	800269a <HAL_GPIO_Init+0xfa>
 80025dc:	4a98      	ldr	r2, [pc, #608]	; (8002840 <HAL_GPIO_Init+0x2a0>)
 80025de:	4293      	cmp	r3, r2
 80025e0:	d875      	bhi.n	80026ce <HAL_GPIO_Init+0x12e>
 80025e2:	4a98      	ldr	r2, [pc, #608]	; (8002844 <HAL_GPIO_Init+0x2a4>)
 80025e4:	4293      	cmp	r3, r2
 80025e6:	d058      	beq.n	800269a <HAL_GPIO_Init+0xfa>
 80025e8:	4a96      	ldr	r2, [pc, #600]	; (8002844 <HAL_GPIO_Init+0x2a4>)
 80025ea:	4293      	cmp	r3, r2
 80025ec:	d86f      	bhi.n	80026ce <HAL_GPIO_Init+0x12e>
 80025ee:	4a96      	ldr	r2, [pc, #600]	; (8002848 <HAL_GPIO_Init+0x2a8>)
 80025f0:	4293      	cmp	r3, r2
 80025f2:	d052      	beq.n	800269a <HAL_GPIO_Init+0xfa>
 80025f4:	4a94      	ldr	r2, [pc, #592]	; (8002848 <HAL_GPIO_Init+0x2a8>)
 80025f6:	4293      	cmp	r3, r2
 80025f8:	d869      	bhi.n	80026ce <HAL_GPIO_Init+0x12e>
 80025fa:	4a94      	ldr	r2, [pc, #592]	; (800284c <HAL_GPIO_Init+0x2ac>)
 80025fc:	4293      	cmp	r3, r2
 80025fe:	d04c      	beq.n	800269a <HAL_GPIO_Init+0xfa>
 8002600:	4a92      	ldr	r2, [pc, #584]	; (800284c <HAL_GPIO_Init+0x2ac>)
 8002602:	4293      	cmp	r3, r2
 8002604:	d863      	bhi.n	80026ce <HAL_GPIO_Init+0x12e>
 8002606:	4a92      	ldr	r2, [pc, #584]	; (8002850 <HAL_GPIO_Init+0x2b0>)
 8002608:	4293      	cmp	r3, r2
 800260a:	d046      	beq.n	800269a <HAL_GPIO_Init+0xfa>
 800260c:	4a90      	ldr	r2, [pc, #576]	; (8002850 <HAL_GPIO_Init+0x2b0>)
 800260e:	4293      	cmp	r3, r2
 8002610:	d85d      	bhi.n	80026ce <HAL_GPIO_Init+0x12e>
 8002612:	2b12      	cmp	r3, #18
 8002614:	d82a      	bhi.n	800266c <HAL_GPIO_Init+0xcc>
 8002616:	2b12      	cmp	r3, #18
 8002618:	d859      	bhi.n	80026ce <HAL_GPIO_Init+0x12e>
 800261a:	a201      	add	r2, pc, #4	; (adr r2, 8002620 <HAL_GPIO_Init+0x80>)
 800261c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002620:	0800269b 	.word	0x0800269b
 8002624:	08002675 	.word	0x08002675
 8002628:	08002687 	.word	0x08002687
 800262c:	080026c9 	.word	0x080026c9
 8002630:	080026cf 	.word	0x080026cf
 8002634:	080026cf 	.word	0x080026cf
 8002638:	080026cf 	.word	0x080026cf
 800263c:	080026cf 	.word	0x080026cf
 8002640:	080026cf 	.word	0x080026cf
 8002644:	080026cf 	.word	0x080026cf
 8002648:	080026cf 	.word	0x080026cf
 800264c:	080026cf 	.word	0x080026cf
 8002650:	080026cf 	.word	0x080026cf
 8002654:	080026cf 	.word	0x080026cf
 8002658:	080026cf 	.word	0x080026cf
 800265c:	080026cf 	.word	0x080026cf
 8002660:	080026cf 	.word	0x080026cf
 8002664:	0800267d 	.word	0x0800267d
 8002668:	08002691 	.word	0x08002691
 800266c:	4a79      	ldr	r2, [pc, #484]	; (8002854 <HAL_GPIO_Init+0x2b4>)
 800266e:	4293      	cmp	r3, r2
 8002670:	d013      	beq.n	800269a <HAL_GPIO_Init+0xfa>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
          break;

        /* Parameters are checked with assert_param */
        default:
          break;
 8002672:	e02c      	b.n	80026ce <HAL_GPIO_Init+0x12e>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_PP;
 8002674:	683b      	ldr	r3, [r7, #0]
 8002676:	68db      	ldr	r3, [r3, #12]
 8002678:	623b      	str	r3, [r7, #32]
          break;
 800267a:	e029      	b.n	80026d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_GP_OUTPUT_OD;
 800267c:	683b      	ldr	r3, [r7, #0]
 800267e:	68db      	ldr	r3, [r3, #12]
 8002680:	3304      	adds	r3, #4
 8002682:	623b      	str	r3, [r7, #32]
          break;
 8002684:	e024      	b.n	80026d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_PP;
 8002686:	683b      	ldr	r3, [r7, #0]
 8002688:	68db      	ldr	r3, [r3, #12]
 800268a:	3308      	adds	r3, #8
 800268c:	623b      	str	r3, [r7, #32]
          break;
 800268e:	e01f      	b.n	80026d0 <HAL_GPIO_Init+0x130>
          config = GPIO_Init->Speed + GPIO_CR_CNF_AF_OUTPUT_OD;
 8002690:	683b      	ldr	r3, [r7, #0]
 8002692:	68db      	ldr	r3, [r3, #12]
 8002694:	330c      	adds	r3, #12
 8002696:	623b      	str	r3, [r7, #32]
          break;
 8002698:	e01a      	b.n	80026d0 <HAL_GPIO_Init+0x130>
          if (GPIO_Init->Pull == GPIO_NOPULL)
 800269a:	683b      	ldr	r3, [r7, #0]
 800269c:	689b      	ldr	r3, [r3, #8]
 800269e:	2b00      	cmp	r3, #0
 80026a0:	d102      	bne.n	80026a8 <HAL_GPIO_Init+0x108>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_FLOATING;
 80026a2:	2304      	movs	r3, #4
 80026a4:	623b      	str	r3, [r7, #32]
          break;
 80026a6:	e013      	b.n	80026d0 <HAL_GPIO_Init+0x130>
          else if (GPIO_Init->Pull == GPIO_PULLUP)
 80026a8:	683b      	ldr	r3, [r7, #0]
 80026aa:	689b      	ldr	r3, [r3, #8]
 80026ac:	2b01      	cmp	r3, #1
 80026ae:	d105      	bne.n	80026bc <HAL_GPIO_Init+0x11c>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026b0:	2308      	movs	r3, #8
 80026b2:	623b      	str	r3, [r7, #32]
            GPIOx->BSRR = ioposition;
 80026b4:	687b      	ldr	r3, [r7, #4]
 80026b6:	69fa      	ldr	r2, [r7, #28]
 80026b8:	611a      	str	r2, [r3, #16]
          break;
 80026ba:	e009      	b.n	80026d0 <HAL_GPIO_Init+0x130>
            config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_INPUT_PU_PD;
 80026bc:	2308      	movs	r3, #8
 80026be:	623b      	str	r3, [r7, #32]
            GPIOx->BRR = ioposition;
 80026c0:	687b      	ldr	r3, [r7, #4]
 80026c2:	69fa      	ldr	r2, [r7, #28]
 80026c4:	615a      	str	r2, [r3, #20]
          break;
 80026c6:	e003      	b.n	80026d0 <HAL_GPIO_Init+0x130>
          config = GPIO_CR_MODE_INPUT + GPIO_CR_CNF_ANALOG;
 80026c8:	2300      	movs	r3, #0
 80026ca:	623b      	str	r3, [r7, #32]
          break;
 80026cc:	e000      	b.n	80026d0 <HAL_GPIO_Init+0x130>
          break;
 80026ce:	bf00      	nop
      }

      /* Check if the current bit belongs to first half or last half of the pin count number
       in order to address CRH or CRL register*/
      configregister = (iocurrent < GPIO_PIN_8) ? &GPIOx->CRL     : &GPIOx->CRH;
 80026d0:	69bb      	ldr	r3, [r7, #24]
 80026d2:	2bff      	cmp	r3, #255	; 0xff
 80026d4:	d801      	bhi.n	80026da <HAL_GPIO_Init+0x13a>
 80026d6:	687b      	ldr	r3, [r7, #4]
 80026d8:	e001      	b.n	80026de <HAL_GPIO_Init+0x13e>
 80026da:	687b      	ldr	r3, [r7, #4]
 80026dc:	3304      	adds	r3, #4
 80026de:	617b      	str	r3, [r7, #20]
      registeroffset = (iocurrent < GPIO_PIN_8) ? (position << 2u) : ((position - 8u) << 2u);
 80026e0:	69bb      	ldr	r3, [r7, #24]
 80026e2:	2bff      	cmp	r3, #255	; 0xff
 80026e4:	d802      	bhi.n	80026ec <HAL_GPIO_Init+0x14c>
 80026e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026e8:	009b      	lsls	r3, r3, #2
 80026ea:	e002      	b.n	80026f2 <HAL_GPIO_Init+0x152>
 80026ec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80026ee:	3b08      	subs	r3, #8
 80026f0:	009b      	lsls	r3, r3, #2
 80026f2:	613b      	str	r3, [r7, #16]

      /* Apply the new configuration of the pin to the register */
      MODIFY_REG((*configregister), ((GPIO_CRL_MODE0 | GPIO_CRL_CNF0) << registeroffset), (config << registeroffset));
 80026f4:	697b      	ldr	r3, [r7, #20]
 80026f6:	681a      	ldr	r2, [r3, #0]
 80026f8:	210f      	movs	r1, #15
 80026fa:	693b      	ldr	r3, [r7, #16]
 80026fc:	fa01 f303 	lsl.w	r3, r1, r3
 8002700:	43db      	mvns	r3, r3
 8002702:	401a      	ands	r2, r3
 8002704:	6a39      	ldr	r1, [r7, #32]
 8002706:	693b      	ldr	r3, [r7, #16]
 8002708:	fa01 f303 	lsl.w	r3, r1, r3
 800270c:	431a      	orrs	r2, r3
 800270e:	697b      	ldr	r3, [r7, #20]
 8002710:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002712:	683b      	ldr	r3, [r7, #0]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800271a:	2b00      	cmp	r3, #0
 800271c:	f000 80b1 	beq.w	8002882 <HAL_GPIO_Init+0x2e2>
      {
        /* Enable AFIO Clock */
        __HAL_RCC_AFIO_CLK_ENABLE();
 8002720:	4b4d      	ldr	r3, [pc, #308]	; (8002858 <HAL_GPIO_Init+0x2b8>)
 8002722:	699b      	ldr	r3, [r3, #24]
 8002724:	4a4c      	ldr	r2, [pc, #304]	; (8002858 <HAL_GPIO_Init+0x2b8>)
 8002726:	f043 0301 	orr.w	r3, r3, #1
 800272a:	6193      	str	r3, [r2, #24]
 800272c:	4b4a      	ldr	r3, [pc, #296]	; (8002858 <HAL_GPIO_Init+0x2b8>)
 800272e:	699b      	ldr	r3, [r3, #24]
 8002730:	f003 0301 	and.w	r3, r3, #1
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	68bb      	ldr	r3, [r7, #8]
        temp = AFIO->EXTICR[position >> 2u];
 8002738:	4a48      	ldr	r2, [pc, #288]	; (800285c <HAL_GPIO_Init+0x2bc>)
 800273a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800273c:	089b      	lsrs	r3, r3, #2
 800273e:	3302      	adds	r3, #2
 8002740:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002744:	60fb      	str	r3, [r7, #12]
        CLEAR_BIT(temp, (0x0Fu) << (4u * (position & 0x03u)));
 8002746:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002748:	f003 0303 	and.w	r3, r3, #3
 800274c:	009b      	lsls	r3, r3, #2
 800274e:	220f      	movs	r2, #15
 8002750:	fa02 f303 	lsl.w	r3, r2, r3
 8002754:	43db      	mvns	r3, r3
 8002756:	68fa      	ldr	r2, [r7, #12]
 8002758:	4013      	ands	r3, r2
 800275a:	60fb      	str	r3, [r7, #12]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4u * (position & 0x03u)));
 800275c:	687b      	ldr	r3, [r7, #4]
 800275e:	4a40      	ldr	r2, [pc, #256]	; (8002860 <HAL_GPIO_Init+0x2c0>)
 8002760:	4293      	cmp	r3, r2
 8002762:	d013      	beq.n	800278c <HAL_GPIO_Init+0x1ec>
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	4a3f      	ldr	r2, [pc, #252]	; (8002864 <HAL_GPIO_Init+0x2c4>)
 8002768:	4293      	cmp	r3, r2
 800276a:	d00d      	beq.n	8002788 <HAL_GPIO_Init+0x1e8>
 800276c:	687b      	ldr	r3, [r7, #4]
 800276e:	4a3e      	ldr	r2, [pc, #248]	; (8002868 <HAL_GPIO_Init+0x2c8>)
 8002770:	4293      	cmp	r3, r2
 8002772:	d007      	beq.n	8002784 <HAL_GPIO_Init+0x1e4>
 8002774:	687b      	ldr	r3, [r7, #4]
 8002776:	4a3d      	ldr	r2, [pc, #244]	; (800286c <HAL_GPIO_Init+0x2cc>)
 8002778:	4293      	cmp	r3, r2
 800277a:	d101      	bne.n	8002780 <HAL_GPIO_Init+0x1e0>
 800277c:	2303      	movs	r3, #3
 800277e:	e006      	b.n	800278e <HAL_GPIO_Init+0x1ee>
 8002780:	2304      	movs	r3, #4
 8002782:	e004      	b.n	800278e <HAL_GPIO_Init+0x1ee>
 8002784:	2302      	movs	r3, #2
 8002786:	e002      	b.n	800278e <HAL_GPIO_Init+0x1ee>
 8002788:	2301      	movs	r3, #1
 800278a:	e000      	b.n	800278e <HAL_GPIO_Init+0x1ee>
 800278c:	2300      	movs	r3, #0
 800278e:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8002790:	f002 0203 	and.w	r2, r2, #3
 8002794:	0092      	lsls	r2, r2, #2
 8002796:	4093      	lsls	r3, r2
 8002798:	68fa      	ldr	r2, [r7, #12]
 800279a:	4313      	orrs	r3, r2
 800279c:	60fb      	str	r3, [r7, #12]
        AFIO->EXTICR[position >> 2u] = temp;
 800279e:	492f      	ldr	r1, [pc, #188]	; (800285c <HAL_GPIO_Init+0x2bc>)
 80027a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80027a2:	089b      	lsrs	r3, r3, #2
 80027a4:	3302      	adds	r3, #2
 80027a6:	68fa      	ldr	r2, [r7, #12]
 80027a8:	f841 2023 	str.w	r2, [r1, r3, lsl #2]


        /* Enable or disable the rising trigger */
        if ((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80027ac:	683b      	ldr	r3, [r7, #0]
 80027ae:	685b      	ldr	r3, [r3, #4]
 80027b0:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80027b4:	2b00      	cmp	r3, #0
 80027b6:	d006      	beq.n	80027c6 <HAL_GPIO_Init+0x226>
        {
          SET_BIT(EXTI->RTSR, iocurrent);
 80027b8:	4b2d      	ldr	r3, [pc, #180]	; (8002870 <HAL_GPIO_Init+0x2d0>)
 80027ba:	689a      	ldr	r2, [r3, #8]
 80027bc:	492c      	ldr	r1, [pc, #176]	; (8002870 <HAL_GPIO_Init+0x2d0>)
 80027be:	69bb      	ldr	r3, [r7, #24]
 80027c0:	4313      	orrs	r3, r2
 80027c2:	608b      	str	r3, [r1, #8]
 80027c4:	e006      	b.n	80027d4 <HAL_GPIO_Init+0x234>
        }
        else
        {
          CLEAR_BIT(EXTI->RTSR, iocurrent);
 80027c6:	4b2a      	ldr	r3, [pc, #168]	; (8002870 <HAL_GPIO_Init+0x2d0>)
 80027c8:	689a      	ldr	r2, [r3, #8]
 80027ca:	69bb      	ldr	r3, [r7, #24]
 80027cc:	43db      	mvns	r3, r3
 80027ce:	4928      	ldr	r1, [pc, #160]	; (8002870 <HAL_GPIO_Init+0x2d0>)
 80027d0:	4013      	ands	r3, r2
 80027d2:	608b      	str	r3, [r1, #8]
        }

        /* Enable or disable the falling trigger */
        if ((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80027d4:	683b      	ldr	r3, [r7, #0]
 80027d6:	685b      	ldr	r3, [r3, #4]
 80027d8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027dc:	2b00      	cmp	r3, #0
 80027de:	d006      	beq.n	80027ee <HAL_GPIO_Init+0x24e>
        {
          SET_BIT(EXTI->FTSR, iocurrent);
 80027e0:	4b23      	ldr	r3, [pc, #140]	; (8002870 <HAL_GPIO_Init+0x2d0>)
 80027e2:	68da      	ldr	r2, [r3, #12]
 80027e4:	4922      	ldr	r1, [pc, #136]	; (8002870 <HAL_GPIO_Init+0x2d0>)
 80027e6:	69bb      	ldr	r3, [r7, #24]
 80027e8:	4313      	orrs	r3, r2
 80027ea:	60cb      	str	r3, [r1, #12]
 80027ec:	e006      	b.n	80027fc <HAL_GPIO_Init+0x25c>
        }
        else
        {
          CLEAR_BIT(EXTI->FTSR, iocurrent);
 80027ee:	4b20      	ldr	r3, [pc, #128]	; (8002870 <HAL_GPIO_Init+0x2d0>)
 80027f0:	68da      	ldr	r2, [r3, #12]
 80027f2:	69bb      	ldr	r3, [r7, #24]
 80027f4:	43db      	mvns	r3, r3
 80027f6:	491e      	ldr	r1, [pc, #120]	; (8002870 <HAL_GPIO_Init+0x2d0>)
 80027f8:	4013      	ands	r3, r2
 80027fa:	60cb      	str	r3, [r1, #12]
        }

        /* Configure the event mask */
        if ((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80027fc:	683b      	ldr	r3, [r7, #0]
 80027fe:	685b      	ldr	r3, [r3, #4]
 8002800:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002804:	2b00      	cmp	r3, #0
 8002806:	d006      	beq.n	8002816 <HAL_GPIO_Init+0x276>
        {
          SET_BIT(EXTI->EMR, iocurrent);
 8002808:	4b19      	ldr	r3, [pc, #100]	; (8002870 <HAL_GPIO_Init+0x2d0>)
 800280a:	685a      	ldr	r2, [r3, #4]
 800280c:	4918      	ldr	r1, [pc, #96]	; (8002870 <HAL_GPIO_Init+0x2d0>)
 800280e:	69bb      	ldr	r3, [r7, #24]
 8002810:	4313      	orrs	r3, r2
 8002812:	604b      	str	r3, [r1, #4]
 8002814:	e006      	b.n	8002824 <HAL_GPIO_Init+0x284>
        }
        else
        {
          CLEAR_BIT(EXTI->EMR, iocurrent);
 8002816:	4b16      	ldr	r3, [pc, #88]	; (8002870 <HAL_GPIO_Init+0x2d0>)
 8002818:	685a      	ldr	r2, [r3, #4]
 800281a:	69bb      	ldr	r3, [r7, #24]
 800281c:	43db      	mvns	r3, r3
 800281e:	4914      	ldr	r1, [pc, #80]	; (8002870 <HAL_GPIO_Init+0x2d0>)
 8002820:	4013      	ands	r3, r2
 8002822:	604b      	str	r3, [r1, #4]
        }

        /* Configure the interrupt mask */
        if ((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002824:	683b      	ldr	r3, [r7, #0]
 8002826:	685b      	ldr	r3, [r3, #4]
 8002828:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800282c:	2b00      	cmp	r3, #0
 800282e:	d021      	beq.n	8002874 <HAL_GPIO_Init+0x2d4>
        {
          SET_BIT(EXTI->IMR, iocurrent);
 8002830:	4b0f      	ldr	r3, [pc, #60]	; (8002870 <HAL_GPIO_Init+0x2d0>)
 8002832:	681a      	ldr	r2, [r3, #0]
 8002834:	490e      	ldr	r1, [pc, #56]	; (8002870 <HAL_GPIO_Init+0x2d0>)
 8002836:	69bb      	ldr	r3, [r7, #24]
 8002838:	4313      	orrs	r3, r2
 800283a:	600b      	str	r3, [r1, #0]
 800283c:	e021      	b.n	8002882 <HAL_GPIO_Init+0x2e2>
 800283e:	bf00      	nop
 8002840:	10320000 	.word	0x10320000
 8002844:	10310000 	.word	0x10310000
 8002848:	10220000 	.word	0x10220000
 800284c:	10210000 	.word	0x10210000
 8002850:	10120000 	.word	0x10120000
 8002854:	10110000 	.word	0x10110000
 8002858:	40021000 	.word	0x40021000
 800285c:	40010000 	.word	0x40010000
 8002860:	40010800 	.word	0x40010800
 8002864:	40010c00 	.word	0x40010c00
 8002868:	40011000 	.word	0x40011000
 800286c:	40011400 	.word	0x40011400
 8002870:	40010400 	.word	0x40010400
        }
        else
        {
          CLEAR_BIT(EXTI->IMR, iocurrent);
 8002874:	4b0b      	ldr	r3, [pc, #44]	; (80028a4 <HAL_GPIO_Init+0x304>)
 8002876:	681a      	ldr	r2, [r3, #0]
 8002878:	69bb      	ldr	r3, [r7, #24]
 800287a:	43db      	mvns	r3, r3
 800287c:	4909      	ldr	r1, [pc, #36]	; (80028a4 <HAL_GPIO_Init+0x304>)
 800287e:	4013      	ands	r3, r2
 8002880:	600b      	str	r3, [r1, #0]
        }
      }
    }

	position++;
 8002882:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002884:	3301      	adds	r3, #1
 8002886:	627b      	str	r3, [r7, #36]	; 0x24
  while (((GPIO_Init->Pin) >> position) != 0x00u)
 8002888:	683b      	ldr	r3, [r7, #0]
 800288a:	681a      	ldr	r2, [r3, #0]
 800288c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800288e:	fa22 f303 	lsr.w	r3, r2, r3
 8002892:	2b00      	cmp	r3, #0
 8002894:	f47f ae8e 	bne.w	80025b4 <HAL_GPIO_Init+0x14>
  }
}
 8002898:	bf00      	nop
 800289a:	bf00      	nop
 800289c:	372c      	adds	r7, #44	; 0x2c
 800289e:	46bd      	mov	sp, r7
 80028a0:	bc80      	pop	{r7}
 80028a2:	4770      	bx	lr
 80028a4:	40010400 	.word	0x40010400

080028a8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80028a8:	b480      	push	{r7}
 80028aa:	b083      	sub	sp, #12
 80028ac:	af00      	add	r7, sp, #0
 80028ae:	6078      	str	r0, [r7, #4]
 80028b0:	460b      	mov	r3, r1
 80028b2:	807b      	strh	r3, [r7, #2]
 80028b4:	4613      	mov	r3, r2
 80028b6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 80028b8:	787b      	ldrb	r3, [r7, #1]
 80028ba:	2b00      	cmp	r3, #0
 80028bc:	d003      	beq.n	80028c6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80028be:	887a      	ldrh	r2, [r7, #2]
 80028c0:	687b      	ldr	r3, [r7, #4]
 80028c2:	611a      	str	r2, [r3, #16]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
  }
}
 80028c4:	e003      	b.n	80028ce <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16u;
 80028c6:	887b      	ldrh	r3, [r7, #2]
 80028c8:	041a      	lsls	r2, r3, #16
 80028ca:	687b      	ldr	r3, [r7, #4]
 80028cc:	611a      	str	r2, [r3, #16]
}
 80028ce:	bf00      	nop
 80028d0:	370c      	adds	r7, #12
 80028d2:	46bd      	mov	sp, r7
 80028d4:	bc80      	pop	{r7}
 80028d6:	4770      	bx	lr

080028d8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	b084      	sub	sp, #16
 80028dc:	af00      	add	r7, sp, #0
 80028de:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80028e0:	687b      	ldr	r3, [r7, #4]
 80028e2:	2b00      	cmp	r3, #0
 80028e4:	d101      	bne.n	80028ea <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80028e6:	2301      	movs	r3, #1
 80028e8:	e12b      	b.n	8002b42 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80028ea:	687b      	ldr	r3, [r7, #4]
 80028ec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80028f0:	b2db      	uxtb	r3, r3
 80028f2:	2b00      	cmp	r3, #0
 80028f4:	d106      	bne.n	8002904 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80028f6:	687b      	ldr	r3, [r7, #4]
 80028f8:	2200      	movs	r2, #0
 80028fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80028fe:	6878      	ldr	r0, [r7, #4]
 8002900:	f7ff fad8 	bl	8001eb4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002904:	687b      	ldr	r3, [r7, #4]
 8002906:	2224      	movs	r2, #36	; 0x24
 8002908:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800290c:	687b      	ldr	r3, [r7, #4]
 800290e:	681b      	ldr	r3, [r3, #0]
 8002910:	681a      	ldr	r2, [r3, #0]
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	681b      	ldr	r3, [r3, #0]
 8002916:	f022 0201 	bic.w	r2, r2, #1
 800291a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	681b      	ldr	r3, [r3, #0]
 8002920:	681a      	ldr	r2, [r3, #0]
 8002922:	687b      	ldr	r3, [r7, #4]
 8002924:	681b      	ldr	r3, [r3, #0]
 8002926:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800292a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800292c:	687b      	ldr	r3, [r7, #4]
 800292e:	681b      	ldr	r3, [r3, #0]
 8002930:	681a      	ldr	r2, [r3, #0]
 8002932:	687b      	ldr	r3, [r7, #4]
 8002934:	681b      	ldr	r3, [r3, #0]
 8002936:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800293a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800293c:	f001 f832 	bl	80039a4 <HAL_RCC_GetPCLK1Freq>
 8002940:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002942:	687b      	ldr	r3, [r7, #4]
 8002944:	685b      	ldr	r3, [r3, #4]
 8002946:	4a81      	ldr	r2, [pc, #516]	; (8002b4c <HAL_I2C_Init+0x274>)
 8002948:	4293      	cmp	r3, r2
 800294a:	d807      	bhi.n	800295c <HAL_I2C_Init+0x84>
 800294c:	68fb      	ldr	r3, [r7, #12]
 800294e:	4a80      	ldr	r2, [pc, #512]	; (8002b50 <HAL_I2C_Init+0x278>)
 8002950:	4293      	cmp	r3, r2
 8002952:	bf94      	ite	ls
 8002954:	2301      	movls	r3, #1
 8002956:	2300      	movhi	r3, #0
 8002958:	b2db      	uxtb	r3, r3
 800295a:	e006      	b.n	800296a <HAL_I2C_Init+0x92>
 800295c:	68fb      	ldr	r3, [r7, #12]
 800295e:	4a7d      	ldr	r2, [pc, #500]	; (8002b54 <HAL_I2C_Init+0x27c>)
 8002960:	4293      	cmp	r3, r2
 8002962:	bf94      	ite	ls
 8002964:	2301      	movls	r3, #1
 8002966:	2300      	movhi	r3, #0
 8002968:	b2db      	uxtb	r3, r3
 800296a:	2b00      	cmp	r3, #0
 800296c:	d001      	beq.n	8002972 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800296e:	2301      	movs	r3, #1
 8002970:	e0e7      	b.n	8002b42 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	4a78      	ldr	r2, [pc, #480]	; (8002b58 <HAL_I2C_Init+0x280>)
 8002976:	fba2 2303 	umull	r2, r3, r2, r3
 800297a:	0c9b      	lsrs	r3, r3, #18
 800297c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800297e:	687b      	ldr	r3, [r7, #4]
 8002980:	681b      	ldr	r3, [r3, #0]
 8002982:	685b      	ldr	r3, [r3, #4]
 8002984:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	68ba      	ldr	r2, [r7, #8]
 800298e:	430a      	orrs	r2, r1
 8002990:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8002992:	687b      	ldr	r3, [r7, #4]
 8002994:	681b      	ldr	r3, [r3, #0]
 8002996:	6a1b      	ldr	r3, [r3, #32]
 8002998:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800299c:	687b      	ldr	r3, [r7, #4]
 800299e:	685b      	ldr	r3, [r3, #4]
 80029a0:	4a6a      	ldr	r2, [pc, #424]	; (8002b4c <HAL_I2C_Init+0x274>)
 80029a2:	4293      	cmp	r3, r2
 80029a4:	d802      	bhi.n	80029ac <HAL_I2C_Init+0xd4>
 80029a6:	68bb      	ldr	r3, [r7, #8]
 80029a8:	3301      	adds	r3, #1
 80029aa:	e009      	b.n	80029c0 <HAL_I2C_Init+0xe8>
 80029ac:	68bb      	ldr	r3, [r7, #8]
 80029ae:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80029b2:	fb02 f303 	mul.w	r3, r2, r3
 80029b6:	4a69      	ldr	r2, [pc, #420]	; (8002b5c <HAL_I2C_Init+0x284>)
 80029b8:	fba2 2303 	umull	r2, r3, r2, r3
 80029bc:	099b      	lsrs	r3, r3, #6
 80029be:	3301      	adds	r3, #1
 80029c0:	687a      	ldr	r2, [r7, #4]
 80029c2:	6812      	ldr	r2, [r2, #0]
 80029c4:	430b      	orrs	r3, r1
 80029c6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80029c8:	687b      	ldr	r3, [r7, #4]
 80029ca:	681b      	ldr	r3, [r3, #0]
 80029cc:	69db      	ldr	r3, [r3, #28]
 80029ce:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80029d2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80029d6:	687b      	ldr	r3, [r7, #4]
 80029d8:	685b      	ldr	r3, [r3, #4]
 80029da:	495c      	ldr	r1, [pc, #368]	; (8002b4c <HAL_I2C_Init+0x274>)
 80029dc:	428b      	cmp	r3, r1
 80029de:	d819      	bhi.n	8002a14 <HAL_I2C_Init+0x13c>
 80029e0:	68fb      	ldr	r3, [r7, #12]
 80029e2:	1e59      	subs	r1, r3, #1
 80029e4:	687b      	ldr	r3, [r7, #4]
 80029e6:	685b      	ldr	r3, [r3, #4]
 80029e8:	005b      	lsls	r3, r3, #1
 80029ea:	fbb1 f3f3 	udiv	r3, r1, r3
 80029ee:	1c59      	adds	r1, r3, #1
 80029f0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80029f4:	400b      	ands	r3, r1
 80029f6:	2b00      	cmp	r3, #0
 80029f8:	d00a      	beq.n	8002a10 <HAL_I2C_Init+0x138>
 80029fa:	68fb      	ldr	r3, [r7, #12]
 80029fc:	1e59      	subs	r1, r3, #1
 80029fe:	687b      	ldr	r3, [r7, #4]
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	005b      	lsls	r3, r3, #1
 8002a04:	fbb1 f3f3 	udiv	r3, r1, r3
 8002a08:	3301      	adds	r3, #1
 8002a0a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a0e:	e051      	b.n	8002ab4 <HAL_I2C_Init+0x1dc>
 8002a10:	2304      	movs	r3, #4
 8002a12:	e04f      	b.n	8002ab4 <HAL_I2C_Init+0x1dc>
 8002a14:	687b      	ldr	r3, [r7, #4]
 8002a16:	689b      	ldr	r3, [r3, #8]
 8002a18:	2b00      	cmp	r3, #0
 8002a1a:	d111      	bne.n	8002a40 <HAL_I2C_Init+0x168>
 8002a1c:	68fb      	ldr	r3, [r7, #12]
 8002a1e:	1e58      	subs	r0, r3, #1
 8002a20:	687b      	ldr	r3, [r7, #4]
 8002a22:	6859      	ldr	r1, [r3, #4]
 8002a24:	460b      	mov	r3, r1
 8002a26:	005b      	lsls	r3, r3, #1
 8002a28:	440b      	add	r3, r1
 8002a2a:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a2e:	3301      	adds	r3, #1
 8002a30:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a34:	2b00      	cmp	r3, #0
 8002a36:	bf0c      	ite	eq
 8002a38:	2301      	moveq	r3, #1
 8002a3a:	2300      	movne	r3, #0
 8002a3c:	b2db      	uxtb	r3, r3
 8002a3e:	e012      	b.n	8002a66 <HAL_I2C_Init+0x18e>
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	1e58      	subs	r0, r3, #1
 8002a44:	687b      	ldr	r3, [r7, #4]
 8002a46:	6859      	ldr	r1, [r3, #4]
 8002a48:	460b      	mov	r3, r1
 8002a4a:	009b      	lsls	r3, r3, #2
 8002a4c:	440b      	add	r3, r1
 8002a4e:	0099      	lsls	r1, r3, #2
 8002a50:	440b      	add	r3, r1
 8002a52:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a56:	3301      	adds	r3, #1
 8002a58:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a5c:	2b00      	cmp	r3, #0
 8002a5e:	bf0c      	ite	eq
 8002a60:	2301      	moveq	r3, #1
 8002a62:	2300      	movne	r3, #0
 8002a64:	b2db      	uxtb	r3, r3
 8002a66:	2b00      	cmp	r3, #0
 8002a68:	d001      	beq.n	8002a6e <HAL_I2C_Init+0x196>
 8002a6a:	2301      	movs	r3, #1
 8002a6c:	e022      	b.n	8002ab4 <HAL_I2C_Init+0x1dc>
 8002a6e:	687b      	ldr	r3, [r7, #4]
 8002a70:	689b      	ldr	r3, [r3, #8]
 8002a72:	2b00      	cmp	r3, #0
 8002a74:	d10e      	bne.n	8002a94 <HAL_I2C_Init+0x1bc>
 8002a76:	68fb      	ldr	r3, [r7, #12]
 8002a78:	1e58      	subs	r0, r3, #1
 8002a7a:	687b      	ldr	r3, [r7, #4]
 8002a7c:	6859      	ldr	r1, [r3, #4]
 8002a7e:	460b      	mov	r3, r1
 8002a80:	005b      	lsls	r3, r3, #1
 8002a82:	440b      	add	r3, r1
 8002a84:	fbb0 f3f3 	udiv	r3, r0, r3
 8002a88:	3301      	adds	r3, #1
 8002a8a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002a8e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8002a92:	e00f      	b.n	8002ab4 <HAL_I2C_Init+0x1dc>
 8002a94:	68fb      	ldr	r3, [r7, #12]
 8002a96:	1e58      	subs	r0, r3, #1
 8002a98:	687b      	ldr	r3, [r7, #4]
 8002a9a:	6859      	ldr	r1, [r3, #4]
 8002a9c:	460b      	mov	r3, r1
 8002a9e:	009b      	lsls	r3, r3, #2
 8002aa0:	440b      	add	r3, r1
 8002aa2:	0099      	lsls	r1, r3, #2
 8002aa4:	440b      	add	r3, r1
 8002aa6:	fbb0 f3f3 	udiv	r3, r0, r3
 8002aaa:	3301      	adds	r3, #1
 8002aac:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002ab0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8002ab4:	6879      	ldr	r1, [r7, #4]
 8002ab6:	6809      	ldr	r1, [r1, #0]
 8002ab8:	4313      	orrs	r3, r2
 8002aba:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	681b      	ldr	r3, [r3, #0]
 8002ac0:	681b      	ldr	r3, [r3, #0]
 8002ac2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	69da      	ldr	r2, [r3, #28]
 8002aca:	687b      	ldr	r3, [r7, #4]
 8002acc:	6a1b      	ldr	r3, [r3, #32]
 8002ace:	431a      	orrs	r2, r3
 8002ad0:	687b      	ldr	r3, [r7, #4]
 8002ad2:	681b      	ldr	r3, [r3, #0]
 8002ad4:	430a      	orrs	r2, r1
 8002ad6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8002ad8:	687b      	ldr	r3, [r7, #4]
 8002ada:	681b      	ldr	r3, [r3, #0]
 8002adc:	689b      	ldr	r3, [r3, #8]
 8002ade:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8002ae2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8002ae6:	687a      	ldr	r2, [r7, #4]
 8002ae8:	6911      	ldr	r1, [r2, #16]
 8002aea:	687a      	ldr	r2, [r7, #4]
 8002aec:	68d2      	ldr	r2, [r2, #12]
 8002aee:	4311      	orrs	r1, r2
 8002af0:	687a      	ldr	r2, [r7, #4]
 8002af2:	6812      	ldr	r2, [r2, #0]
 8002af4:	430b      	orrs	r3, r1
 8002af6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8002af8:	687b      	ldr	r3, [r7, #4]
 8002afa:	681b      	ldr	r3, [r3, #0]
 8002afc:	68db      	ldr	r3, [r3, #12]
 8002afe:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8002b02:	687b      	ldr	r3, [r7, #4]
 8002b04:	695a      	ldr	r2, [r3, #20]
 8002b06:	687b      	ldr	r3, [r7, #4]
 8002b08:	699b      	ldr	r3, [r3, #24]
 8002b0a:	431a      	orrs	r2, r3
 8002b0c:	687b      	ldr	r3, [r7, #4]
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	430a      	orrs	r2, r1
 8002b12:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	681a      	ldr	r2, [r3, #0]
 8002b1a:	687b      	ldr	r3, [r7, #4]
 8002b1c:	681b      	ldr	r3, [r3, #0]
 8002b1e:	f042 0201 	orr.w	r2, r2, #1
 8002b22:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002b24:	687b      	ldr	r3, [r7, #4]
 8002b26:	2200      	movs	r2, #0
 8002b28:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	2220      	movs	r2, #32
 8002b2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002b32:	687b      	ldr	r3, [r7, #4]
 8002b34:	2200      	movs	r2, #0
 8002b36:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8002b38:	687b      	ldr	r3, [r7, #4]
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8002b40:	2300      	movs	r3, #0
}
 8002b42:	4618      	mov	r0, r3
 8002b44:	3710      	adds	r7, #16
 8002b46:	46bd      	mov	sp, r7
 8002b48:	bd80      	pop	{r7, pc}
 8002b4a:	bf00      	nop
 8002b4c:	000186a0 	.word	0x000186a0
 8002b50:	001e847f 	.word	0x001e847f
 8002b54:	003d08ff 	.word	0x003d08ff
 8002b58:	431bde83 	.word	0x431bde83
 8002b5c:	10624dd3 	.word	0x10624dd3

08002b60 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002b60:	b580      	push	{r7, lr}
 8002b62:	b088      	sub	sp, #32
 8002b64:	af02      	add	r7, sp, #8
 8002b66:	60f8      	str	r0, [r7, #12]
 8002b68:	607a      	str	r2, [r7, #4]
 8002b6a:	461a      	mov	r2, r3
 8002b6c:	460b      	mov	r3, r1
 8002b6e:	817b      	strh	r3, [r7, #10]
 8002b70:	4613      	mov	r3, r2
 8002b72:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002b74:	f7ff fc02 	bl	800237c <HAL_GetTick>
 8002b78:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002b7a:	68fb      	ldr	r3, [r7, #12]
 8002b7c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8002b80:	b2db      	uxtb	r3, r3
 8002b82:	2b20      	cmp	r3, #32
 8002b84:	f040 80e0 	bne.w	8002d48 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002b88:	697b      	ldr	r3, [r7, #20]
 8002b8a:	9300      	str	r3, [sp, #0]
 8002b8c:	2319      	movs	r3, #25
 8002b8e:	2201      	movs	r2, #1
 8002b90:	4970      	ldr	r1, [pc, #448]	; (8002d54 <HAL_I2C_Master_Transmit+0x1f4>)
 8002b92:	68f8      	ldr	r0, [r7, #12]
 8002b94:	f000 f964 	bl	8002e60 <I2C_WaitOnFlagUntilTimeout>
 8002b98:	4603      	mov	r3, r0
 8002b9a:	2b00      	cmp	r3, #0
 8002b9c:	d001      	beq.n	8002ba2 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8002b9e:	2302      	movs	r3, #2
 8002ba0:	e0d3      	b.n	8002d4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8002ba8:	2b01      	cmp	r3, #1
 8002baa:	d101      	bne.n	8002bb0 <HAL_I2C_Master_Transmit+0x50>
 8002bac:	2302      	movs	r3, #2
 8002bae:	e0cc      	b.n	8002d4a <HAL_I2C_Master_Transmit+0x1ea>
 8002bb0:	68fb      	ldr	r3, [r7, #12]
 8002bb2:	2201      	movs	r2, #1
 8002bb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002bb8:	68fb      	ldr	r3, [r7, #12]
 8002bba:	681b      	ldr	r3, [r3, #0]
 8002bbc:	681b      	ldr	r3, [r3, #0]
 8002bbe:	f003 0301 	and.w	r3, r3, #1
 8002bc2:	2b01      	cmp	r3, #1
 8002bc4:	d007      	beq.n	8002bd6 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f042 0201 	orr.w	r2, r2, #1
 8002bd4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bd6:	68fb      	ldr	r3, [r7, #12]
 8002bd8:	681b      	ldr	r3, [r3, #0]
 8002bda:	681a      	ldr	r2, [r3, #0]
 8002bdc:	68fb      	ldr	r3, [r7, #12]
 8002bde:	681b      	ldr	r3, [r3, #0]
 8002be0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8002be4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8002be6:	68fb      	ldr	r3, [r7, #12]
 8002be8:	2221      	movs	r2, #33	; 0x21
 8002bea:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	2210      	movs	r2, #16
 8002bf2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002bf6:	68fb      	ldr	r3, [r7, #12]
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002bfc:	68fb      	ldr	r3, [r7, #12]
 8002bfe:	687a      	ldr	r2, [r7, #4]
 8002c00:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	893a      	ldrh	r2, [r7, #8]
 8002c06:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002c08:	68fb      	ldr	r3, [r7, #12]
 8002c0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c0c:	b29a      	uxth	r2, r3
 8002c0e:	68fb      	ldr	r3, [r7, #12]
 8002c10:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002c12:	68fb      	ldr	r3, [r7, #12]
 8002c14:	4a50      	ldr	r2, [pc, #320]	; (8002d58 <HAL_I2C_Master_Transmit+0x1f8>)
 8002c16:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002c18:	8979      	ldrh	r1, [r7, #10]
 8002c1a:	697b      	ldr	r3, [r7, #20]
 8002c1c:	6a3a      	ldr	r2, [r7, #32]
 8002c1e:	68f8      	ldr	r0, [r7, #12]
 8002c20:	f000 f89c 	bl	8002d5c <I2C_MasterRequestWrite>
 8002c24:	4603      	mov	r3, r0
 8002c26:	2b00      	cmp	r3, #0
 8002c28:	d001      	beq.n	8002c2e <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8002c2a:	2301      	movs	r3, #1
 8002c2c:	e08d      	b.n	8002d4a <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002c2e:	2300      	movs	r3, #0
 8002c30:	613b      	str	r3, [r7, #16]
 8002c32:	68fb      	ldr	r3, [r7, #12]
 8002c34:	681b      	ldr	r3, [r3, #0]
 8002c36:	695b      	ldr	r3, [r3, #20]
 8002c38:	613b      	str	r3, [r7, #16]
 8002c3a:	68fb      	ldr	r3, [r7, #12]
 8002c3c:	681b      	ldr	r3, [r3, #0]
 8002c3e:	699b      	ldr	r3, [r3, #24]
 8002c40:	613b      	str	r3, [r7, #16]
 8002c42:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002c44:	e066      	b.n	8002d14 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c46:	697a      	ldr	r2, [r7, #20]
 8002c48:	6a39      	ldr	r1, [r7, #32]
 8002c4a:	68f8      	ldr	r0, [r7, #12]
 8002c4c:	f000 fa22 	bl	8003094 <I2C_WaitOnTXEFlagUntilTimeout>
 8002c50:	4603      	mov	r3, r0
 8002c52:	2b00      	cmp	r3, #0
 8002c54:	d00d      	beq.n	8002c72 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002c56:	68fb      	ldr	r3, [r7, #12]
 8002c58:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c5a:	2b04      	cmp	r3, #4
 8002c5c:	d107      	bne.n	8002c6e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002c5e:	68fb      	ldr	r3, [r7, #12]
 8002c60:	681b      	ldr	r3, [r3, #0]
 8002c62:	681a      	ldr	r2, [r3, #0]
 8002c64:	68fb      	ldr	r3, [r7, #12]
 8002c66:	681b      	ldr	r3, [r3, #0]
 8002c68:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002c6c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002c6e:	2301      	movs	r3, #1
 8002c70:	e06b      	b.n	8002d4a <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002c72:	68fb      	ldr	r3, [r7, #12]
 8002c74:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c76:	781a      	ldrb	r2, [r3, #0]
 8002c78:	68fb      	ldr	r3, [r7, #12]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002c7e:	68fb      	ldr	r3, [r7, #12]
 8002c80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002c82:	1c5a      	adds	r2, r3, #1
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8002c88:	68fb      	ldr	r3, [r7, #12]
 8002c8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002c8c:	b29b      	uxth	r3, r3
 8002c8e:	3b01      	subs	r3, #1
 8002c90:	b29a      	uxth	r2, r3
 8002c92:	68fb      	ldr	r3, [r7, #12]
 8002c94:	855a      	strh	r2, [r3, #42]	; 0x2a
      hi2c->XferSize--;
 8002c96:	68fb      	ldr	r3, [r7, #12]
 8002c98:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002c9a:	3b01      	subs	r3, #1
 8002c9c:	b29a      	uxth	r2, r3
 8002c9e:	68fb      	ldr	r3, [r7, #12]
 8002ca0:	851a      	strh	r2, [r3, #40]	; 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8002ca2:	68fb      	ldr	r3, [r7, #12]
 8002ca4:	681b      	ldr	r3, [r3, #0]
 8002ca6:	695b      	ldr	r3, [r3, #20]
 8002ca8:	f003 0304 	and.w	r3, r3, #4
 8002cac:	2b04      	cmp	r3, #4
 8002cae:	d11b      	bne.n	8002ce8 <HAL_I2C_Master_Transmit+0x188>
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002cb4:	2b00      	cmp	r3, #0
 8002cb6:	d017      	beq.n	8002ce8 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002cb8:	68fb      	ldr	r3, [r7, #12]
 8002cba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cbc:	781a      	ldrb	r2, [r3, #0]
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	681b      	ldr	r3, [r3, #0]
 8002cc2:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002cc8:	1c5a      	adds	r2, r3, #1
 8002cca:	68fb      	ldr	r3, [r7, #12]
 8002ccc:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update counter */
        hi2c->XferCount--;
 8002cce:	68fb      	ldr	r3, [r7, #12]
 8002cd0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8002cd2:	b29b      	uxth	r3, r3
 8002cd4:	3b01      	subs	r3, #1
 8002cd6:	b29a      	uxth	r2, r3
 8002cd8:	68fb      	ldr	r3, [r7, #12]
 8002cda:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->XferSize--;
 8002cdc:	68fb      	ldr	r3, [r7, #12]
 8002cde:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002ce0:	3b01      	subs	r3, #1
 8002ce2:	b29a      	uxth	r2, r3
 8002ce4:	68fb      	ldr	r3, [r7, #12]
 8002ce6:	851a      	strh	r2, [r3, #40]	; 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002ce8:	697a      	ldr	r2, [r7, #20]
 8002cea:	6a39      	ldr	r1, [r7, #32]
 8002cec:	68f8      	ldr	r0, [r7, #12]
 8002cee:	f000 fa19 	bl	8003124 <I2C_WaitOnBTFFlagUntilTimeout>
 8002cf2:	4603      	mov	r3, r0
 8002cf4:	2b00      	cmp	r3, #0
 8002cf6:	d00d      	beq.n	8002d14 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cfc:	2b04      	cmp	r3, #4
 8002cfe:	d107      	bne.n	8002d10 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d00:	68fb      	ldr	r3, [r7, #12]
 8002d02:	681b      	ldr	r3, [r3, #0]
 8002d04:	681a      	ldr	r2, [r3, #0]
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	681b      	ldr	r3, [r3, #0]
 8002d0a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d0e:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002d10:	2301      	movs	r3, #1
 8002d12:	e01a      	b.n	8002d4a <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002d14:	68fb      	ldr	r3, [r7, #12]
 8002d16:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8002d18:	2b00      	cmp	r3, #0
 8002d1a:	d194      	bne.n	8002c46 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d1c:	68fb      	ldr	r3, [r7, #12]
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	681a      	ldr	r2, [r3, #0]
 8002d22:	68fb      	ldr	r3, [r7, #12]
 8002d24:	681b      	ldr	r3, [r3, #0]
 8002d26:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002d2a:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002d2c:	68fb      	ldr	r3, [r7, #12]
 8002d2e:	2220      	movs	r2, #32
 8002d30:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002d34:	68fb      	ldr	r3, [r7, #12]
 8002d36:	2200      	movs	r2, #0
 8002d38:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002d3c:	68fb      	ldr	r3, [r7, #12]
 8002d3e:	2200      	movs	r2, #0
 8002d40:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_OK;
 8002d44:	2300      	movs	r3, #0
 8002d46:	e000      	b.n	8002d4a <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002d48:	2302      	movs	r3, #2
  }
}
 8002d4a:	4618      	mov	r0, r3
 8002d4c:	3718      	adds	r7, #24
 8002d4e:	46bd      	mov	sp, r7
 8002d50:	bd80      	pop	{r7, pc}
 8002d52:	bf00      	nop
 8002d54:	00100002 	.word	0x00100002
 8002d58:	ffff0000 	.word	0xffff0000

08002d5c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8002d5c:	b580      	push	{r7, lr}
 8002d5e:	b088      	sub	sp, #32
 8002d60:	af02      	add	r7, sp, #8
 8002d62:	60f8      	str	r0, [r7, #12]
 8002d64:	607a      	str	r2, [r7, #4]
 8002d66:	603b      	str	r3, [r7, #0]
 8002d68:	460b      	mov	r3, r1
 8002d6a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8002d6c:	68fb      	ldr	r3, [r7, #12]
 8002d6e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8002d70:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8002d72:	697b      	ldr	r3, [r7, #20]
 8002d74:	2b08      	cmp	r3, #8
 8002d76:	d006      	beq.n	8002d86 <I2C_MasterRequestWrite+0x2a>
 8002d78:	697b      	ldr	r3, [r7, #20]
 8002d7a:	2b01      	cmp	r3, #1
 8002d7c:	d003      	beq.n	8002d86 <I2C_MasterRequestWrite+0x2a>
 8002d7e:	697b      	ldr	r3, [r7, #20]
 8002d80:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8002d84:	d108      	bne.n	8002d98 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002d86:	68fb      	ldr	r3, [r7, #12]
 8002d88:	681b      	ldr	r3, [r3, #0]
 8002d8a:	681a      	ldr	r2, [r3, #0]
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002d94:	601a      	str	r2, [r3, #0]
 8002d96:	e00b      	b.n	8002db0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8002d98:	68fb      	ldr	r3, [r7, #12]
 8002d9a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d9c:	2b12      	cmp	r3, #18
 8002d9e:	d107      	bne.n	8002db0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8002da0:	68fb      	ldr	r3, [r7, #12]
 8002da2:	681b      	ldr	r3, [r3, #0]
 8002da4:	681a      	ldr	r2, [r3, #0]
 8002da6:	68fb      	ldr	r3, [r7, #12]
 8002da8:	681b      	ldr	r3, [r3, #0]
 8002daa:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8002dae:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8002db0:	683b      	ldr	r3, [r7, #0]
 8002db2:	9300      	str	r3, [sp, #0]
 8002db4:	687b      	ldr	r3, [r7, #4]
 8002db6:	2200      	movs	r2, #0
 8002db8:	f04f 1101 	mov.w	r1, #65537	; 0x10001
 8002dbc:	68f8      	ldr	r0, [r7, #12]
 8002dbe:	f000 f84f 	bl	8002e60 <I2C_WaitOnFlagUntilTimeout>
 8002dc2:	4603      	mov	r3, r0
 8002dc4:	2b00      	cmp	r3, #0
 8002dc6:	d00d      	beq.n	8002de4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8002dc8:	68fb      	ldr	r3, [r7, #12]
 8002dca:	681b      	ldr	r3, [r3, #0]
 8002dcc:	681b      	ldr	r3, [r3, #0]
 8002dce:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8002dd2:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8002dd6:	d103      	bne.n	8002de0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8002dd8:	68fb      	ldr	r3, [r7, #12]
 8002dda:	f44f 7200 	mov.w	r2, #512	; 0x200
 8002dde:	641a      	str	r2, [r3, #64]	; 0x40
    }
    return HAL_TIMEOUT;
 8002de0:	2303      	movs	r3, #3
 8002de2:	e035      	b.n	8002e50 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8002de4:	68fb      	ldr	r3, [r7, #12]
 8002de6:	691b      	ldr	r3, [r3, #16]
 8002de8:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8002dec:	d108      	bne.n	8002e00 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8002dee:	897b      	ldrh	r3, [r7, #10]
 8002df0:	b2db      	uxtb	r3, r3
 8002df2:	461a      	mov	r2, r3
 8002df4:	68fb      	ldr	r3, [r7, #12]
 8002df6:	681b      	ldr	r3, [r3, #0]
 8002df8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8002dfc:	611a      	str	r2, [r3, #16]
 8002dfe:	e01b      	b.n	8002e38 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8002e00:	897b      	ldrh	r3, [r7, #10]
 8002e02:	11db      	asrs	r3, r3, #7
 8002e04:	b2db      	uxtb	r3, r3
 8002e06:	f003 0306 	and.w	r3, r3, #6
 8002e0a:	b2db      	uxtb	r3, r3
 8002e0c:	f063 030f 	orn	r3, r3, #15
 8002e10:	b2da      	uxtb	r2, r3
 8002e12:	68fb      	ldr	r3, [r7, #12]
 8002e14:	681b      	ldr	r3, [r3, #0]
 8002e16:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8002e18:	683b      	ldr	r3, [r7, #0]
 8002e1a:	687a      	ldr	r2, [r7, #4]
 8002e1c:	490e      	ldr	r1, [pc, #56]	; (8002e58 <I2C_MasterRequestWrite+0xfc>)
 8002e1e:	68f8      	ldr	r0, [r7, #12]
 8002e20:	f000 f898 	bl	8002f54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e24:	4603      	mov	r3, r0
 8002e26:	2b00      	cmp	r3, #0
 8002e28:	d001      	beq.n	8002e2e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8002e2a:	2301      	movs	r3, #1
 8002e2c:	e010      	b.n	8002e50 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8002e2e:	897b      	ldrh	r3, [r7, #10]
 8002e30:	b2da      	uxtb	r2, r3
 8002e32:	68fb      	ldr	r3, [r7, #12]
 8002e34:	681b      	ldr	r3, [r3, #0]
 8002e36:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	687a      	ldr	r2, [r7, #4]
 8002e3c:	4907      	ldr	r1, [pc, #28]	; (8002e5c <I2C_MasterRequestWrite+0x100>)
 8002e3e:	68f8      	ldr	r0, [r7, #12]
 8002e40:	f000 f888 	bl	8002f54 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8002e44:	4603      	mov	r3, r0
 8002e46:	2b00      	cmp	r3, #0
 8002e48:	d001      	beq.n	8002e4e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8002e4a:	2301      	movs	r3, #1
 8002e4c:	e000      	b.n	8002e50 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8002e4e:	2300      	movs	r3, #0
}
 8002e50:	4618      	mov	r0, r3
 8002e52:	3718      	adds	r7, #24
 8002e54:	46bd      	mov	sp, r7
 8002e56:	bd80      	pop	{r7, pc}
 8002e58:	00010008 	.word	0x00010008
 8002e5c:	00010002 	.word	0x00010002

08002e60 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8002e60:	b580      	push	{r7, lr}
 8002e62:	b084      	sub	sp, #16
 8002e64:	af00      	add	r7, sp, #0
 8002e66:	60f8      	str	r0, [r7, #12]
 8002e68:	60b9      	str	r1, [r7, #8]
 8002e6a:	603b      	str	r3, [r7, #0]
 8002e6c:	4613      	mov	r3, r2
 8002e6e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002e70:	e048      	b.n	8002f04 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002e72:	683b      	ldr	r3, [r7, #0]
 8002e74:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002e78:	d044      	beq.n	8002f04 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002e7a:	f7ff fa7f 	bl	800237c <HAL_GetTick>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	69bb      	ldr	r3, [r7, #24]
 8002e82:	1ad3      	subs	r3, r2, r3
 8002e84:	683a      	ldr	r2, [r7, #0]
 8002e86:	429a      	cmp	r2, r3
 8002e88:	d302      	bcc.n	8002e90 <I2C_WaitOnFlagUntilTimeout+0x30>
 8002e8a:	683b      	ldr	r3, [r7, #0]
 8002e8c:	2b00      	cmp	r3, #0
 8002e8e:	d139      	bne.n	8002f04 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8002e90:	68bb      	ldr	r3, [r7, #8]
 8002e92:	0c1b      	lsrs	r3, r3, #16
 8002e94:	b2db      	uxtb	r3, r3
 8002e96:	2b01      	cmp	r3, #1
 8002e98:	d10d      	bne.n	8002eb6 <I2C_WaitOnFlagUntilTimeout+0x56>
 8002e9a:	68fb      	ldr	r3, [r7, #12]
 8002e9c:	681b      	ldr	r3, [r3, #0]
 8002e9e:	695b      	ldr	r3, [r3, #20]
 8002ea0:	43da      	mvns	r2, r3
 8002ea2:	68bb      	ldr	r3, [r7, #8]
 8002ea4:	4013      	ands	r3, r2
 8002ea6:	b29b      	uxth	r3, r3
 8002ea8:	2b00      	cmp	r3, #0
 8002eaa:	bf0c      	ite	eq
 8002eac:	2301      	moveq	r3, #1
 8002eae:	2300      	movne	r3, #0
 8002eb0:	b2db      	uxtb	r3, r3
 8002eb2:	461a      	mov	r2, r3
 8002eb4:	e00c      	b.n	8002ed0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8002eb6:	68fb      	ldr	r3, [r7, #12]
 8002eb8:	681b      	ldr	r3, [r3, #0]
 8002eba:	699b      	ldr	r3, [r3, #24]
 8002ebc:	43da      	mvns	r2, r3
 8002ebe:	68bb      	ldr	r3, [r7, #8]
 8002ec0:	4013      	ands	r3, r2
 8002ec2:	b29b      	uxth	r3, r3
 8002ec4:	2b00      	cmp	r3, #0
 8002ec6:	bf0c      	ite	eq
 8002ec8:	2301      	moveq	r3, #1
 8002eca:	2300      	movne	r3, #0
 8002ecc:	b2db      	uxtb	r3, r3
 8002ece:	461a      	mov	r2, r3
 8002ed0:	79fb      	ldrb	r3, [r7, #7]
 8002ed2:	429a      	cmp	r2, r3
 8002ed4:	d116      	bne.n	8002f04 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8002ed6:	68fb      	ldr	r3, [r7, #12]
 8002ed8:	2200      	movs	r2, #0
 8002eda:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8002edc:	68fb      	ldr	r3, [r7, #12]
 8002ede:	2220      	movs	r2, #32
 8002ee0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8002ee4:	68fb      	ldr	r3, [r7, #12]
 8002ee6:	2200      	movs	r2, #0
 8002ee8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8002eec:	68fb      	ldr	r3, [r7, #12]
 8002eee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002ef0:	f043 0220 	orr.w	r2, r3, #32
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8002ef8:	68fb      	ldr	r3, [r7, #12]
 8002efa:	2200      	movs	r2, #0
 8002efc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8002f00:	2301      	movs	r3, #1
 8002f02:	e023      	b.n	8002f4c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8002f04:	68bb      	ldr	r3, [r7, #8]
 8002f06:	0c1b      	lsrs	r3, r3, #16
 8002f08:	b2db      	uxtb	r3, r3
 8002f0a:	2b01      	cmp	r3, #1
 8002f0c:	d10d      	bne.n	8002f2a <I2C_WaitOnFlagUntilTimeout+0xca>
 8002f0e:	68fb      	ldr	r3, [r7, #12]
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	695b      	ldr	r3, [r3, #20]
 8002f14:	43da      	mvns	r2, r3
 8002f16:	68bb      	ldr	r3, [r7, #8]
 8002f18:	4013      	ands	r3, r2
 8002f1a:	b29b      	uxth	r3, r3
 8002f1c:	2b00      	cmp	r3, #0
 8002f1e:	bf0c      	ite	eq
 8002f20:	2301      	moveq	r3, #1
 8002f22:	2300      	movne	r3, #0
 8002f24:	b2db      	uxtb	r3, r3
 8002f26:	461a      	mov	r2, r3
 8002f28:	e00c      	b.n	8002f44 <I2C_WaitOnFlagUntilTimeout+0xe4>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	681b      	ldr	r3, [r3, #0]
 8002f2e:	699b      	ldr	r3, [r3, #24]
 8002f30:	43da      	mvns	r2, r3
 8002f32:	68bb      	ldr	r3, [r7, #8]
 8002f34:	4013      	ands	r3, r2
 8002f36:	b29b      	uxth	r3, r3
 8002f38:	2b00      	cmp	r3, #0
 8002f3a:	bf0c      	ite	eq
 8002f3c:	2301      	moveq	r3, #1
 8002f3e:	2300      	movne	r3, #0
 8002f40:	b2db      	uxtb	r3, r3
 8002f42:	461a      	mov	r2, r3
 8002f44:	79fb      	ldrb	r3, [r7, #7]
 8002f46:	429a      	cmp	r2, r3
 8002f48:	d093      	beq.n	8002e72 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002f4a:	2300      	movs	r3, #0
}
 8002f4c:	4618      	mov	r0, r3
 8002f4e:	3710      	adds	r7, #16
 8002f50:	46bd      	mov	sp, r7
 8002f52:	bd80      	pop	{r7, pc}

08002f54 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8002f54:	b580      	push	{r7, lr}
 8002f56:	b084      	sub	sp, #16
 8002f58:	af00      	add	r7, sp, #0
 8002f5a:	60f8      	str	r0, [r7, #12]
 8002f5c:	60b9      	str	r1, [r7, #8]
 8002f5e:	607a      	str	r2, [r7, #4]
 8002f60:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8002f62:	e071      	b.n	8003048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8002f64:	68fb      	ldr	r3, [r7, #12]
 8002f66:	681b      	ldr	r3, [r3, #0]
 8002f68:	695b      	ldr	r3, [r3, #20]
 8002f6a:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 8002f6e:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8002f72:	d123      	bne.n	8002fbc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002f74:	68fb      	ldr	r3, [r7, #12]
 8002f76:	681b      	ldr	r3, [r3, #0]
 8002f78:	681a      	ldr	r2, [r3, #0]
 8002f7a:	68fb      	ldr	r3, [r7, #12]
 8002f7c:	681b      	ldr	r3, [r3, #0]
 8002f7e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8002f82:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8002f84:	68fb      	ldr	r3, [r7, #12]
 8002f86:	681b      	ldr	r3, [r3, #0]
 8002f88:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8002f8c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8002f8e:	68fb      	ldr	r3, [r7, #12]
 8002f90:	2200      	movs	r2, #0
 8002f92:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8002f94:	68fb      	ldr	r3, [r7, #12]
 8002f96:	2220      	movs	r2, #32
 8002f98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8002f9c:	68fb      	ldr	r3, [r7, #12]
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8002fa4:	68fb      	ldr	r3, [r7, #12]
 8002fa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002fa8:	f043 0204 	orr.w	r2, r3, #4
 8002fac:	68fb      	ldr	r3, [r7, #12]
 8002fae:	641a      	str	r2, [r3, #64]	; 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8002fb0:	68fb      	ldr	r3, [r7, #12]
 8002fb2:	2200      	movs	r2, #0
 8002fb4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

      return HAL_ERROR;
 8002fb8:	2301      	movs	r3, #1
 8002fba:	e067      	b.n	800308c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002fc2:	d041      	beq.n	8003048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002fc4:	f7ff f9da 	bl	800237c <HAL_GetTick>
 8002fc8:	4602      	mov	r2, r0
 8002fca:	683b      	ldr	r3, [r7, #0]
 8002fcc:	1ad3      	subs	r3, r2, r3
 8002fce:	687a      	ldr	r2, [r7, #4]
 8002fd0:	429a      	cmp	r2, r3
 8002fd2:	d302      	bcc.n	8002fda <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8002fd4:	687b      	ldr	r3, [r7, #4]
 8002fd6:	2b00      	cmp	r3, #0
 8002fd8:	d136      	bne.n	8003048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8002fda:	68bb      	ldr	r3, [r7, #8]
 8002fdc:	0c1b      	lsrs	r3, r3, #16
 8002fde:	b2db      	uxtb	r3, r3
 8002fe0:	2b01      	cmp	r3, #1
 8002fe2:	d10c      	bne.n	8002ffe <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	695b      	ldr	r3, [r3, #20]
 8002fea:	43da      	mvns	r2, r3
 8002fec:	68bb      	ldr	r3, [r7, #8]
 8002fee:	4013      	ands	r3, r2
 8002ff0:	b29b      	uxth	r3, r3
 8002ff2:	2b00      	cmp	r3, #0
 8002ff4:	bf14      	ite	ne
 8002ff6:	2301      	movne	r3, #1
 8002ff8:	2300      	moveq	r3, #0
 8002ffa:	b2db      	uxtb	r3, r3
 8002ffc:	e00b      	b.n	8003016 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8002ffe:	68fb      	ldr	r3, [r7, #12]
 8003000:	681b      	ldr	r3, [r3, #0]
 8003002:	699b      	ldr	r3, [r3, #24]
 8003004:	43da      	mvns	r2, r3
 8003006:	68bb      	ldr	r3, [r7, #8]
 8003008:	4013      	ands	r3, r2
 800300a:	b29b      	uxth	r3, r3
 800300c:	2b00      	cmp	r3, #0
 800300e:	bf14      	ite	ne
 8003010:	2301      	movne	r3, #1
 8003012:	2300      	moveq	r3, #0
 8003014:	b2db      	uxtb	r3, r3
 8003016:	2b00      	cmp	r3, #0
 8003018:	d016      	beq.n	8003048 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800301a:	68fb      	ldr	r3, [r7, #12]
 800301c:	2200      	movs	r2, #0
 800301e:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003020:	68fb      	ldr	r3, [r7, #12]
 8003022:	2220      	movs	r2, #32
 8003024:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003028:	68fb      	ldr	r3, [r7, #12]
 800302a:	2200      	movs	r2, #0
 800302c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003034:	f043 0220 	orr.w	r2, r3, #32
 8003038:	68fb      	ldr	r3, [r7, #12]
 800303a:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800303c:	68fb      	ldr	r3, [r7, #12]
 800303e:	2200      	movs	r2, #0
 8003040:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003044:	2301      	movs	r3, #1
 8003046:	e021      	b.n	800308c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003048:	68bb      	ldr	r3, [r7, #8]
 800304a:	0c1b      	lsrs	r3, r3, #16
 800304c:	b2db      	uxtb	r3, r3
 800304e:	2b01      	cmp	r3, #1
 8003050:	d10c      	bne.n	800306c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003052:	68fb      	ldr	r3, [r7, #12]
 8003054:	681b      	ldr	r3, [r3, #0]
 8003056:	695b      	ldr	r3, [r3, #20]
 8003058:	43da      	mvns	r2, r3
 800305a:	68bb      	ldr	r3, [r7, #8]
 800305c:	4013      	ands	r3, r2
 800305e:	b29b      	uxth	r3, r3
 8003060:	2b00      	cmp	r3, #0
 8003062:	bf14      	ite	ne
 8003064:	2301      	movne	r3, #1
 8003066:	2300      	moveq	r3, #0
 8003068:	b2db      	uxtb	r3, r3
 800306a:	e00b      	b.n	8003084 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	699b      	ldr	r3, [r3, #24]
 8003072:	43da      	mvns	r2, r3
 8003074:	68bb      	ldr	r3, [r7, #8]
 8003076:	4013      	ands	r3, r2
 8003078:	b29b      	uxth	r3, r3
 800307a:	2b00      	cmp	r3, #0
 800307c:	bf14      	ite	ne
 800307e:	2301      	movne	r3, #1
 8003080:	2300      	moveq	r3, #0
 8003082:	b2db      	uxtb	r3, r3
 8003084:	2b00      	cmp	r3, #0
 8003086:	f47f af6d 	bne.w	8002f64 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800308a:	2300      	movs	r3, #0
}
 800308c:	4618      	mov	r0, r3
 800308e:	3710      	adds	r7, #16
 8003090:	46bd      	mov	sp, r7
 8003092:	bd80      	pop	{r7, pc}

08003094 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003094:	b580      	push	{r7, lr}
 8003096:	b084      	sub	sp, #16
 8003098:	af00      	add	r7, sp, #0
 800309a:	60f8      	str	r0, [r7, #12]
 800309c:	60b9      	str	r1, [r7, #8]
 800309e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80030a0:	e034      	b.n	800310c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 80030a2:	68f8      	ldr	r0, [r7, #12]
 80030a4:	f000 f886 	bl	80031b4 <I2C_IsAcknowledgeFailed>
 80030a8:	4603      	mov	r3, r0
 80030aa:	2b00      	cmp	r3, #0
 80030ac:	d001      	beq.n	80030b2 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80030ae:	2301      	movs	r3, #1
 80030b0:	e034      	b.n	800311c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80030b2:	68bb      	ldr	r3, [r7, #8]
 80030b4:	f1b3 3fff 	cmp.w	r3, #4294967295
 80030b8:	d028      	beq.n	800310c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80030ba:	f7ff f95f 	bl	800237c <HAL_GetTick>
 80030be:	4602      	mov	r2, r0
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	1ad3      	subs	r3, r2, r3
 80030c4:	68ba      	ldr	r2, [r7, #8]
 80030c6:	429a      	cmp	r2, r3
 80030c8:	d302      	bcc.n	80030d0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80030ca:	68bb      	ldr	r3, [r7, #8]
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	d11d      	bne.n	800310c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80030d0:	68fb      	ldr	r3, [r7, #12]
 80030d2:	681b      	ldr	r3, [r3, #0]
 80030d4:	695b      	ldr	r3, [r3, #20]
 80030d6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80030da:	2b80      	cmp	r3, #128	; 0x80
 80030dc:	d016      	beq.n	800310c <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80030de:	68fb      	ldr	r3, [r7, #12]
 80030e0:	2200      	movs	r2, #0
 80030e2:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80030e4:	68fb      	ldr	r3, [r7, #12]
 80030e6:	2220      	movs	r2, #32
 80030e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80030ec:	68fb      	ldr	r3, [r7, #12]
 80030ee:	2200      	movs	r2, #0
 80030f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80030f4:	68fb      	ldr	r3, [r7, #12]
 80030f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80030f8:	f043 0220 	orr.w	r2, r3, #32
 80030fc:	68fb      	ldr	r3, [r7, #12]
 80030fe:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003100:	68fb      	ldr	r3, [r7, #12]
 8003102:	2200      	movs	r2, #0
 8003104:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003108:	2301      	movs	r3, #1
 800310a:	e007      	b.n	800311c <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800310c:	68fb      	ldr	r3, [r7, #12]
 800310e:	681b      	ldr	r3, [r3, #0]
 8003110:	695b      	ldr	r3, [r3, #20]
 8003112:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003116:	2b80      	cmp	r3, #128	; 0x80
 8003118:	d1c3      	bne.n	80030a2 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800311a:	2300      	movs	r3, #0
}
 800311c:	4618      	mov	r0, r3
 800311e:	3710      	adds	r7, #16
 8003120:	46bd      	mov	sp, r7
 8003122:	bd80      	pop	{r7, pc}

08003124 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003124:	b580      	push	{r7, lr}
 8003126:	b084      	sub	sp, #16
 8003128:	af00      	add	r7, sp, #0
 800312a:	60f8      	str	r0, [r7, #12]
 800312c:	60b9      	str	r1, [r7, #8]
 800312e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003130:	e034      	b.n	800319c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003132:	68f8      	ldr	r0, [r7, #12]
 8003134:	f000 f83e 	bl	80031b4 <I2C_IsAcknowledgeFailed>
 8003138:	4603      	mov	r3, r0
 800313a:	2b00      	cmp	r3, #0
 800313c:	d001      	beq.n	8003142 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800313e:	2301      	movs	r3, #1
 8003140:	e034      	b.n	80031ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003142:	68bb      	ldr	r3, [r7, #8]
 8003144:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003148:	d028      	beq.n	800319c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800314a:	f7ff f917 	bl	800237c <HAL_GetTick>
 800314e:	4602      	mov	r2, r0
 8003150:	687b      	ldr	r3, [r7, #4]
 8003152:	1ad3      	subs	r3, r2, r3
 8003154:	68ba      	ldr	r2, [r7, #8]
 8003156:	429a      	cmp	r2, r3
 8003158:	d302      	bcc.n	8003160 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800315a:	68bb      	ldr	r3, [r7, #8]
 800315c:	2b00      	cmp	r3, #0
 800315e:	d11d      	bne.n	800319c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	681b      	ldr	r3, [r3, #0]
 8003164:	695b      	ldr	r3, [r3, #20]
 8003166:	f003 0304 	and.w	r3, r3, #4
 800316a:	2b04      	cmp	r3, #4
 800316c:	d016      	beq.n	800319c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800316e:	68fb      	ldr	r3, [r7, #12]
 8003170:	2200      	movs	r2, #0
 8003172:	631a      	str	r2, [r3, #48]	; 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003174:	68fb      	ldr	r3, [r7, #12]
 8003176:	2220      	movs	r2, #32
 8003178:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	2200      	movs	r2, #0
 8003180:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003184:	68fb      	ldr	r3, [r7, #12]
 8003186:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003188:	f043 0220 	orr.w	r2, r3, #32
 800318c:	68fb      	ldr	r3, [r7, #12]
 800318e:	641a      	str	r2, [r3, #64]	; 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003190:	68fb      	ldr	r3, [r7, #12]
 8003192:	2200      	movs	r2, #0
 8003194:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

          return HAL_ERROR;
 8003198:	2301      	movs	r3, #1
 800319a:	e007      	b.n	80031ac <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800319c:	68fb      	ldr	r3, [r7, #12]
 800319e:	681b      	ldr	r3, [r3, #0]
 80031a0:	695b      	ldr	r3, [r3, #20]
 80031a2:	f003 0304 	and.w	r3, r3, #4
 80031a6:	2b04      	cmp	r3, #4
 80031a8:	d1c3      	bne.n	8003132 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80031aa:	2300      	movs	r3, #0
}
 80031ac:	4618      	mov	r0, r3
 80031ae:	3710      	adds	r7, #16
 80031b0:	46bd      	mov	sp, r7
 80031b2:	bd80      	pop	{r7, pc}

080031b4 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80031b4:	b480      	push	{r7}
 80031b6:	b083      	sub	sp, #12
 80031b8:	af00      	add	r7, sp, #0
 80031ba:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80031bc:	687b      	ldr	r3, [r7, #4]
 80031be:	681b      	ldr	r3, [r3, #0]
 80031c0:	695b      	ldr	r3, [r3, #20]
 80031c2:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 80031c6:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80031ca:	d11b      	bne.n	8003204 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80031cc:	687b      	ldr	r3, [r7, #4]
 80031ce:	681b      	ldr	r3, [r3, #0]
 80031d0:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80031d4:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 80031d6:	687b      	ldr	r3, [r7, #4]
 80031d8:	2200      	movs	r2, #0
 80031da:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 80031dc:	687b      	ldr	r3, [r7, #4]
 80031de:	2220      	movs	r2, #32
 80031e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 80031e4:	687b      	ldr	r3, [r7, #4]
 80031e6:	2200      	movs	r2, #0
 80031e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 80031ec:	687b      	ldr	r3, [r7, #4]
 80031ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80031f0:	f043 0204 	orr.w	r2, r3, #4
 80031f4:	687b      	ldr	r3, [r7, #4]
 80031f6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80031f8:	687b      	ldr	r3, [r7, #4]
 80031fa:	2200      	movs	r2, #0
 80031fc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    return HAL_ERROR;
 8003200:	2301      	movs	r3, #1
 8003202:	e000      	b.n	8003206 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003204:	2300      	movs	r3, #0
}
 8003206:	4618      	mov	r0, r3
 8003208:	370c      	adds	r7, #12
 800320a:	46bd      	mov	sp, r7
 800320c:	bc80      	pop	{r7}
 800320e:	4770      	bx	lr

08003210 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003210:	b580      	push	{r7, lr}
 8003212:	b086      	sub	sp, #24
 8003214:	af00      	add	r7, sp, #0
 8003216:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;

  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	2b00      	cmp	r3, #0
 800321c:	d101      	bne.n	8003222 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800321e:	2301      	movs	r3, #1
 8003220:	e272      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003222:	687b      	ldr	r3, [r7, #4]
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	f003 0301 	and.w	r3, r3, #1
 800322a:	2b00      	cmp	r3, #0
 800322c:	f000 8087 	beq.w	800333e <HAL_RCC_OscConfig+0x12e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSE)
 8003230:	4b92      	ldr	r3, [pc, #584]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f003 030c 	and.w	r3, r3, #12
 8003238:	2b04      	cmp	r3, #4
 800323a:	d00c      	beq.n	8003256 <HAL_RCC_OscConfig+0x46>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSE)))
 800323c:	4b8f      	ldr	r3, [pc, #572]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800323e:	685b      	ldr	r3, [r3, #4]
 8003240:	f003 030c 	and.w	r3, r3, #12
 8003244:	2b08      	cmp	r3, #8
 8003246:	d112      	bne.n	800326e <HAL_RCC_OscConfig+0x5e>
 8003248:	4b8c      	ldr	r3, [pc, #560]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800324a:	685b      	ldr	r3, [r3, #4]
 800324c:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003250:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003254:	d10b      	bne.n	800326e <HAL_RCC_OscConfig+0x5e>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003256:	4b89      	ldr	r3, [pc, #548]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003258:	681b      	ldr	r3, [r3, #0]
 800325a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800325e:	2b00      	cmp	r3, #0
 8003260:	d06c      	beq.n	800333c <HAL_RCC_OscConfig+0x12c>
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	685b      	ldr	r3, [r3, #4]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d168      	bne.n	800333c <HAL_RCC_OscConfig+0x12c>
      {
        return HAL_ERROR;
 800326a:	2301      	movs	r3, #1
 800326c:	e24c      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800326e:	687b      	ldr	r3, [r7, #4]
 8003270:	685b      	ldr	r3, [r3, #4]
 8003272:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003276:	d106      	bne.n	8003286 <HAL_RCC_OscConfig+0x76>
 8003278:	4b80      	ldr	r3, [pc, #512]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4a7f      	ldr	r2, [pc, #508]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800327e:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003282:	6013      	str	r3, [r2, #0]
 8003284:	e02e      	b.n	80032e4 <HAL_RCC_OscConfig+0xd4>
 8003286:	687b      	ldr	r3, [r7, #4]
 8003288:	685b      	ldr	r3, [r3, #4]
 800328a:	2b00      	cmp	r3, #0
 800328c:	d10c      	bne.n	80032a8 <HAL_RCC_OscConfig+0x98>
 800328e:	4b7b      	ldr	r3, [pc, #492]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	4a7a      	ldr	r2, [pc, #488]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003294:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8003298:	6013      	str	r3, [r2, #0]
 800329a:	4b78      	ldr	r3, [pc, #480]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800329c:	681b      	ldr	r3, [r3, #0]
 800329e:	4a77      	ldr	r2, [pc, #476]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032a0:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032a4:	6013      	str	r3, [r2, #0]
 80032a6:	e01d      	b.n	80032e4 <HAL_RCC_OscConfig+0xd4>
 80032a8:	687b      	ldr	r3, [r7, #4]
 80032aa:	685b      	ldr	r3, [r3, #4]
 80032ac:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80032b0:	d10c      	bne.n	80032cc <HAL_RCC_OscConfig+0xbc>
 80032b2:	4b72      	ldr	r3, [pc, #456]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032b4:	681b      	ldr	r3, [r3, #0]
 80032b6:	4a71      	ldr	r2, [pc, #452]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032b8:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80032bc:	6013      	str	r3, [r2, #0]
 80032be:	4b6f      	ldr	r3, [pc, #444]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032c0:	681b      	ldr	r3, [r3, #0]
 80032c2:	4a6e      	ldr	r2, [pc, #440]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80032c8:	6013      	str	r3, [r2, #0]
 80032ca:	e00b      	b.n	80032e4 <HAL_RCC_OscConfig+0xd4>
 80032cc:	4b6b      	ldr	r3, [pc, #428]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032ce:	681b      	ldr	r3, [r3, #0]
 80032d0:	4a6a      	ldr	r2, [pc, #424]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032d2:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80032d6:	6013      	str	r3, [r2, #0]
 80032d8:	4b68      	ldr	r3, [pc, #416]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032da:	681b      	ldr	r3, [r3, #0]
 80032dc:	4a67      	ldr	r2, [pc, #412]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80032de:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80032e2:	6013      	str	r3, [r2, #0]


      /* Check the HSE State */
      if (RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	685b      	ldr	r3, [r3, #4]
 80032e8:	2b00      	cmp	r3, #0
 80032ea:	d013      	beq.n	8003314 <HAL_RCC_OscConfig+0x104>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80032ec:	f7ff f846 	bl	800237c <HAL_GetTick>
 80032f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80032f2:	e008      	b.n	8003306 <HAL_RCC_OscConfig+0xf6>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80032f4:	f7ff f842 	bl	800237c <HAL_GetTick>
 80032f8:	4602      	mov	r2, r0
 80032fa:	693b      	ldr	r3, [r7, #16]
 80032fc:	1ad3      	subs	r3, r2, r3
 80032fe:	2b64      	cmp	r3, #100	; 0x64
 8003300:	d901      	bls.n	8003306 <HAL_RCC_OscConfig+0xf6>
          {
            return HAL_TIMEOUT;
 8003302:	2303      	movs	r3, #3
 8003304:	e200      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003306:	4b5d      	ldr	r3, [pc, #372]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003308:	681b      	ldr	r3, [r3, #0]
 800330a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800330e:	2b00      	cmp	r3, #0
 8003310:	d0f0      	beq.n	80032f4 <HAL_RCC_OscConfig+0xe4>
 8003312:	e014      	b.n	800333e <HAL_RCC_OscConfig+0x12e>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003314:	f7ff f832 	bl	800237c <HAL_GetTick>
 8003318:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800331a:	e008      	b.n	800332e <HAL_RCC_OscConfig+0x11e>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800331c:	f7ff f82e 	bl	800237c <HAL_GetTick>
 8003320:	4602      	mov	r2, r0
 8003322:	693b      	ldr	r3, [r7, #16]
 8003324:	1ad3      	subs	r3, r2, r3
 8003326:	2b64      	cmp	r3, #100	; 0x64
 8003328:	d901      	bls.n	800332e <HAL_RCC_OscConfig+0x11e>
          {
            return HAL_TIMEOUT;
 800332a:	2303      	movs	r3, #3
 800332c:	e1ec      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800332e:	4b53      	ldr	r3, [pc, #332]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003330:	681b      	ldr	r3, [r3, #0]
 8003332:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003336:	2b00      	cmp	r3, #0
 8003338:	d1f0      	bne.n	800331c <HAL_RCC_OscConfig+0x10c>
 800333a:	e000      	b.n	800333e <HAL_RCC_OscConfig+0x12e>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800333c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800333e:	687b      	ldr	r3, [r7, #4]
 8003340:	681b      	ldr	r3, [r3, #0]
 8003342:	f003 0302 	and.w	r3, r3, #2
 8003346:	2b00      	cmp	r3, #0
 8003348:	d063      	beq.n	8003412 <HAL_RCC_OscConfig+0x202>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_HSI)
 800334a:	4b4c      	ldr	r3, [pc, #304]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 800334c:	685b      	ldr	r3, [r3, #4]
 800334e:	f003 030c 	and.w	r3, r3, #12
 8003352:	2b00      	cmp	r3, #0
 8003354:	d00b      	beq.n	800336e <HAL_RCC_OscConfig+0x15e>
        || ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (__HAL_RCC_GET_PLL_OSCSOURCE() == RCC_PLLSOURCE_HSI_DIV2)))
 8003356:	4b49      	ldr	r3, [pc, #292]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003358:	685b      	ldr	r3, [r3, #4]
 800335a:	f003 030c 	and.w	r3, r3, #12
 800335e:	2b08      	cmp	r3, #8
 8003360:	d11c      	bne.n	800339c <HAL_RCC_OscConfig+0x18c>
 8003362:	4b46      	ldr	r3, [pc, #280]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003364:	685b      	ldr	r3, [r3, #4]
 8003366:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800336a:	2b00      	cmp	r3, #0
 800336c:	d116      	bne.n	800339c <HAL_RCC_OscConfig+0x18c>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800336e:	4b43      	ldr	r3, [pc, #268]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003370:	681b      	ldr	r3, [r3, #0]
 8003372:	f003 0302 	and.w	r3, r3, #2
 8003376:	2b00      	cmp	r3, #0
 8003378:	d005      	beq.n	8003386 <HAL_RCC_OscConfig+0x176>
 800337a:	687b      	ldr	r3, [r7, #4]
 800337c:	691b      	ldr	r3, [r3, #16]
 800337e:	2b01      	cmp	r3, #1
 8003380:	d001      	beq.n	8003386 <HAL_RCC_OscConfig+0x176>
      {
        return HAL_ERROR;
 8003382:	2301      	movs	r3, #1
 8003384:	e1c0      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003386:	4b3d      	ldr	r3, [pc, #244]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003388:	681b      	ldr	r3, [r3, #0]
 800338a:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 800338e:	687b      	ldr	r3, [r7, #4]
 8003390:	695b      	ldr	r3, [r3, #20]
 8003392:	00db      	lsls	r3, r3, #3
 8003394:	4939      	ldr	r1, [pc, #228]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003396:	4313      	orrs	r3, r2
 8003398:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800339a:	e03a      	b.n	8003412 <HAL_RCC_OscConfig+0x202>
      }
    }
    else
    {
      /* Check the HSI State */
      if (RCC_OscInitStruct->HSIState != RCC_HSI_OFF)
 800339c:	687b      	ldr	r3, [r7, #4]
 800339e:	691b      	ldr	r3, [r3, #16]
 80033a0:	2b00      	cmp	r3, #0
 80033a2:	d020      	beq.n	80033e6 <HAL_RCC_OscConfig+0x1d6>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80033a4:	4b36      	ldr	r3, [pc, #216]	; (8003480 <HAL_RCC_OscConfig+0x270>)
 80033a6:	2201      	movs	r2, #1
 80033a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033aa:	f7fe ffe7 	bl	800237c <HAL_GetTick>
 80033ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033b0:	e008      	b.n	80033c4 <HAL_RCC_OscConfig+0x1b4>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033b2:	f7fe ffe3 	bl	800237c <HAL_GetTick>
 80033b6:	4602      	mov	r2, r0
 80033b8:	693b      	ldr	r3, [r7, #16]
 80033ba:	1ad3      	subs	r3, r2, r3
 80033bc:	2b02      	cmp	r3, #2
 80033be:	d901      	bls.n	80033c4 <HAL_RCC_OscConfig+0x1b4>
          {
            return HAL_TIMEOUT;
 80033c0:	2303      	movs	r3, #3
 80033c2:	e1a1      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80033c4:	4b2d      	ldr	r3, [pc, #180]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80033c6:	681b      	ldr	r3, [r3, #0]
 80033c8:	f003 0302 	and.w	r3, r3, #2
 80033cc:	2b00      	cmp	r3, #0
 80033ce:	d0f0      	beq.n	80033b2 <HAL_RCC_OscConfig+0x1a2>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80033d0:	4b2a      	ldr	r3, [pc, #168]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80033d8:	687b      	ldr	r3, [r7, #4]
 80033da:	695b      	ldr	r3, [r3, #20]
 80033dc:	00db      	lsls	r3, r3, #3
 80033de:	4927      	ldr	r1, [pc, #156]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 80033e0:	4313      	orrs	r3, r2
 80033e2:	600b      	str	r3, [r1, #0]
 80033e4:	e015      	b.n	8003412 <HAL_RCC_OscConfig+0x202>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80033e6:	4b26      	ldr	r3, [pc, #152]	; (8003480 <HAL_RCC_OscConfig+0x270>)
 80033e8:	2200      	movs	r2, #0
 80033ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80033ec:	f7fe ffc6 	bl	800237c <HAL_GetTick>
 80033f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80033f2:	e008      	b.n	8003406 <HAL_RCC_OscConfig+0x1f6>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80033f4:	f7fe ffc2 	bl	800237c <HAL_GetTick>
 80033f8:	4602      	mov	r2, r0
 80033fa:	693b      	ldr	r3, [r7, #16]
 80033fc:	1ad3      	subs	r3, r2, r3
 80033fe:	2b02      	cmp	r3, #2
 8003400:	d901      	bls.n	8003406 <HAL_RCC_OscConfig+0x1f6>
          {
            return HAL_TIMEOUT;
 8003402:	2303      	movs	r3, #3
 8003404:	e180      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003406:	4b1d      	ldr	r3, [pc, #116]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	f003 0302 	and.w	r3, r3, #2
 800340e:	2b00      	cmp	r3, #0
 8003410:	d1f0      	bne.n	80033f4 <HAL_RCC_OscConfig+0x1e4>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f003 0308 	and.w	r3, r3, #8
 800341a:	2b00      	cmp	r3, #0
 800341c:	d03a      	beq.n	8003494 <HAL_RCC_OscConfig+0x284>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if (RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 800341e:	687b      	ldr	r3, [r7, #4]
 8003420:	699b      	ldr	r3, [r3, #24]
 8003422:	2b00      	cmp	r3, #0
 8003424:	d019      	beq.n	800345a <HAL_RCC_OscConfig+0x24a>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8003426:	4b17      	ldr	r3, [pc, #92]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 8003428:	2201      	movs	r2, #1
 800342a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800342c:	f7fe ffa6 	bl	800237c <HAL_GetTick>
 8003430:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003432:	e008      	b.n	8003446 <HAL_RCC_OscConfig+0x236>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003434:	f7fe ffa2 	bl	800237c <HAL_GetTick>
 8003438:	4602      	mov	r2, r0
 800343a:	693b      	ldr	r3, [r7, #16]
 800343c:	1ad3      	subs	r3, r2, r3
 800343e:	2b02      	cmp	r3, #2
 8003440:	d901      	bls.n	8003446 <HAL_RCC_OscConfig+0x236>
        {
          return HAL_TIMEOUT;
 8003442:	2303      	movs	r3, #3
 8003444:	e160      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003446:	4b0d      	ldr	r3, [pc, #52]	; (800347c <HAL_RCC_OscConfig+0x26c>)
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	f003 0302 	and.w	r3, r3, #2
 800344e:	2b00      	cmp	r3, #0
 8003450:	d0f0      	beq.n	8003434 <HAL_RCC_OscConfig+0x224>
        }
      }
      /*  To have a fully stabilized clock in the specified range, a software delay of 1ms
          should be added.*/
      RCC_Delay(1);
 8003452:	2001      	movs	r0, #1
 8003454:	f000 faba 	bl	80039cc <RCC_Delay>
 8003458:	e01c      	b.n	8003494 <HAL_RCC_OscConfig+0x284>
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 800345a:	4b0a      	ldr	r3, [pc, #40]	; (8003484 <HAL_RCC_OscConfig+0x274>)
 800345c:	2200      	movs	r2, #0
 800345e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003460:	f7fe ff8c 	bl	800237c <HAL_GetTick>
 8003464:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003466:	e00f      	b.n	8003488 <HAL_RCC_OscConfig+0x278>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8003468:	f7fe ff88 	bl	800237c <HAL_GetTick>
 800346c:	4602      	mov	r2, r0
 800346e:	693b      	ldr	r3, [r7, #16]
 8003470:	1ad3      	subs	r3, r2, r3
 8003472:	2b02      	cmp	r3, #2
 8003474:	d908      	bls.n	8003488 <HAL_RCC_OscConfig+0x278>
        {
          return HAL_TIMEOUT;
 8003476:	2303      	movs	r3, #3
 8003478:	e146      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
 800347a:	bf00      	nop
 800347c:	40021000 	.word	0x40021000
 8003480:	42420000 	.word	0x42420000
 8003484:	42420480 	.word	0x42420480
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003488:	4b92      	ldr	r3, [pc, #584]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800348a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800348c:	f003 0302 	and.w	r3, r3, #2
 8003490:	2b00      	cmp	r3, #0
 8003492:	d1e9      	bne.n	8003468 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	681b      	ldr	r3, [r3, #0]
 8003498:	f003 0304 	and.w	r3, r3, #4
 800349c:	2b00      	cmp	r3, #0
 800349e:	f000 80a6 	beq.w	80035ee <HAL_RCC_OscConfig+0x3de>
  {
    FlagStatus       pwrclkchanged = RESET;
 80034a2:	2300      	movs	r3, #0
 80034a4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80034a6:	4b8b      	ldr	r3, [pc, #556]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80034a8:	69db      	ldr	r3, [r3, #28]
 80034aa:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034ae:	2b00      	cmp	r3, #0
 80034b0:	d10d      	bne.n	80034ce <HAL_RCC_OscConfig+0x2be>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80034b2:	4b88      	ldr	r3, [pc, #544]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80034b4:	69db      	ldr	r3, [r3, #28]
 80034b6:	4a87      	ldr	r2, [pc, #540]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80034b8:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80034bc:	61d3      	str	r3, [r2, #28]
 80034be:	4b85      	ldr	r3, [pc, #532]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80034c0:	69db      	ldr	r3, [r3, #28]
 80034c2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80034c6:	60bb      	str	r3, [r7, #8]
 80034c8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80034ca:	2301      	movs	r3, #1
 80034cc:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ce:	4b82      	ldr	r3, [pc, #520]	; (80036d8 <HAL_RCC_OscConfig+0x4c8>)
 80034d0:	681b      	ldr	r3, [r3, #0]
 80034d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80034d6:	2b00      	cmp	r3, #0
 80034d8:	d118      	bne.n	800350c <HAL_RCC_OscConfig+0x2fc>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80034da:	4b7f      	ldr	r3, [pc, #508]	; (80036d8 <HAL_RCC_OscConfig+0x4c8>)
 80034dc:	681b      	ldr	r3, [r3, #0]
 80034de:	4a7e      	ldr	r2, [pc, #504]	; (80036d8 <HAL_RCC_OscConfig+0x4c8>)
 80034e0:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80034e4:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80034e6:	f7fe ff49 	bl	800237c <HAL_GetTick>
 80034ea:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80034ec:	e008      	b.n	8003500 <HAL_RCC_OscConfig+0x2f0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80034ee:	f7fe ff45 	bl	800237c <HAL_GetTick>
 80034f2:	4602      	mov	r2, r0
 80034f4:	693b      	ldr	r3, [r7, #16]
 80034f6:	1ad3      	subs	r3, r2, r3
 80034f8:	2b64      	cmp	r3, #100	; 0x64
 80034fa:	d901      	bls.n	8003500 <HAL_RCC_OscConfig+0x2f0>
        {
          return HAL_TIMEOUT;
 80034fc:	2303      	movs	r3, #3
 80034fe:	e103      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003500:	4b75      	ldr	r3, [pc, #468]	; (80036d8 <HAL_RCC_OscConfig+0x4c8>)
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003508:	2b00      	cmp	r3, #0
 800350a:	d0f0      	beq.n	80034ee <HAL_RCC_OscConfig+0x2de>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	68db      	ldr	r3, [r3, #12]
 8003510:	2b01      	cmp	r3, #1
 8003512:	d106      	bne.n	8003522 <HAL_RCC_OscConfig+0x312>
 8003514:	4b6f      	ldr	r3, [pc, #444]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003516:	6a1b      	ldr	r3, [r3, #32]
 8003518:	4a6e      	ldr	r2, [pc, #440]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800351a:	f043 0301 	orr.w	r3, r3, #1
 800351e:	6213      	str	r3, [r2, #32]
 8003520:	e02d      	b.n	800357e <HAL_RCC_OscConfig+0x36e>
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	68db      	ldr	r3, [r3, #12]
 8003526:	2b00      	cmp	r3, #0
 8003528:	d10c      	bne.n	8003544 <HAL_RCC_OscConfig+0x334>
 800352a:	4b6a      	ldr	r3, [pc, #424]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800352c:	6a1b      	ldr	r3, [r3, #32]
 800352e:	4a69      	ldr	r2, [pc, #420]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003530:	f023 0301 	bic.w	r3, r3, #1
 8003534:	6213      	str	r3, [r2, #32]
 8003536:	4b67      	ldr	r3, [pc, #412]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003538:	6a1b      	ldr	r3, [r3, #32]
 800353a:	4a66      	ldr	r2, [pc, #408]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800353c:	f023 0304 	bic.w	r3, r3, #4
 8003540:	6213      	str	r3, [r2, #32]
 8003542:	e01c      	b.n	800357e <HAL_RCC_OscConfig+0x36e>
 8003544:	687b      	ldr	r3, [r7, #4]
 8003546:	68db      	ldr	r3, [r3, #12]
 8003548:	2b05      	cmp	r3, #5
 800354a:	d10c      	bne.n	8003566 <HAL_RCC_OscConfig+0x356>
 800354c:	4b61      	ldr	r3, [pc, #388]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800354e:	6a1b      	ldr	r3, [r3, #32]
 8003550:	4a60      	ldr	r2, [pc, #384]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003552:	f043 0304 	orr.w	r3, r3, #4
 8003556:	6213      	str	r3, [r2, #32]
 8003558:	4b5e      	ldr	r3, [pc, #376]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800355a:	6a1b      	ldr	r3, [r3, #32]
 800355c:	4a5d      	ldr	r2, [pc, #372]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800355e:	f043 0301 	orr.w	r3, r3, #1
 8003562:	6213      	str	r3, [r2, #32]
 8003564:	e00b      	b.n	800357e <HAL_RCC_OscConfig+0x36e>
 8003566:	4b5b      	ldr	r3, [pc, #364]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003568:	6a1b      	ldr	r3, [r3, #32]
 800356a:	4a5a      	ldr	r2, [pc, #360]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800356c:	f023 0301 	bic.w	r3, r3, #1
 8003570:	6213      	str	r3, [r2, #32]
 8003572:	4b58      	ldr	r3, [pc, #352]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003574:	6a1b      	ldr	r3, [r3, #32]
 8003576:	4a57      	ldr	r2, [pc, #348]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003578:	f023 0304 	bic.w	r3, r3, #4
 800357c:	6213      	str	r3, [r2, #32]
    /* Check the LSE State */
    if (RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	68db      	ldr	r3, [r3, #12]
 8003582:	2b00      	cmp	r3, #0
 8003584:	d015      	beq.n	80035b2 <HAL_RCC_OscConfig+0x3a2>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003586:	f7fe fef9 	bl	800237c <HAL_GetTick>
 800358a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800358c:	e00a      	b.n	80035a4 <HAL_RCC_OscConfig+0x394>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800358e:	f7fe fef5 	bl	800237c <HAL_GetTick>
 8003592:	4602      	mov	r2, r0
 8003594:	693b      	ldr	r3, [r7, #16]
 8003596:	1ad3      	subs	r3, r2, r3
 8003598:	f241 3288 	movw	r2, #5000	; 0x1388
 800359c:	4293      	cmp	r3, r2
 800359e:	d901      	bls.n	80035a4 <HAL_RCC_OscConfig+0x394>
        {
          return HAL_TIMEOUT;
 80035a0:	2303      	movs	r3, #3
 80035a2:	e0b1      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80035a4:	4b4b      	ldr	r3, [pc, #300]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80035a6:	6a1b      	ldr	r3, [r3, #32]
 80035a8:	f003 0302 	and.w	r3, r3, #2
 80035ac:	2b00      	cmp	r3, #0
 80035ae:	d0ee      	beq.n	800358e <HAL_RCC_OscConfig+0x37e>
 80035b0:	e014      	b.n	80035dc <HAL_RCC_OscConfig+0x3cc>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80035b2:	f7fe fee3 	bl	800237c <HAL_GetTick>
 80035b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is disabled */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035b8:	e00a      	b.n	80035d0 <HAL_RCC_OscConfig+0x3c0>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80035ba:	f7fe fedf 	bl	800237c <HAL_GetTick>
 80035be:	4602      	mov	r2, r0
 80035c0:	693b      	ldr	r3, [r7, #16]
 80035c2:	1ad3      	subs	r3, r2, r3
 80035c4:	f241 3288 	movw	r2, #5000	; 0x1388
 80035c8:	4293      	cmp	r3, r2
 80035ca:	d901      	bls.n	80035d0 <HAL_RCC_OscConfig+0x3c0>
        {
          return HAL_TIMEOUT;
 80035cc:	2303      	movs	r3, #3
 80035ce:	e09b      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80035d0:	4b40      	ldr	r3, [pc, #256]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80035d2:	6a1b      	ldr	r3, [r3, #32]
 80035d4:	f003 0302 	and.w	r3, r3, #2
 80035d8:	2b00      	cmp	r3, #0
 80035da:	d1ee      	bne.n	80035ba <HAL_RCC_OscConfig+0x3aa>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if (pwrclkchanged == SET)
 80035dc:	7dfb      	ldrb	r3, [r7, #23]
 80035de:	2b01      	cmp	r3, #1
 80035e0:	d105      	bne.n	80035ee <HAL_RCC_OscConfig+0x3de>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80035e2:	4b3c      	ldr	r3, [pc, #240]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80035e4:	69db      	ldr	r3, [r3, #28]
 80035e6:	4a3b      	ldr	r2, [pc, #236]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80035e8:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80035ec:	61d3      	str	r3, [r2, #28]

#endif /* RCC_CR_PLL2ON */
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	69db      	ldr	r3, [r3, #28]
 80035f2:	2b00      	cmp	r3, #0
 80035f4:	f000 8087 	beq.w	8003706 <HAL_RCC_OscConfig+0x4f6>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 80035f8:	4b36      	ldr	r3, [pc, #216]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80035fa:	685b      	ldr	r3, [r3, #4]
 80035fc:	f003 030c 	and.w	r3, r3, #12
 8003600:	2b08      	cmp	r3, #8
 8003602:	d061      	beq.n	80036c8 <HAL_RCC_OscConfig+0x4b8>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	69db      	ldr	r3, [r3, #28]
 8003608:	2b02      	cmp	r3, #2
 800360a:	d146      	bne.n	800369a <HAL_RCC_OscConfig+0x48a>
        /* Check the parameters */
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800360c:	4b33      	ldr	r3, [pc, #204]	; (80036dc <HAL_RCC_OscConfig+0x4cc>)
 800360e:	2200      	movs	r2, #0
 8003610:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003612:	f7fe feb3 	bl	800237c <HAL_GetTick>
 8003616:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 8003618:	e008      	b.n	800362c <HAL_RCC_OscConfig+0x41c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800361a:	f7fe feaf 	bl	800237c <HAL_GetTick>
 800361e:	4602      	mov	r2, r0
 8003620:	693b      	ldr	r3, [r7, #16]
 8003622:	1ad3      	subs	r3, r2, r3
 8003624:	2b02      	cmp	r3, #2
 8003626:	d901      	bls.n	800362c <HAL_RCC_OscConfig+0x41c>
          {
            return HAL_TIMEOUT;
 8003628:	2303      	movs	r3, #3
 800362a:	e06d      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 800362c:	4b29      	ldr	r3, [pc, #164]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003634:	2b00      	cmp	r3, #0
 8003636:	d1f0      	bne.n	800361a <HAL_RCC_OscConfig+0x40a>
          }
        }

        /* Configure the HSE prediv factor --------------------------------*/
        /* It can be written only when the PLL is disabled. Not used in PLL source is different than HSE */
        if (RCC_OscInitStruct->PLL.PLLSource == RCC_PLLSOURCE_HSE)
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	6a1b      	ldr	r3, [r3, #32]
 800363c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003640:	d108      	bne.n	8003654 <HAL_RCC_OscConfig+0x444>
          /* Set PREDIV1 source */
          SET_BIT(RCC->CFGR2, RCC_OscInitStruct->Prediv1Source);
#endif /* RCC_CFGR2_PREDIV1SRC */

          /* Set PREDIV1 Value */
          __HAL_RCC_HSE_PREDIV_CONFIG(RCC_OscInitStruct->HSEPredivValue);
 8003642:	4b24      	ldr	r3, [pc, #144]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003644:	685b      	ldr	r3, [r3, #4]
 8003646:	f423 3200 	bic.w	r2, r3, #131072	; 0x20000
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	689b      	ldr	r3, [r3, #8]
 800364e:	4921      	ldr	r1, [pc, #132]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003650:	4313      	orrs	r3, r2
 8003652:	604b      	str	r3, [r1, #4]
        }

        /* Configure the main PLL clock source and multiplication factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8003654:	4b1f      	ldr	r3, [pc, #124]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003656:	685b      	ldr	r3, [r3, #4]
 8003658:	f423 1274 	bic.w	r2, r3, #3997696	; 0x3d0000
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	6a19      	ldr	r1, [r3, #32]
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003664:	430b      	orrs	r3, r1
 8003666:	491b      	ldr	r1, [pc, #108]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 8003668:	4313      	orrs	r3, r2
 800366a:	604b      	str	r3, [r1, #4]
                             RCC_OscInitStruct->PLL.PLLMUL);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800366c:	4b1b      	ldr	r3, [pc, #108]	; (80036dc <HAL_RCC_OscConfig+0x4cc>)
 800366e:	2201      	movs	r2, #1
 8003670:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003672:	f7fe fe83 	bl	800237c <HAL_GetTick>
 8003676:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 8003678:	e008      	b.n	800368c <HAL_RCC_OscConfig+0x47c>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800367a:	f7fe fe7f 	bl	800237c <HAL_GetTick>
 800367e:	4602      	mov	r2, r0
 8003680:	693b      	ldr	r3, [r7, #16]
 8003682:	1ad3      	subs	r3, r2, r3
 8003684:	2b02      	cmp	r3, #2
 8003686:	d901      	bls.n	800368c <HAL_RCC_OscConfig+0x47c>
          {
            return HAL_TIMEOUT;
 8003688:	2303      	movs	r3, #3
 800368a:	e03d      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == RESET)
 800368c:	4b11      	ldr	r3, [pc, #68]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 800368e:	681b      	ldr	r3, [r3, #0]
 8003690:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003694:	2b00      	cmp	r3, #0
 8003696:	d0f0      	beq.n	800367a <HAL_RCC_OscConfig+0x46a>
 8003698:	e035      	b.n	8003706 <HAL_RCC_OscConfig+0x4f6>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800369a:	4b10      	ldr	r3, [pc, #64]	; (80036dc <HAL_RCC_OscConfig+0x4cc>)
 800369c:	2200      	movs	r2, #0
 800369e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80036a0:	f7fe fe6c 	bl	800237c <HAL_GetTick>
 80036a4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036a6:	e008      	b.n	80036ba <HAL_RCC_OscConfig+0x4aa>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80036a8:	f7fe fe68 	bl	800237c <HAL_GetTick>
 80036ac:	4602      	mov	r2, r0
 80036ae:	693b      	ldr	r3, [r7, #16]
 80036b0:	1ad3      	subs	r3, r2, r3
 80036b2:	2b02      	cmp	r3, #2
 80036b4:	d901      	bls.n	80036ba <HAL_RCC_OscConfig+0x4aa>
          {
            return HAL_TIMEOUT;
 80036b6:	2303      	movs	r3, #3
 80036b8:	e026      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != RESET)
 80036ba:	4b06      	ldr	r3, [pc, #24]	; (80036d4 <HAL_RCC_OscConfig+0x4c4>)
 80036bc:	681b      	ldr	r3, [r3, #0]
 80036be:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80036c2:	2b00      	cmp	r3, #0
 80036c4:	d1f0      	bne.n	80036a8 <HAL_RCC_OscConfig+0x498>
 80036c6:	e01e      	b.n	8003706 <HAL_RCC_OscConfig+0x4f6>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80036c8:	687b      	ldr	r3, [r7, #4]
 80036ca:	69db      	ldr	r3, [r3, #28]
 80036cc:	2b01      	cmp	r3, #1
 80036ce:	d107      	bne.n	80036e0 <HAL_RCC_OscConfig+0x4d0>
      {
        return HAL_ERROR;
 80036d0:	2301      	movs	r3, #1
 80036d2:	e019      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
 80036d4:	40021000 	.word	0x40021000
 80036d8:	40007000 	.word	0x40007000
 80036dc:	42420060 	.word	0x42420060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 80036e0:	4b0b      	ldr	r3, [pc, #44]	; (8003710 <HAL_RCC_OscConfig+0x500>)
 80036e2:	685b      	ldr	r3, [r3, #4]
 80036e4:	60fb      	str	r3, [r7, #12]
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036e6:	68fb      	ldr	r3, [r7, #12]
 80036e8:	f403 3280 	and.w	r2, r3, #65536	; 0x10000
 80036ec:	687b      	ldr	r3, [r7, #4]
 80036ee:	6a1b      	ldr	r3, [r3, #32]
 80036f0:	429a      	cmp	r2, r3
 80036f2:	d106      	bne.n	8003702 <HAL_RCC_OscConfig+0x4f2>
            (READ_BIT(pll_config, RCC_CFGR_PLLMULL) != RCC_OscInitStruct->PLL.PLLMUL))
 80036f4:	68fb      	ldr	r3, [r7, #12]
 80036f6:	f403 1270 	and.w	r2, r3, #3932160	; 0x3c0000
 80036fa:	687b      	ldr	r3, [r7, #4]
 80036fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        if ((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80036fe:	429a      	cmp	r2, r3
 8003700:	d001      	beq.n	8003706 <HAL_RCC_OscConfig+0x4f6>
        {
          return HAL_ERROR;
 8003702:	2301      	movs	r3, #1
 8003704:	e000      	b.n	8003708 <HAL_RCC_OscConfig+0x4f8>
        }
      }
    }
  }

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	3718      	adds	r7, #24
 800370c:	46bd      	mov	sp, r7
 800370e:	bd80      	pop	{r7, pc}
 8003710:	40021000 	.word	0x40021000

08003714 <HAL_RCC_ClockConfig>:
  *         You can use @ref HAL_RCC_GetClockConfig() function to know which clock is
  *         currently used as system clock source.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b084      	sub	sp, #16
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
 800371c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	2b00      	cmp	r3, #0
 8003722:	d101      	bne.n	8003728 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003724:	2301      	movs	r3, #1
 8003726:	e0d0      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
  must be correctly programmed according to the frequency of the CPU clock
    (HCLK) of the device. */

#if defined(FLASH_ACR_LATENCY)
  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8003728:	4b6a      	ldr	r3, [pc, #424]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	f003 0307 	and.w	r3, r3, #7
 8003730:	683a      	ldr	r2, [r7, #0]
 8003732:	429a      	cmp	r2, r3
 8003734:	d910      	bls.n	8003758 <HAL_RCC_ClockConfig+0x44>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003736:	4b67      	ldr	r3, [pc, #412]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f023 0207 	bic.w	r2, r3, #7
 800373e:	4965      	ldr	r1, [pc, #404]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003740:	683b      	ldr	r3, [r7, #0]
 8003742:	4313      	orrs	r3, r2
 8003744:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003746:	4b63      	ldr	r3, [pc, #396]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003748:	681b      	ldr	r3, [r3, #0]
 800374a:	f003 0307 	and.w	r3, r3, #7
 800374e:	683a      	ldr	r2, [r7, #0]
 8003750:	429a      	cmp	r2, r3
 8003752:	d001      	beq.n	8003758 <HAL_RCC_ClockConfig+0x44>
  {
    return HAL_ERROR;
 8003754:	2301      	movs	r3, #1
 8003756:	e0b8      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
  }
}

#endif /* FLASH_ACR_LATENCY */
/*-------------------------- HCLK Configuration --------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	f003 0302 	and.w	r3, r3, #2
 8003760:	2b00      	cmp	r3, #0
 8003762:	d020      	beq.n	80037a6 <HAL_RCC_ClockConfig+0x92>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
    a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003764:	687b      	ldr	r3, [r7, #4]
 8003766:	681b      	ldr	r3, [r3, #0]
 8003768:	f003 0304 	and.w	r3, r3, #4
 800376c:	2b00      	cmp	r3, #0
 800376e:	d005      	beq.n	800377c <HAL_RCC_ClockConfig+0x68>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003770:	4b59      	ldr	r3, [pc, #356]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003772:	685b      	ldr	r3, [r3, #4]
 8003774:	4a58      	ldr	r2, [pc, #352]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003776:	f443 63e0 	orr.w	r3, r3, #1792	; 0x700
 800377a:	6053      	str	r3, [r2, #4]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	681b      	ldr	r3, [r3, #0]
 8003780:	f003 0308 	and.w	r3, r3, #8
 8003784:	2b00      	cmp	r3, #0
 8003786:	d005      	beq.n	8003794 <HAL_RCC_ClockConfig+0x80>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003788:	4b53      	ldr	r3, [pc, #332]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 800378a:	685b      	ldr	r3, [r3, #4]
 800378c:	4a52      	ldr	r2, [pc, #328]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 800378e:	f443 5360 	orr.w	r3, r3, #14336	; 0x3800
 8003792:	6053      	str	r3, [r2, #4]
    }

    /* Set the new HCLK clock divider */
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003794:	4b50      	ldr	r3, [pc, #320]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003796:	685b      	ldr	r3, [r3, #4]
 8003798:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800379c:	687b      	ldr	r3, [r7, #4]
 800379e:	689b      	ldr	r3, [r3, #8]
 80037a0:	494d      	ldr	r1, [pc, #308]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80037a2:	4313      	orrs	r3, r2
 80037a4:	604b      	str	r3, [r1, #4]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80037a6:	687b      	ldr	r3, [r7, #4]
 80037a8:	681b      	ldr	r3, [r3, #0]
 80037aa:	f003 0301 	and.w	r3, r3, #1
 80037ae:	2b00      	cmp	r3, #0
 80037b0:	d040      	beq.n	8003834 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	685b      	ldr	r3, [r3, #4]
 80037b6:	2b01      	cmp	r3, #1
 80037b8:	d107      	bne.n	80037ca <HAL_RCC_ClockConfig+0xb6>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80037ba:	4b47      	ldr	r3, [pc, #284]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80037bc:	681b      	ldr	r3, [r3, #0]
 80037be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d115      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037c6:	2301      	movs	r3, #1
 80037c8:	e07f      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    /* PLL is selected as System Clock Source */
    else if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 80037ca:	687b      	ldr	r3, [r7, #4]
 80037cc:	685b      	ldr	r3, [r3, #4]
 80037ce:	2b02      	cmp	r3, #2
 80037d0:	d107      	bne.n	80037e2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80037d2:	4b41      	ldr	r3, [pc, #260]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80037d4:	681b      	ldr	r3, [r3, #0]
 80037d6:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80037da:	2b00      	cmp	r3, #0
 80037dc:	d109      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037de:	2301      	movs	r3, #1
 80037e0:	e073      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80037e2:	4b3d      	ldr	r3, [pc, #244]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d101      	bne.n	80037f2 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80037ee:	2301      	movs	r3, #1
 80037f0:	e06b      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 80037f2:	4b39      	ldr	r3, [pc, #228]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80037f4:	685b      	ldr	r3, [r3, #4]
 80037f6:	f023 0203 	bic.w	r2, r3, #3
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	685b      	ldr	r3, [r3, #4]
 80037fe:	4936      	ldr	r1, [pc, #216]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003800:	4313      	orrs	r3, r2
 8003802:	604b      	str	r3, [r1, #4]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003804:	f7fe fdba 	bl	800237c <HAL_GetTick>
 8003808:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800380a:	e00a      	b.n	8003822 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800380c:	f7fe fdb6 	bl	800237c <HAL_GetTick>
 8003810:	4602      	mov	r2, r0
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	1ad3      	subs	r3, r2, r3
 8003816:	f241 3288 	movw	r2, #5000	; 0x1388
 800381a:	4293      	cmp	r3, r2
 800381c:	d901      	bls.n	8003822 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800381e:	2303      	movs	r3, #3
 8003820:	e053      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003822:	4b2d      	ldr	r3, [pc, #180]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003824:	685b      	ldr	r3, [r3, #4]
 8003826:	f003 020c 	and.w	r2, r3, #12
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	685b      	ldr	r3, [r3, #4]
 800382e:	009b      	lsls	r3, r3, #2
 8003830:	429a      	cmp	r2, r3
 8003832:	d1eb      	bne.n	800380c <HAL_RCC_ClockConfig+0xf8>
    }
  }

#if defined(FLASH_ACR_LATENCY)
  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8003834:	4b27      	ldr	r3, [pc, #156]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003836:	681b      	ldr	r3, [r3, #0]
 8003838:	f003 0307 	and.w	r3, r3, #7
 800383c:	683a      	ldr	r2, [r7, #0]
 800383e:	429a      	cmp	r2, r3
 8003840:	d210      	bcs.n	8003864 <HAL_RCC_ClockConfig+0x150>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003842:	4b24      	ldr	r3, [pc, #144]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003844:	681b      	ldr	r3, [r3, #0]
 8003846:	f023 0207 	bic.w	r2, r3, #7
 800384a:	4922      	ldr	r1, [pc, #136]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 800384c:	683b      	ldr	r3, [r7, #0]
 800384e:	4313      	orrs	r3, r2
 8003850:	600b      	str	r3, [r1, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8003852:	4b20      	ldr	r3, [pc, #128]	; (80038d4 <HAL_RCC_ClockConfig+0x1c0>)
 8003854:	681b      	ldr	r3, [r3, #0]
 8003856:	f003 0307 	and.w	r3, r3, #7
 800385a:	683a      	ldr	r2, [r7, #0]
 800385c:	429a      	cmp	r2, r3
 800385e:	d001      	beq.n	8003864 <HAL_RCC_ClockConfig+0x150>
  {
    return HAL_ERROR;
 8003860:	2301      	movs	r3, #1
 8003862:	e032      	b.n	80038ca <HAL_RCC_ClockConfig+0x1b6>
  }
}
#endif /* FLASH_ACR_LATENCY */

/*-------------------------- PCLK1 Configuration ---------------------------*/
if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	f003 0304 	and.w	r3, r3, #4
 800386c:	2b00      	cmp	r3, #0
 800386e:	d008      	beq.n	8003882 <HAL_RCC_ClockConfig+0x16e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003870:	4b19      	ldr	r3, [pc, #100]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003872:	685b      	ldr	r3, [r3, #4]
 8003874:	f423 62e0 	bic.w	r2, r3, #1792	; 0x700
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	68db      	ldr	r3, [r3, #12]
 800387c:	4916      	ldr	r1, [pc, #88]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 800387e:	4313      	orrs	r3, r2
 8003880:	604b      	str	r3, [r1, #4]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003882:	687b      	ldr	r3, [r7, #4]
 8003884:	681b      	ldr	r3, [r3, #0]
 8003886:	f003 0308 	and.w	r3, r3, #8
 800388a:	2b00      	cmp	r3, #0
 800388c:	d009      	beq.n	80038a2 <HAL_RCC_ClockConfig+0x18e>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 800388e:	4b12      	ldr	r3, [pc, #72]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 8003890:	685b      	ldr	r3, [r3, #4]
 8003892:	f423 5260 	bic.w	r2, r3, #14336	; 0x3800
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	691b      	ldr	r3, [r3, #16]
 800389a:	00db      	lsls	r3, r3, #3
 800389c:	490e      	ldr	r1, [pc, #56]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 800389e:	4313      	orrs	r3, r2
 80038a0:	604b      	str	r3, [r1, #4]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80038a2:	f000 f821 	bl	80038e8 <HAL_RCC_GetSysClockFreq>
 80038a6:	4602      	mov	r2, r0
 80038a8:	4b0b      	ldr	r3, [pc, #44]	; (80038d8 <HAL_RCC_ClockConfig+0x1c4>)
 80038aa:	685b      	ldr	r3, [r3, #4]
 80038ac:	091b      	lsrs	r3, r3, #4
 80038ae:	f003 030f 	and.w	r3, r3, #15
 80038b2:	490a      	ldr	r1, [pc, #40]	; (80038dc <HAL_RCC_ClockConfig+0x1c8>)
 80038b4:	5ccb      	ldrb	r3, [r1, r3]
 80038b6:	fa22 f303 	lsr.w	r3, r2, r3
 80038ba:	4a09      	ldr	r2, [pc, #36]	; (80038e0 <HAL_RCC_ClockConfig+0x1cc>)
 80038bc:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings*/
  HAL_InitTick(uwTickPrio);
 80038be:	4b09      	ldr	r3, [pc, #36]	; (80038e4 <HAL_RCC_ClockConfig+0x1d0>)
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	4618      	mov	r0, r3
 80038c4:	f7fe fd18 	bl	80022f8 <HAL_InitTick>

  return HAL_OK;
 80038c8:	2300      	movs	r3, #0
}
 80038ca:	4618      	mov	r0, r3
 80038cc:	3710      	adds	r7, #16
 80038ce:	46bd      	mov	sp, r7
 80038d0:	bd80      	pop	{r7, pc}
 80038d2:	bf00      	nop
 80038d4:	40022000 	.word	0x40022000
 80038d8:	40021000 	.word	0x40021000
 80038dc:	08007340 	.word	0x08007340
 80038e0:	2000001c 	.word	0x2000001c
 80038e4:	20000020 	.word	0x20000020

080038e8 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80038e8:	b480      	push	{r7}
 80038ea:	b087      	sub	sp, #28
 80038ec:	af00      	add	r7, sp, #0
#else
  static const uint8_t aPredivFactorTable[2U] = {1, 2};
#endif /*RCC_CFGR2_PREDIV1*/

#endif
  uint32_t tmpreg = 0U, prediv = 0U, pllclk = 0U, pllmul = 0U;
 80038ee:	2300      	movs	r3, #0
 80038f0:	60fb      	str	r3, [r7, #12]
 80038f2:	2300      	movs	r3, #0
 80038f4:	60bb      	str	r3, [r7, #8]
 80038f6:	2300      	movs	r3, #0
 80038f8:	617b      	str	r3, [r7, #20]
 80038fa:	2300      	movs	r3, #0
 80038fc:	607b      	str	r3, [r7, #4]
  uint32_t sysclockfreq = 0U;
 80038fe:	2300      	movs	r3, #0
 8003900:	613b      	str	r3, [r7, #16]
#if defined(RCC_CFGR2_PREDIV1SRC)
  uint32_t prediv2 = 0U, pll2mul = 0U;
#endif /*RCC_CFGR2_PREDIV1SRC*/

  tmpreg = RCC->CFGR;
 8003902:	4b1e      	ldr	r3, [pc, #120]	; (800397c <HAL_RCC_GetSysClockFreq+0x94>)
 8003904:	685b      	ldr	r3, [r3, #4]
 8003906:	60fb      	str	r3, [r7, #12]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	f003 030c 	and.w	r3, r3, #12
 800390e:	2b04      	cmp	r3, #4
 8003910:	d002      	beq.n	8003918 <HAL_RCC_GetSysClockFreq+0x30>
 8003912:	2b08      	cmp	r3, #8
 8003914:	d003      	beq.n	800391e <HAL_RCC_GetSysClockFreq+0x36>
 8003916:	e027      	b.n	8003968 <HAL_RCC_GetSysClockFreq+0x80>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 8003918:	4b19      	ldr	r3, [pc, #100]	; (8003980 <HAL_RCC_GetSysClockFreq+0x98>)
 800391a:	613b      	str	r3, [r7, #16]
      break;
 800391c:	e027      	b.n	800396e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllmul = aPLLMULFactorTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMULL) >> RCC_CFGR_PLLMULL_Pos];
 800391e:	68fb      	ldr	r3, [r7, #12]
 8003920:	0c9b      	lsrs	r3, r3, #18
 8003922:	f003 030f 	and.w	r3, r3, #15
 8003926:	4a17      	ldr	r2, [pc, #92]	; (8003984 <HAL_RCC_GetSysClockFreq+0x9c>)
 8003928:	5cd3      	ldrb	r3, [r2, r3]
 800392a:	607b      	str	r3, [r7, #4]
      if ((tmpreg & RCC_CFGR_PLLSRC) != RCC_PLLSOURCE_HSI_DIV2)
 800392c:	68fb      	ldr	r3, [r7, #12]
 800392e:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003932:	2b00      	cmp	r3, #0
 8003934:	d010      	beq.n	8003958 <HAL_RCC_GetSysClockFreq+0x70>
      {
#if defined(RCC_CFGR2_PREDIV1)
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR2 & RCC_CFGR2_PREDIV1) >> RCC_CFGR2_PREDIV1_Pos];
#else
        prediv = aPredivFactorTable[(uint32_t)(RCC->CFGR & RCC_CFGR_PLLXTPRE) >> RCC_CFGR_PLLXTPRE_Pos];
 8003936:	4b11      	ldr	r3, [pc, #68]	; (800397c <HAL_RCC_GetSysClockFreq+0x94>)
 8003938:	685b      	ldr	r3, [r3, #4]
 800393a:	0c5b      	lsrs	r3, r3, #17
 800393c:	f003 0301 	and.w	r3, r3, #1
 8003940:	4a11      	ldr	r2, [pc, #68]	; (8003988 <HAL_RCC_GetSysClockFreq+0xa0>)
 8003942:	5cd3      	ldrb	r3, [r2, r3]
 8003944:	60bb      	str	r3, [r7, #8]
        {
          pllclk = pllclk / 2;
        }
#else
        /* HSE used as PLL clock source : PLLCLK = HSE/PREDIV1 * PLLMUL */
        pllclk = (uint32_t)((HSE_VALUE  * pllmul) / prediv);
 8003946:	687b      	ldr	r3, [r7, #4]
 8003948:	4a0d      	ldr	r2, [pc, #52]	; (8003980 <HAL_RCC_GetSysClockFreq+0x98>)
 800394a:	fb03 f202 	mul.w	r2, r3, r2
 800394e:	68bb      	ldr	r3, [r7, #8]
 8003950:	fbb2 f3f3 	udiv	r3, r2, r3
 8003954:	617b      	str	r3, [r7, #20]
 8003956:	e004      	b.n	8003962 <HAL_RCC_GetSysClockFreq+0x7a>
#endif /*RCC_CFGR2_PREDIV1SRC*/
      }
      else
      {
        /* HSI used as PLL clock source : PLLCLK = HSI/2 * PLLMUL */
        pllclk = (uint32_t)((HSI_VALUE >> 1) * pllmul);
 8003958:	687b      	ldr	r3, [r7, #4]
 800395a:	4a0c      	ldr	r2, [pc, #48]	; (800398c <HAL_RCC_GetSysClockFreq+0xa4>)
 800395c:	fb02 f303 	mul.w	r3, r2, r3
 8003960:	617b      	str	r3, [r7, #20]
      }
      sysclockfreq = pllclk;
 8003962:	697b      	ldr	r3, [r7, #20]
 8003964:	613b      	str	r3, [r7, #16]
      break;
 8003966:	e002      	b.n	800396e <HAL_RCC_GetSysClockFreq+0x86>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    default: /* HSI used as system clock */
    {
      sysclockfreq = HSI_VALUE;
 8003968:	4b05      	ldr	r3, [pc, #20]	; (8003980 <HAL_RCC_GetSysClockFreq+0x98>)
 800396a:	613b      	str	r3, [r7, #16]
      break;
 800396c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800396e:	693b      	ldr	r3, [r7, #16]
}
 8003970:	4618      	mov	r0, r3
 8003972:	371c      	adds	r7, #28
 8003974:	46bd      	mov	sp, r7
 8003976:	bc80      	pop	{r7}
 8003978:	4770      	bx	lr
 800397a:	bf00      	nop
 800397c:	40021000 	.word	0x40021000
 8003980:	007a1200 	.word	0x007a1200
 8003984:	08007358 	.word	0x08007358
 8003988:	08007368 	.word	0x08007368
 800398c:	003d0900 	.word	0x003d0900

08003990 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003990:	b480      	push	{r7}
 8003992:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003994:	4b02      	ldr	r3, [pc, #8]	; (80039a0 <HAL_RCC_GetHCLKFreq+0x10>)
 8003996:	681b      	ldr	r3, [r3, #0]
}
 8003998:	4618      	mov	r0, r3
 800399a:	46bd      	mov	sp, r7
 800399c:	bc80      	pop	{r7}
 800399e:	4770      	bx	lr
 80039a0:	2000001c 	.word	0x2000001c

080039a4 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80039a4:	b580      	push	{r7, lr}
 80039a6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80039a8:	f7ff fff2 	bl	8003990 <HAL_RCC_GetHCLKFreq>
 80039ac:	4602      	mov	r2, r0
 80039ae:	4b05      	ldr	r3, [pc, #20]	; (80039c4 <HAL_RCC_GetPCLK1Freq+0x20>)
 80039b0:	685b      	ldr	r3, [r3, #4]
 80039b2:	0a1b      	lsrs	r3, r3, #8
 80039b4:	f003 0307 	and.w	r3, r3, #7
 80039b8:	4903      	ldr	r1, [pc, #12]	; (80039c8 <HAL_RCC_GetPCLK1Freq+0x24>)
 80039ba:	5ccb      	ldrb	r3, [r1, r3]
 80039bc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80039c0:	4618      	mov	r0, r3
 80039c2:	bd80      	pop	{r7, pc}
 80039c4:	40021000 	.word	0x40021000
 80039c8:	08007350 	.word	0x08007350

080039cc <RCC_Delay>:
  * @brief  This function provides delay (in milliseconds) based on CPU cycles method.
  * @param  mdelay: specifies the delay time length, in milliseconds.
  * @retval None
  */
static void RCC_Delay(uint32_t mdelay)
{
 80039cc:	b480      	push	{r7}
 80039ce:	b085      	sub	sp, #20
 80039d0:	af00      	add	r7, sp, #0
 80039d2:	6078      	str	r0, [r7, #4]
  __IO uint32_t Delay = mdelay * (SystemCoreClock / 8U / 1000U);
 80039d4:	4b0a      	ldr	r3, [pc, #40]	; (8003a00 <RCC_Delay+0x34>)
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	4a0a      	ldr	r2, [pc, #40]	; (8003a04 <RCC_Delay+0x38>)
 80039da:	fba2 2303 	umull	r2, r3, r2, r3
 80039de:	0a5b      	lsrs	r3, r3, #9
 80039e0:	687a      	ldr	r2, [r7, #4]
 80039e2:	fb02 f303 	mul.w	r3, r2, r3
 80039e6:	60fb      	str	r3, [r7, #12]
  do
  {
    __NOP();
 80039e8:	bf00      	nop
  }
  while (Delay --);
 80039ea:	68fb      	ldr	r3, [r7, #12]
 80039ec:	1e5a      	subs	r2, r3, #1
 80039ee:	60fa      	str	r2, [r7, #12]
 80039f0:	2b00      	cmp	r3, #0
 80039f2:	d1f9      	bne.n	80039e8 <RCC_Delay+0x1c>
}
 80039f4:	bf00      	nop
 80039f6:	bf00      	nop
 80039f8:	3714      	adds	r7, #20
 80039fa:	46bd      	mov	sp, r7
 80039fc:	bc80      	pop	{r7}
 80039fe:	4770      	bx	lr
 8003a00:	2000001c 	.word	0x2000001c
 8003a04:	10624dd3 	.word	0x10624dd3

08003a08 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	b082      	sub	sp, #8
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8003a10:	687b      	ldr	r3, [r7, #4]
 8003a12:	2b00      	cmp	r3, #0
 8003a14:	d101      	bne.n	8003a1a <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e076      	b.n	8003b08 <HAL_SPI_Init+0x100>
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  /* TI mode is not supported on this device.
     TIMode parameter is mandatory equal to SPI_TIMODE_DISABLE */
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8003a1a:	687b      	ldr	r3, [r7, #4]
 8003a1c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003a1e:	2b00      	cmp	r3, #0
 8003a20:	d108      	bne.n	8003a34 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	685b      	ldr	r3, [r3, #4]
 8003a26:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003a2a:	d009      	beq.n	8003a40 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	61da      	str	r2, [r3, #28]
 8003a32:	e005      	b.n	8003a40 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	2200      	movs	r2, #0
 8003a3e:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	2200      	movs	r2, #0
 8003a44:	629a      	str	r2, [r3, #40]	; 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003a4c:	b2db      	uxtb	r3, r3
 8003a4e:	2b00      	cmp	r3, #0
 8003a50:	d106      	bne.n	8003a60 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	2200      	movs	r2, #0
 8003a56:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8003a5a:	6878      	ldr	r0, [r7, #4]
 8003a5c:	f7fe fa7a 	bl	8001f54 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8003a60:	687b      	ldr	r3, [r7, #4]
 8003a62:	2202      	movs	r2, #2
 8003a64:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	681b      	ldr	r3, [r3, #0]
 8003a6c:	681a      	ldr	r2, [r3, #0]
 8003a6e:	687b      	ldr	r3, [r7, #4]
 8003a70:	681b      	ldr	r3, [r3, #0]
 8003a72:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003a76:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8003a78:	687b      	ldr	r3, [r7, #4]
 8003a7a:	685b      	ldr	r3, [r3, #4]
 8003a7c:	f403 7282 	and.w	r2, r3, #260	; 0x104
 8003a80:	687b      	ldr	r3, [r7, #4]
 8003a82:	689b      	ldr	r3, [r3, #8]
 8003a84:	f403 4304 	and.w	r3, r3, #33792	; 0x8400
 8003a88:	431a      	orrs	r2, r3
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	68db      	ldr	r3, [r3, #12]
 8003a8e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003a92:	431a      	orrs	r2, r3
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	691b      	ldr	r3, [r3, #16]
 8003a98:	f003 0302 	and.w	r3, r3, #2
 8003a9c:	431a      	orrs	r2, r3
 8003a9e:	687b      	ldr	r3, [r7, #4]
 8003aa0:	695b      	ldr	r3, [r3, #20]
 8003aa2:	f003 0301 	and.w	r3, r3, #1
 8003aa6:	431a      	orrs	r2, r3
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	699b      	ldr	r3, [r3, #24]
 8003aac:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8003ab0:	431a      	orrs	r2, r3
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	69db      	ldr	r3, [r3, #28]
 8003ab6:	f003 0338 	and.w	r3, r3, #56	; 0x38
 8003aba:	431a      	orrs	r2, r3
 8003abc:	687b      	ldr	r3, [r7, #4]
 8003abe:	6a1b      	ldr	r3, [r3, #32]
 8003ac0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003ac4:	ea42 0103 	orr.w	r1, r2, r3
 8003ac8:	687b      	ldr	r3, [r7, #4]
 8003aca:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003acc:	f403 5200 	and.w	r2, r3, #8192	; 0x2000
 8003ad0:	687b      	ldr	r3, [r7, #4]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	430a      	orrs	r2, r1
 8003ad6:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management */
  WRITE_REG(hspi->Instance->CR2, ((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE));
 8003ad8:	687b      	ldr	r3, [r7, #4]
 8003ada:	699b      	ldr	r3, [r3, #24]
 8003adc:	0c1a      	lsrs	r2, r3, #16
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	681b      	ldr	r3, [r3, #0]
 8003ae2:	f002 0204 	and.w	r2, r2, #4
 8003ae6:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8003ae8:	687b      	ldr	r3, [r7, #4]
 8003aea:	681b      	ldr	r3, [r3, #0]
 8003aec:	69da      	ldr	r2, [r3, #28]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8003af6:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	2200      	movs	r2, #0
 8003afc:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8003afe:	687b      	ldr	r3, [r7, #4]
 8003b00:	2201      	movs	r2, #1
 8003b02:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

  return HAL_OK;
 8003b06:	2300      	movs	r3, #0
}
 8003b08:	4618      	mov	r0, r3
 8003b0a:	3708      	adds	r7, #8
 8003b0c:	46bd      	mov	sp, r7
 8003b0e:	bd80      	pop	{r7, pc}

08003b10 <HAL_SPI_Transmit>:
  * @param  Size amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Transmit(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b10:	b580      	push	{r7, lr}
 8003b12:	b088      	sub	sp, #32
 8003b14:	af00      	add	r7, sp, #0
 8003b16:	60f8      	str	r0, [r7, #12]
 8003b18:	60b9      	str	r1, [r7, #8]
 8003b1a:	603b      	str	r3, [r7, #0]
 8003b1c:	4613      	mov	r3, r2
 8003b1e:	80fb      	strh	r3, [r7, #6]
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003b20:	2300      	movs	r3, #0
 8003b22:	77fb      	strb	r3, [r7, #31]

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES_OR_1LINE(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003b24:	68fb      	ldr	r3, [r7, #12]
 8003b26:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003b2a:	2b01      	cmp	r3, #1
 8003b2c:	d101      	bne.n	8003b32 <HAL_SPI_Transmit+0x22>
 8003b2e:	2302      	movs	r3, #2
 8003b30:	e12d      	b.n	8003d8e <HAL_SPI_Transmit+0x27e>
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	2201      	movs	r2, #1
 8003b36:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003b3a:	f7fe fc1f 	bl	800237c <HAL_GetTick>
 8003b3e:	61b8      	str	r0, [r7, #24]
  initial_TxXferCount = Size;
 8003b40:	88fb      	ldrh	r3, [r7, #6]
 8003b42:	82fb      	strh	r3, [r7, #22]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003b4a:	b2db      	uxtb	r3, r3
 8003b4c:	2b01      	cmp	r3, #1
 8003b4e:	d002      	beq.n	8003b56 <HAL_SPI_Transmit+0x46>
  {
    errorcode = HAL_BUSY;
 8003b50:	2302      	movs	r3, #2
 8003b52:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b54:	e116      	b.n	8003d84 <HAL_SPI_Transmit+0x274>
  }

  if ((pData == NULL) || (Size == 0U))
 8003b56:	68bb      	ldr	r3, [r7, #8]
 8003b58:	2b00      	cmp	r3, #0
 8003b5a:	d002      	beq.n	8003b62 <HAL_SPI_Transmit+0x52>
 8003b5c:	88fb      	ldrh	r3, [r7, #6]
 8003b5e:	2b00      	cmp	r3, #0
 8003b60:	d102      	bne.n	8003b68 <HAL_SPI_Transmit+0x58>
  {
    errorcode = HAL_ERROR;
 8003b62:	2301      	movs	r3, #1
 8003b64:	77fb      	strb	r3, [r7, #31]
    goto error;
 8003b66:	e10d      	b.n	8003d84 <HAL_SPI_Transmit+0x274>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_TX;
 8003b68:	68fb      	ldr	r3, [r7, #12]
 8003b6a:	2203      	movs	r2, #3
 8003b6c:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	2200      	movs	r2, #0
 8003b74:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pTxBuffPtr  = (uint8_t *)pData;
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	68ba      	ldr	r2, [r7, #8]
 8003b7a:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = Size;
 8003b7c:	68fb      	ldr	r3, [r7, #12]
 8003b7e:	88fa      	ldrh	r2, [r7, #6]
 8003b80:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = Size;
 8003b82:	68fb      	ldr	r3, [r7, #12]
 8003b84:	88fa      	ldrh	r2, [r7, #6]
 8003b86:	86da      	strh	r2, [r3, #54]	; 0x36

  /*Init field not used in handle to zero */
  hspi->pRxBuffPtr  = (uint8_t *)NULL;
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	2200      	movs	r2, #0
 8003b8c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = 0U;
 8003b8e:	68fb      	ldr	r3, [r7, #12]
 8003b90:	2200      	movs	r2, #0
 8003b92:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = 0U;
 8003b94:	68fb      	ldr	r3, [r7, #12]
 8003b96:	2200      	movs	r2, #0
 8003b98:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->TxISR       = NULL;
 8003b9a:	68fb      	ldr	r3, [r7, #12]
 8003b9c:	2200      	movs	r2, #0
 8003b9e:	645a      	str	r2, [r3, #68]	; 0x44
  hspi->RxISR       = NULL;
 8003ba0:	68fb      	ldr	r3, [r7, #12]
 8003ba2:	2200      	movs	r2, #0
 8003ba4:	641a      	str	r2, [r3, #64]	; 0x40

  /* Configure communication direction : 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	689b      	ldr	r3, [r3, #8]
 8003baa:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003bae:	d10f      	bne.n	8003bd0 <HAL_SPI_Transmit+0xc0>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	681a      	ldr	r2, [r3, #0]
 8003bb6:	68fb      	ldr	r3, [r7, #12]
 8003bb8:	681b      	ldr	r3, [r3, #0]
 8003bba:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003bbe:	601a      	str	r2, [r3, #0]
    SPI_1LINE_TX(hspi);
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	681a      	ldr	r2, [r3, #0]
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	681b      	ldr	r3, [r3, #0]
 8003bca:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8003bce:	601a      	str	r2, [r3, #0]
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003bd0:	68fb      	ldr	r3, [r7, #12]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003bda:	2b40      	cmp	r3, #64	; 0x40
 8003bdc:	d007      	beq.n	8003bee <HAL_SPI_Transmit+0xde>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003bde:	68fb      	ldr	r3, [r7, #12]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	681a      	ldr	r2, [r3, #0]
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	681b      	ldr	r3, [r3, #0]
 8003be8:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003bec:	601a      	str	r2, [r3, #0]
  }

  /* Transmit data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	68db      	ldr	r3, [r3, #12]
 8003bf2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003bf6:	d14f      	bne.n	8003c98 <HAL_SPI_Transmit+0x188>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	685b      	ldr	r3, [r3, #4]
 8003bfc:	2b00      	cmp	r3, #0
 8003bfe:	d002      	beq.n	8003c06 <HAL_SPI_Transmit+0xf6>
 8003c00:	8afb      	ldrh	r3, [r7, #22]
 8003c02:	2b01      	cmp	r3, #1
 8003c04:	d142      	bne.n	8003c8c <HAL_SPI_Transmit+0x17c>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c06:	68fb      	ldr	r3, [r7, #12]
 8003c08:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c0a:	881a      	ldrh	r2, [r3, #0]
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	681b      	ldr	r3, [r3, #0]
 8003c10:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c12:	68fb      	ldr	r3, [r7, #12]
 8003c14:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c16:	1c9a      	adds	r2, r3, #2
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003c1c:	68fb      	ldr	r3, [r7, #12]
 8003c1e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c20:	b29b      	uxth	r3, r3
 8003c22:	3b01      	subs	r3, #1
 8003c24:	b29a      	uxth	r2, r3
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    /* Transmit data in 16 Bit mode */
    while (hspi->TxXferCount > 0U)
 8003c2a:	e02f      	b.n	8003c8c <HAL_SPI_Transmit+0x17c>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	681b      	ldr	r3, [r3, #0]
 8003c30:	689b      	ldr	r3, [r3, #8]
 8003c32:	f003 0302 	and.w	r3, r3, #2
 8003c36:	2b02      	cmp	r3, #2
 8003c38:	d112      	bne.n	8003c60 <HAL_SPI_Transmit+0x150>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c3e:	881a      	ldrh	r2, [r3, #0]
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8003c46:	68fb      	ldr	r3, [r7, #12]
 8003c48:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003c4a:	1c9a      	adds	r2, r3, #2
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c54:	b29b      	uxth	r3, r3
 8003c56:	3b01      	subs	r3, #1
 8003c58:	b29a      	uxth	r2, r3
 8003c5a:	68fb      	ldr	r3, [r7, #12]
 8003c5c:	86da      	strh	r2, [r3, #54]	; 0x36
 8003c5e:	e015      	b.n	8003c8c <HAL_SPI_Transmit+0x17c>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003c60:	f7fe fb8c 	bl	800237c <HAL_GetTick>
 8003c64:	4602      	mov	r2, r0
 8003c66:	69bb      	ldr	r3, [r7, #24]
 8003c68:	1ad3      	subs	r3, r2, r3
 8003c6a:	683a      	ldr	r2, [r7, #0]
 8003c6c:	429a      	cmp	r2, r3
 8003c6e:	d803      	bhi.n	8003c78 <HAL_SPI_Transmit+0x168>
 8003c70:	683b      	ldr	r3, [r7, #0]
 8003c72:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c76:	d102      	bne.n	8003c7e <HAL_SPI_Transmit+0x16e>
 8003c78:	683b      	ldr	r3, [r7, #0]
 8003c7a:	2b00      	cmp	r3, #0
 8003c7c:	d106      	bne.n	8003c8c <HAL_SPI_Transmit+0x17c>
        {
          errorcode = HAL_TIMEOUT;
 8003c7e:	2303      	movs	r3, #3
 8003c80:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2201      	movs	r2, #1
 8003c86:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003c8a:	e07b      	b.n	8003d84 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003c90:	b29b      	uxth	r3, r3
 8003c92:	2b00      	cmp	r3, #0
 8003c94:	d1ca      	bne.n	8003c2c <HAL_SPI_Transmit+0x11c>
 8003c96:	e050      	b.n	8003d3a <HAL_SPI_Transmit+0x22a>
    }
  }
  /* Transmit data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	685b      	ldr	r3, [r3, #4]
 8003c9c:	2b00      	cmp	r3, #0
 8003c9e:	d002      	beq.n	8003ca6 <HAL_SPI_Transmit+0x196>
 8003ca0:	8afb      	ldrh	r3, [r7, #22]
 8003ca2:	2b01      	cmp	r3, #1
 8003ca4:	d144      	bne.n	8003d30 <HAL_SPI_Transmit+0x220>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	330c      	adds	r3, #12
 8003cb0:	7812      	ldrb	r2, [r2, #0]
 8003cb2:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cb8:	1c5a      	adds	r2, r3, #1
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 8003cbe:	68fb      	ldr	r3, [r7, #12]
 8003cc0:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cc2:	b29b      	uxth	r3, r3
 8003cc4:	3b01      	subs	r3, #1
 8003cc6:	b29a      	uxth	r2, r3
 8003cc8:	68fb      	ldr	r3, [r7, #12]
 8003cca:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while (hspi->TxXferCount > 0U)
 8003ccc:	e030      	b.n	8003d30 <HAL_SPI_Transmit+0x220>
    {
      /* Wait until TXE flag is set to send data */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE))
 8003cce:	68fb      	ldr	r3, [r7, #12]
 8003cd0:	681b      	ldr	r3, [r3, #0]
 8003cd2:	689b      	ldr	r3, [r3, #8]
 8003cd4:	f003 0302 	and.w	r3, r3, #2
 8003cd8:	2b02      	cmp	r3, #2
 8003cda:	d113      	bne.n	8003d04 <HAL_SPI_Transmit+0x1f4>
      {
        *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 8003cdc:	68fb      	ldr	r3, [r7, #12]
 8003cde:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	681b      	ldr	r3, [r3, #0]
 8003ce4:	330c      	adds	r3, #12
 8003ce6:	7812      	ldrb	r2, [r2, #0]
 8003ce8:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr += sizeof(uint8_t);
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003cee:	1c5a      	adds	r2, r3, #1
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003cf8:	b29b      	uxth	r3, r3
 8003cfa:	3b01      	subs	r3, #1
 8003cfc:	b29a      	uxth	r2, r3
 8003cfe:	68fb      	ldr	r3, [r7, #12]
 8003d00:	86da      	strh	r2, [r3, #54]	; 0x36
 8003d02:	e015      	b.n	8003d30 <HAL_SPI_Transmit+0x220>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003d04:	f7fe fb3a 	bl	800237c <HAL_GetTick>
 8003d08:	4602      	mov	r2, r0
 8003d0a:	69bb      	ldr	r3, [r7, #24]
 8003d0c:	1ad3      	subs	r3, r2, r3
 8003d0e:	683a      	ldr	r2, [r7, #0]
 8003d10:	429a      	cmp	r2, r3
 8003d12:	d803      	bhi.n	8003d1c <HAL_SPI_Transmit+0x20c>
 8003d14:	683b      	ldr	r3, [r7, #0]
 8003d16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d1a:	d102      	bne.n	8003d22 <HAL_SPI_Transmit+0x212>
 8003d1c:	683b      	ldr	r3, [r7, #0]
 8003d1e:	2b00      	cmp	r3, #0
 8003d20:	d106      	bne.n	8003d30 <HAL_SPI_Transmit+0x220>
        {
          errorcode = HAL_TIMEOUT;
 8003d22:	2303      	movs	r3, #3
 8003d24:	77fb      	strb	r3, [r7, #31]
          hspi->State = HAL_SPI_STATE_READY;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2201      	movs	r2, #1
 8003d2a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003d2e:	e029      	b.n	8003d84 <HAL_SPI_Transmit+0x274>
    while (hspi->TxXferCount > 0U)
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	2b00      	cmp	r3, #0
 8003d38:	d1c9      	bne.n	8003cce <HAL_SPI_Transmit+0x1be>
    SET_BIT(hspi->Instance->CR1, SPI_CR1_CRCNEXT);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003d3a:	69ba      	ldr	r2, [r7, #24]
 8003d3c:	6839      	ldr	r1, [r7, #0]
 8003d3e:	68f8      	ldr	r0, [r7, #12]
 8003d40:	f000 fbd8 	bl	80044f4 <SPI_EndRxTxTransaction>
 8003d44:	4603      	mov	r3, r0
 8003d46:	2b00      	cmp	r3, #0
 8003d48:	d002      	beq.n	8003d50 <HAL_SPI_Transmit+0x240>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003d4a:	68fb      	ldr	r3, [r7, #12]
 8003d4c:	2220      	movs	r2, #32
 8003d4e:	655a      	str	r2, [r3, #84]	; 0x54
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 8003d50:	68fb      	ldr	r3, [r7, #12]
 8003d52:	689b      	ldr	r3, [r3, #8]
 8003d54:	2b00      	cmp	r3, #0
 8003d56:	d10a      	bne.n	8003d6e <HAL_SPI_Transmit+0x25e>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 8003d58:	2300      	movs	r3, #0
 8003d5a:	613b      	str	r3, [r7, #16]
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	681b      	ldr	r3, [r3, #0]
 8003d60:	68db      	ldr	r3, [r3, #12]
 8003d62:	613b      	str	r3, [r7, #16]
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	681b      	ldr	r3, [r3, #0]
 8003d68:	689b      	ldr	r3, [r3, #8]
 8003d6a:	613b      	str	r3, [r7, #16]
 8003d6c:	693b      	ldr	r3, [r7, #16]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003d6e:	68fb      	ldr	r3, [r7, #12]
 8003d70:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003d72:	2b00      	cmp	r3, #0
 8003d74:	d002      	beq.n	8003d7c <HAL_SPI_Transmit+0x26c>
  {
    errorcode = HAL_ERROR;
 8003d76:	2301      	movs	r3, #1
 8003d78:	77fb      	strb	r3, [r7, #31]
 8003d7a:	e003      	b.n	8003d84 <HAL_SPI_Transmit+0x274>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error:
  /* Process Unlocked */
  __HAL_UNLOCK(hspi);
 8003d84:	68fb      	ldr	r3, [r7, #12]
 8003d86:	2200      	movs	r2, #0
 8003d88:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003d8c:	7ffb      	ldrb	r3, [r7, #31]
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3720      	adds	r7, #32
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_SPI_Receive>:
  * @param  Size amount of data to be received
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Receive(SPI_HandleTypeDef *hspi, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003d96:	b580      	push	{r7, lr}
 8003d98:	b088      	sub	sp, #32
 8003d9a:	af02      	add	r7, sp, #8
 8003d9c:	60f8      	str	r0, [r7, #12]
 8003d9e:	60b9      	str	r1, [r7, #8]
 8003da0:	603b      	str	r3, [r7, #0]
 8003da2:	4613      	mov	r3, r2
 8003da4:	80fb      	strh	r3, [r7, #6]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */
  uint32_t tickstart;
  HAL_StatusTypeDef errorcode = HAL_OK;
 8003da6:	2300      	movs	r3, #0
 8003da8:	75fb      	strb	r3, [r7, #23]

  if (hspi->State != HAL_SPI_STATE_READY)
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8003db0:	b2db      	uxtb	r3, r3
 8003db2:	2b01      	cmp	r3, #1
 8003db4:	d002      	beq.n	8003dbc <HAL_SPI_Receive+0x26>
  {
    errorcode = HAL_BUSY;
 8003db6:	2302      	movs	r3, #2
 8003db8:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003dba:	e0fb      	b.n	8003fb4 <HAL_SPI_Receive+0x21e>
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES))
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	685b      	ldr	r3, [r3, #4]
 8003dc0:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8003dc4:	d112      	bne.n	8003dec <HAL_SPI_Receive+0x56>
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	689b      	ldr	r3, [r3, #8]
 8003dca:	2b00      	cmp	r3, #0
 8003dcc:	d10e      	bne.n	8003dec <HAL_SPI_Receive+0x56>
  {
    hspi->State = HAL_SPI_STATE_BUSY_RX;
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	2204      	movs	r2, #4
 8003dd2:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
    /* Call transmit-receive function to send Dummy data on Tx line and generate clock on CLK line */
    return HAL_SPI_TransmitReceive(hspi, pData, pData, Size, Timeout);
 8003dd6:	88fa      	ldrh	r2, [r7, #6]
 8003dd8:	683b      	ldr	r3, [r7, #0]
 8003dda:	9300      	str	r3, [sp, #0]
 8003ddc:	4613      	mov	r3, r2
 8003dde:	68ba      	ldr	r2, [r7, #8]
 8003de0:	68b9      	ldr	r1, [r7, #8]
 8003de2:	68f8      	ldr	r0, [r7, #12]
 8003de4:	f000 f8ef 	bl	8003fc6 <HAL_SPI_TransmitReceive>
 8003de8:	4603      	mov	r3, r0
 8003dea:	e0e8      	b.n	8003fbe <HAL_SPI_Receive+0x228>
  }

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003df2:	2b01      	cmp	r3, #1
 8003df4:	d101      	bne.n	8003dfa <HAL_SPI_Receive+0x64>
 8003df6:	2302      	movs	r3, #2
 8003df8:	e0e1      	b.n	8003fbe <HAL_SPI_Receive+0x228>
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	2201      	movs	r2, #1
 8003dfe:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003e02:	f7fe fabb 	bl	800237c <HAL_GetTick>
 8003e06:	6138      	str	r0, [r7, #16]

  if ((pData == NULL) || (Size == 0U))
 8003e08:	68bb      	ldr	r3, [r7, #8]
 8003e0a:	2b00      	cmp	r3, #0
 8003e0c:	d002      	beq.n	8003e14 <HAL_SPI_Receive+0x7e>
 8003e0e:	88fb      	ldrh	r3, [r7, #6]
 8003e10:	2b00      	cmp	r3, #0
 8003e12:	d102      	bne.n	8003e1a <HAL_SPI_Receive+0x84>
  {
    errorcode = HAL_ERROR;
 8003e14:	2301      	movs	r3, #1
 8003e16:	75fb      	strb	r3, [r7, #23]
    goto error;
 8003e18:	e0cc      	b.n	8003fb4 <HAL_SPI_Receive+0x21e>
  }

  /* Set the transaction information */
  hspi->State       = HAL_SPI_STATE_BUSY_RX;
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	2204      	movs	r2, #4
 8003e1e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	2200      	movs	r2, #0
 8003e26:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pData;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	68ba      	ldr	r2, [r7, #8]
 8003e2c:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferSize  = Size;
 8003e2e:	68fb      	ldr	r3, [r7, #12]
 8003e30:	88fa      	ldrh	r2, [r7, #6]
 8003e32:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->RxXferCount = Size;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	88fa      	ldrh	r2, [r7, #6]
 8003e38:	87da      	strh	r2, [r3, #62]	; 0x3e

  /*Init field not used in handle to zero */
  hspi->pTxBuffPtr  = (uint8_t *)NULL;
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	2200      	movs	r2, #0
 8003e3e:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferSize  = 0U;
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	2200      	movs	r2, #0
 8003e44:	869a      	strh	r2, [r3, #52]	; 0x34
  hspi->TxXferCount = 0U;
 8003e46:	68fb      	ldr	r3, [r7, #12]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->RxISR       = NULL;
 8003e4c:	68fb      	ldr	r3, [r7, #12]
 8003e4e:	2200      	movs	r2, #0
 8003e50:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	2200      	movs	r2, #0
 8003e56:	645a      	str	r2, [r3, #68]	; 0x44
    hspi->RxXferCount--;
  }
#endif /* USE_SPI_CRC */

  /* Configure communication direction: 1Line */
  if (hspi->Init.Direction == SPI_DIRECTION_1LINE)
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	689b      	ldr	r3, [r3, #8]
 8003e5c:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8003e60:	d10f      	bne.n	8003e82 <HAL_SPI_Receive+0xec>
  {
    /* Disable SPI Peripheral before set 1Line direction (BIDIOE bit) */
    __HAL_SPI_DISABLE(hspi);
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	681a      	ldr	r2, [r3, #0]
 8003e68:	68fb      	ldr	r3, [r7, #12]
 8003e6a:	681b      	ldr	r3, [r3, #0]
 8003e6c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8003e70:	601a      	str	r2, [r3, #0]
    SPI_1LINE_RX(hspi);
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	681b      	ldr	r3, [r3, #0]
 8003e76:	681a      	ldr	r2, [r3, #0]
 8003e78:	68fb      	ldr	r3, [r7, #12]
 8003e7a:	681b      	ldr	r3, [r3, #0]
 8003e7c:	f422 4280 	bic.w	r2, r2, #16384	; 0x4000
 8003e80:	601a      	str	r2, [r3, #0]
  }

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	681b      	ldr	r3, [r3, #0]
 8003e88:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e8c:	2b40      	cmp	r3, #64	; 0x40
 8003e8e:	d007      	beq.n	8003ea0 <HAL_SPI_Receive+0x10a>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	681b      	ldr	r3, [r3, #0]
 8003e94:	681a      	ldr	r2, [r3, #0]
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	681b      	ldr	r3, [r3, #0]
 8003e9a:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8003e9e:	601a      	str	r2, [r3, #0]
  }

  /* Receive data in 8 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_8BIT)
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	68db      	ldr	r3, [r3, #12]
 8003ea4:	2b00      	cmp	r3, #0
 8003ea6:	d16a      	bne.n	8003f7e <HAL_SPI_Receive+0x1e8>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
 8003ea8:	e032      	b.n	8003f10 <HAL_SPI_Receive+0x17a>
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	681b      	ldr	r3, [r3, #0]
 8003eae:	689b      	ldr	r3, [r3, #8]
 8003eb0:	f003 0301 	and.w	r3, r3, #1
 8003eb4:	2b01      	cmp	r3, #1
 8003eb6:	d115      	bne.n	8003ee4 <HAL_SPI_Receive+0x14e>
      {
        /* read the received data */
        (* (uint8_t *)hspi->pRxBuffPtr) = *(__IO uint8_t *)&hspi->Instance->DR;
 8003eb8:	68fb      	ldr	r3, [r7, #12]
 8003eba:	681b      	ldr	r3, [r3, #0]
 8003ebc:	f103 020c 	add.w	r2, r3, #12
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ec4:	7812      	ldrb	r2, [r2, #0]
 8003ec6:	b2d2      	uxtb	r2, r2
 8003ec8:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint8_t);
 8003eca:	68fb      	ldr	r3, [r7, #12]
 8003ecc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003ece:	1c5a      	adds	r2, r3, #1
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003ed4:	68fb      	ldr	r3, [r7, #12]
 8003ed6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003ed8:	b29b      	uxth	r3, r3
 8003eda:	3b01      	subs	r3, #1
 8003edc:	b29a      	uxth	r2, r3
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003ee2:	e015      	b.n	8003f10 <HAL_SPI_Receive+0x17a>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003ee4:	f7fe fa4a 	bl	800237c <HAL_GetTick>
 8003ee8:	4602      	mov	r2, r0
 8003eea:	693b      	ldr	r3, [r7, #16]
 8003eec:	1ad3      	subs	r3, r2, r3
 8003eee:	683a      	ldr	r2, [r7, #0]
 8003ef0:	429a      	cmp	r2, r3
 8003ef2:	d803      	bhi.n	8003efc <HAL_SPI_Receive+0x166>
 8003ef4:	683b      	ldr	r3, [r7, #0]
 8003ef6:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003efa:	d102      	bne.n	8003f02 <HAL_SPI_Receive+0x16c>
 8003efc:	683b      	ldr	r3, [r7, #0]
 8003efe:	2b00      	cmp	r3, #0
 8003f00:	d106      	bne.n	8003f10 <HAL_SPI_Receive+0x17a>
        {
          errorcode = HAL_TIMEOUT;
 8003f02:	2303      	movs	r3, #3
 8003f04:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	2201      	movs	r2, #1
 8003f0a:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003f0e:	e051      	b.n	8003fb4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f14:	b29b      	uxth	r3, r3
 8003f16:	2b00      	cmp	r3, #0
 8003f18:	d1c7      	bne.n	8003eaa <HAL_SPI_Receive+0x114>
 8003f1a:	e035      	b.n	8003f88 <HAL_SPI_Receive+0x1f2>
  {
    /* Transfer loop */
    while (hspi->RxXferCount > 0U)
    {
      /* Check the RXNE flag */
      if (__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE))
 8003f1c:	68fb      	ldr	r3, [r7, #12]
 8003f1e:	681b      	ldr	r3, [r3, #0]
 8003f20:	689b      	ldr	r3, [r3, #8]
 8003f22:	f003 0301 	and.w	r3, r3, #1
 8003f26:	2b01      	cmp	r3, #1
 8003f28:	d113      	bne.n	8003f52 <HAL_SPI_Receive+0x1bc>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	68da      	ldr	r2, [r3, #12]
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f34:	b292      	uxth	r2, r2
 8003f36:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8003f3c:	1c9a      	adds	r2, r3, #2
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 8003f42:	68fb      	ldr	r3, [r7, #12]
 8003f44:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f46:	b29b      	uxth	r3, r3
 8003f48:	3b01      	subs	r3, #1
 8003f4a:	b29a      	uxth	r2, r3
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	87da      	strh	r2, [r3, #62]	; 0x3e
 8003f50:	e015      	b.n	8003f7e <HAL_SPI_Receive+0x1e8>
      }
      else
      {
        /* Timeout management */
        if ((((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY)) || (Timeout == 0U))
 8003f52:	f7fe fa13 	bl	800237c <HAL_GetTick>
 8003f56:	4602      	mov	r2, r0
 8003f58:	693b      	ldr	r3, [r7, #16]
 8003f5a:	1ad3      	subs	r3, r2, r3
 8003f5c:	683a      	ldr	r2, [r7, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d803      	bhi.n	8003f6a <HAL_SPI_Receive+0x1d4>
 8003f62:	683b      	ldr	r3, [r7, #0]
 8003f64:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003f68:	d102      	bne.n	8003f70 <HAL_SPI_Receive+0x1da>
 8003f6a:	683b      	ldr	r3, [r7, #0]
 8003f6c:	2b00      	cmp	r3, #0
 8003f6e:	d106      	bne.n	8003f7e <HAL_SPI_Receive+0x1e8>
        {
          errorcode = HAL_TIMEOUT;
 8003f70:	2303      	movs	r3, #3
 8003f72:	75fb      	strb	r3, [r7, #23]
          hspi->State = HAL_SPI_STATE_READY;
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	2201      	movs	r2, #1
 8003f78:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
          goto error;
 8003f7c:	e01a      	b.n	8003fb4 <HAL_SPI_Receive+0x21e>
    while (hspi->RxXferCount > 0U)
 8003f7e:	68fb      	ldr	r3, [r7, #12]
 8003f80:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8003f82:	b29b      	uxth	r3, r3
 8003f84:	2b00      	cmp	r3, #0
 8003f86:	d1c9      	bne.n	8003f1c <HAL_SPI_Receive+0x186>
    UNUSED(tmpreg);
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 8003f88:	693a      	ldr	r2, [r7, #16]
 8003f8a:	6839      	ldr	r1, [r7, #0]
 8003f8c:	68f8      	ldr	r0, [r7, #12]
 8003f8e:	f000 fa5f 	bl	8004450 <SPI_EndRxTransaction>
 8003f92:	4603      	mov	r3, r0
 8003f94:	2b00      	cmp	r3, #0
 8003f96:	d002      	beq.n	8003f9e <HAL_SPI_Receive+0x208>
  {
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	2220      	movs	r2, #32
 8003f9c:	655a      	str	r2, [r3, #84]	; 0x54
      __HAL_SPI_CLEAR_CRCERRFLAG(hspi);
    }
  }
#endif /* USE_SPI_CRC */

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 8003f9e:	68fb      	ldr	r3, [r7, #12]
 8003fa0:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d002      	beq.n	8003fac <HAL_SPI_Receive+0x216>
  {
    errorcode = HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	75fb      	strb	r3, [r7, #23]
 8003faa:	e003      	b.n	8003fb4 <HAL_SPI_Receive+0x21e>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	2201      	movs	r2, #1
 8003fb0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

error :
  __HAL_UNLOCK(hspi);
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	2200      	movs	r2, #0
 8003fb8:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 8003fbc:	7dfb      	ldrb	r3, [r7, #23]
}
 8003fbe:	4618      	mov	r0, r3
 8003fc0:	3718      	adds	r7, #24
 8003fc2:	46bd      	mov	sp, r7
 8003fc4:	bd80      	pop	{r7, pc}

08003fc6 <HAL_SPI_TransmitReceive>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_TransmitReceive(SPI_HandleTypeDef *hspi, uint8_t *pTxData, uint8_t *pRxData, uint16_t Size,
                                          uint32_t Timeout)
{
 8003fc6:	b580      	push	{r7, lr}
 8003fc8:	b08c      	sub	sp, #48	; 0x30
 8003fca:	af00      	add	r7, sp, #0
 8003fcc:	60f8      	str	r0, [r7, #12]
 8003fce:	60b9      	str	r1, [r7, #8]
 8003fd0:	607a      	str	r2, [r7, #4]
 8003fd2:	807b      	strh	r3, [r7, #2]
#if (USE_SPI_CRC != 0U)
  __IO uint32_t tmpreg = 0U;
#endif /* USE_SPI_CRC */

  /* Variable used to alternate Rx and Tx during transfer */
  uint32_t             txallowed = 1U;
 8003fd4:	2301      	movs	r3, #1
 8003fd6:	62fb      	str	r3, [r7, #44]	; 0x2c
  HAL_StatusTypeDef    errorcode = HAL_OK;
 8003fd8:	2300      	movs	r3, #0
 8003fda:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b

  /* Check Direction parameter */
  assert_param(IS_SPI_DIRECTION_2LINES(hspi->Init.Direction));

  /* Process Locked */
  __HAL_LOCK(hspi);
 8003fde:	68fb      	ldr	r3, [r7, #12]
 8003fe0:	f893 3050 	ldrb.w	r3, [r3, #80]	; 0x50
 8003fe4:	2b01      	cmp	r3, #1
 8003fe6:	d101      	bne.n	8003fec <HAL_SPI_TransmitReceive+0x26>
 8003fe8:	2302      	movs	r3, #2
 8003fea:	e198      	b.n	800431e <HAL_SPI_TransmitReceive+0x358>
 8003fec:	68fb      	ldr	r3, [r7, #12]
 8003fee:	2201      	movs	r2, #1
 8003ff0:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

  /* Init tickstart for timeout management*/
  tickstart = HAL_GetTick();
 8003ff4:	f7fe f9c2 	bl	800237c <HAL_GetTick>
 8003ff8:	6278      	str	r0, [r7, #36]	; 0x24

  /* Init temporary variables */
  tmp_state           = hspi->State;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004000:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  tmp_mode            = hspi->Init.Mode;
 8004004:	68fb      	ldr	r3, [r7, #12]
 8004006:	685b      	ldr	r3, [r3, #4]
 8004008:	61fb      	str	r3, [r7, #28]
  initial_TxXferCount = Size;
 800400a:	887b      	ldrh	r3, [r7, #2]
 800400c:	837b      	strh	r3, [r7, #26]

  if (!((tmp_state == HAL_SPI_STATE_READY) || \
 800400e:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 8004012:	2b01      	cmp	r3, #1
 8004014:	d00f      	beq.n	8004036 <HAL_SPI_TransmitReceive+0x70>
 8004016:	69fb      	ldr	r3, [r7, #28]
 8004018:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 800401c:	d107      	bne.n	800402e <HAL_SPI_TransmitReceive+0x68>
        ((tmp_mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES) && (tmp_state == HAL_SPI_STATE_BUSY_RX))))
 800401e:	68fb      	ldr	r3, [r7, #12]
 8004020:	689b      	ldr	r3, [r3, #8]
 8004022:	2b00      	cmp	r3, #0
 8004024:	d103      	bne.n	800402e <HAL_SPI_TransmitReceive+0x68>
 8004026:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 800402a:	2b04      	cmp	r3, #4
 800402c:	d003      	beq.n	8004036 <HAL_SPI_TransmitReceive+0x70>
  {
    errorcode = HAL_BUSY;
 800402e:	2302      	movs	r3, #2
 8004030:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 8004034:	e16d      	b.n	8004312 <HAL_SPI_TransmitReceive+0x34c>
  }

  if ((pTxData == NULL) || (pRxData == NULL) || (Size == 0U))
 8004036:	68bb      	ldr	r3, [r7, #8]
 8004038:	2b00      	cmp	r3, #0
 800403a:	d005      	beq.n	8004048 <HAL_SPI_TransmitReceive+0x82>
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	2b00      	cmp	r3, #0
 8004040:	d002      	beq.n	8004048 <HAL_SPI_TransmitReceive+0x82>
 8004042:	887b      	ldrh	r3, [r7, #2]
 8004044:	2b00      	cmp	r3, #0
 8004046:	d103      	bne.n	8004050 <HAL_SPI_TransmitReceive+0x8a>
  {
    errorcode = HAL_ERROR;
 8004048:	2301      	movs	r3, #1
 800404a:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    goto error;
 800404e:	e160      	b.n	8004312 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Don't overwrite in case of HAL_SPI_STATE_BUSY_RX */
  if (hspi->State != HAL_SPI_STATE_BUSY_RX)
 8004050:	68fb      	ldr	r3, [r7, #12]
 8004052:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004056:	b2db      	uxtb	r3, r3
 8004058:	2b04      	cmp	r3, #4
 800405a:	d003      	beq.n	8004064 <HAL_SPI_TransmitReceive+0x9e>
  {
    hspi->State = HAL_SPI_STATE_BUSY_TX_RX;
 800405c:	68fb      	ldr	r3, [r7, #12]
 800405e:	2205      	movs	r2, #5
 8004060:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }

  /* Set the transaction information */
  hspi->ErrorCode   = HAL_SPI_ERROR_NONE;
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	2200      	movs	r2, #0
 8004068:	655a      	str	r2, [r3, #84]	; 0x54
  hspi->pRxBuffPtr  = (uint8_t *)pRxData;
 800406a:	68fb      	ldr	r3, [r7, #12]
 800406c:	687a      	ldr	r2, [r7, #4]
 800406e:	639a      	str	r2, [r3, #56]	; 0x38
  hspi->RxXferCount = Size;
 8004070:	68fb      	ldr	r3, [r7, #12]
 8004072:	887a      	ldrh	r2, [r7, #2]
 8004074:	87da      	strh	r2, [r3, #62]	; 0x3e
  hspi->RxXferSize  = Size;
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	887a      	ldrh	r2, [r7, #2]
 800407a:	879a      	strh	r2, [r3, #60]	; 0x3c
  hspi->pTxBuffPtr  = (uint8_t *)pTxData;
 800407c:	68fb      	ldr	r3, [r7, #12]
 800407e:	68ba      	ldr	r2, [r7, #8]
 8004080:	631a      	str	r2, [r3, #48]	; 0x30
  hspi->TxXferCount = Size;
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	887a      	ldrh	r2, [r7, #2]
 8004086:	86da      	strh	r2, [r3, #54]	; 0x36
  hspi->TxXferSize  = Size;
 8004088:	68fb      	ldr	r3, [r7, #12]
 800408a:	887a      	ldrh	r2, [r7, #2]
 800408c:	869a      	strh	r2, [r3, #52]	; 0x34

  /*Init field not used in handle to zero */
  hspi->RxISR       = NULL;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	2200      	movs	r2, #0
 8004092:	641a      	str	r2, [r3, #64]	; 0x40
  hspi->TxISR       = NULL;
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	2200      	movs	r2, #0
 8004098:	645a      	str	r2, [r3, #68]	; 0x44
    SPI_RESET_CRC(hspi);
  }
#endif /* USE_SPI_CRC */

  /* Check if the SPI is already enabled */
  if ((hspi->Instance->CR1 & SPI_CR1_SPE) != SPI_CR1_SPE)
 800409a:	68fb      	ldr	r3, [r7, #12]
 800409c:	681b      	ldr	r3, [r3, #0]
 800409e:	681b      	ldr	r3, [r3, #0]
 80040a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040a4:	2b40      	cmp	r3, #64	; 0x40
 80040a6:	d007      	beq.n	80040b8 <HAL_SPI_TransmitReceive+0xf2>
  {
    /* Enable SPI peripheral */
    __HAL_SPI_ENABLE(hspi);
 80040a8:	68fb      	ldr	r3, [r7, #12]
 80040aa:	681b      	ldr	r3, [r3, #0]
 80040ac:	681a      	ldr	r2, [r3, #0]
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	681b      	ldr	r3, [r3, #0]
 80040b2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80040b6:	601a      	str	r2, [r3, #0]
  }

  /* Transmit and Receive data in 16 Bit mode */
  if (hspi->Init.DataSize == SPI_DATASIZE_16BIT)
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	68db      	ldr	r3, [r3, #12]
 80040bc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80040c0:	d17c      	bne.n	80041bc <HAL_SPI_TransmitReceive+0x1f6>
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	685b      	ldr	r3, [r3, #4]
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d002      	beq.n	80040d0 <HAL_SPI_TransmitReceive+0x10a>
 80040ca:	8b7b      	ldrh	r3, [r7, #26]
 80040cc:	2b01      	cmp	r3, #1
 80040ce:	d16a      	bne.n	80041a6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 80040d0:	68fb      	ldr	r3, [r7, #12]
 80040d2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040d4:	881a      	ldrh	r2, [r3, #0]
 80040d6:	68fb      	ldr	r3, [r7, #12]
 80040d8:	681b      	ldr	r3, [r3, #0]
 80040da:	60da      	str	r2, [r3, #12]
      hspi->pTxBuffPtr += sizeof(uint16_t);
 80040dc:	68fb      	ldr	r3, [r7, #12]
 80040de:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040e0:	1c9a      	adds	r2, r3, #2
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80040e6:	68fb      	ldr	r3, [r7, #12]
 80040e8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80040ea:	b29b      	uxth	r3, r3
 80040ec:	3b01      	subs	r3, #1
 80040ee:	b29a      	uxth	r2, r3
 80040f0:	68fb      	ldr	r3, [r7, #12]
 80040f2:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80040f4:	e057      	b.n	80041a6 <HAL_SPI_TransmitReceive+0x1e0>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80040f6:	68fb      	ldr	r3, [r7, #12]
 80040f8:	681b      	ldr	r3, [r3, #0]
 80040fa:	689b      	ldr	r3, [r3, #8]
 80040fc:	f003 0302 	and.w	r3, r3, #2
 8004100:	2b02      	cmp	r3, #2
 8004102:	d11b      	bne.n	800413c <HAL_SPI_TransmitReceive+0x176>
 8004104:	68fb      	ldr	r3, [r7, #12]
 8004106:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004108:	b29b      	uxth	r3, r3
 800410a:	2b00      	cmp	r3, #0
 800410c:	d016      	beq.n	800413c <HAL_SPI_TransmitReceive+0x176>
 800410e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8004110:	2b01      	cmp	r3, #1
 8004112:	d113      	bne.n	800413c <HAL_SPI_TransmitReceive+0x176>
      {
        hspi->Instance->DR = *((uint16_t *)hspi->pTxBuffPtr);
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004118:	881a      	ldrh	r2, [r3, #0]
 800411a:	68fb      	ldr	r3, [r7, #12]
 800411c:	681b      	ldr	r3, [r3, #0]
 800411e:	60da      	str	r2, [r3, #12]
        hspi->pTxBuffPtr += sizeof(uint16_t);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004124:	1c9a      	adds	r2, r3, #2
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800412e:	b29b      	uxth	r3, r3
 8004130:	3b01      	subs	r3, #1
 8004132:	b29a      	uxth	r2, r3
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004138:	2300      	movs	r3, #0
 800413a:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Check RXNE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	689b      	ldr	r3, [r3, #8]
 8004142:	f003 0301 	and.w	r3, r3, #1
 8004146:	2b01      	cmp	r3, #1
 8004148:	d119      	bne.n	800417e <HAL_SPI_TransmitReceive+0x1b8>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800414e:	b29b      	uxth	r3, r3
 8004150:	2b00      	cmp	r3, #0
 8004152:	d014      	beq.n	800417e <HAL_SPI_TransmitReceive+0x1b8>
      {
        *((uint16_t *)hspi->pRxBuffPtr) = (uint16_t)hspi->Instance->DR;
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	68da      	ldr	r2, [r3, #12]
 800415a:	68fb      	ldr	r3, [r7, #12]
 800415c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800415e:	b292      	uxth	r2, r2
 8004160:	801a      	strh	r2, [r3, #0]
        hspi->pRxBuffPtr += sizeof(uint16_t);
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004166:	1c9a      	adds	r2, r3, #2
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800416c:	68fb      	ldr	r3, [r7, #12]
 800416e:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 8004170:	b29b      	uxth	r3, r3
 8004172:	3b01      	subs	r3, #1
 8004174:	b29a      	uxth	r2, r3
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 800417a:	2301      	movs	r3, #1
 800417c:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if (((HAL_GetTick() - tickstart) >=  Timeout) && (Timeout != HAL_MAX_DELAY))
 800417e:	f7fe f8fd 	bl	800237c <HAL_GetTick>
 8004182:	4602      	mov	r2, r0
 8004184:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004186:	1ad3      	subs	r3, r2, r3
 8004188:	6bba      	ldr	r2, [r7, #56]	; 0x38
 800418a:	429a      	cmp	r2, r3
 800418c:	d80b      	bhi.n	80041a6 <HAL_SPI_TransmitReceive+0x1e0>
 800418e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004190:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004194:	d007      	beq.n	80041a6 <HAL_SPI_TransmitReceive+0x1e0>
      {
        errorcode = HAL_TIMEOUT;
 8004196:	2303      	movs	r3, #3
 8004198:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	2201      	movs	r2, #1
 80041a0:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80041a4:	e0b5      	b.n	8004312 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041a6:	68fb      	ldr	r3, [r7, #12]
 80041a8:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041aa:	b29b      	uxth	r3, r3
 80041ac:	2b00      	cmp	r3, #0
 80041ae:	d1a2      	bne.n	80040f6 <HAL_SPI_TransmitReceive+0x130>
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80041b4:	b29b      	uxth	r3, r3
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d19d      	bne.n	80040f6 <HAL_SPI_TransmitReceive+0x130>
 80041ba:	e080      	b.n	80042be <HAL_SPI_TransmitReceive+0x2f8>
    }
  }
  /* Transmit and Receive data in 8 Bit mode */
  else
  {
    if ((hspi->Init.Mode == SPI_MODE_SLAVE) || (initial_TxXferCount == 0x01U))
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	685b      	ldr	r3, [r3, #4]
 80041c0:	2b00      	cmp	r3, #0
 80041c2:	d002      	beq.n	80041ca <HAL_SPI_TransmitReceive+0x204>
 80041c4:	8b7b      	ldrh	r3, [r7, #26]
 80041c6:	2b01      	cmp	r3, #1
 80041c8:	d16f      	bne.n	80042aa <HAL_SPI_TransmitReceive+0x2e4>
    {
      *((__IO uint8_t *)&hspi->Instance->DR) = (*hspi->pTxBuffPtr);
 80041ca:	68fb      	ldr	r3, [r7, #12]
 80041cc:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	330c      	adds	r3, #12
 80041d4:	7812      	ldrb	r2, [r2, #0]
 80041d6:	701a      	strb	r2, [r3, #0]
      hspi->pTxBuffPtr += sizeof(uint8_t);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80041dc:	1c5a      	adds	r2, r3, #1
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	631a      	str	r2, [r3, #48]	; 0x30
      hspi->TxXferCount--;
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80041e6:	b29b      	uxth	r3, r3
 80041e8:	3b01      	subs	r3, #1
 80041ea:	b29a      	uxth	r2, r3
 80041ec:	68fb      	ldr	r3, [r7, #12]
 80041ee:	86da      	strh	r2, [r3, #54]	; 0x36
    }
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80041f0:	e05b      	b.n	80042aa <HAL_SPI_TransmitReceive+0x2e4>
    {
      /* Check TXE flag */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_TXE)) && (hspi->TxXferCount > 0U) && (txallowed == 1U))
 80041f2:	68fb      	ldr	r3, [r7, #12]
 80041f4:	681b      	ldr	r3, [r3, #0]
 80041f6:	689b      	ldr	r3, [r3, #8]
 80041f8:	f003 0302 	and.w	r3, r3, #2
 80041fc:	2b02      	cmp	r3, #2
 80041fe:	d11c      	bne.n	800423a <HAL_SPI_TransmitReceive+0x274>
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 8004204:	b29b      	uxth	r3, r3
 8004206:	2b00      	cmp	r3, #0
 8004208:	d017      	beq.n	800423a <HAL_SPI_TransmitReceive+0x274>
 800420a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800420c:	2b01      	cmp	r3, #1
 800420e:	d114      	bne.n	800423a <HAL_SPI_TransmitReceive+0x274>
      {
        *(__IO uint8_t *)&hspi->Instance->DR = (*hspi->pTxBuffPtr);
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	681b      	ldr	r3, [r3, #0]
 8004218:	330c      	adds	r3, #12
 800421a:	7812      	ldrb	r2, [r2, #0]
 800421c:	701a      	strb	r2, [r3, #0]
        hspi->pTxBuffPtr++;
 800421e:	68fb      	ldr	r3, [r7, #12]
 8004220:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004222:	1c5a      	adds	r2, r3, #1
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	631a      	str	r2, [r3, #48]	; 0x30
        hspi->TxXferCount--;
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 800422c:	b29b      	uxth	r3, r3
 800422e:	3b01      	subs	r3, #1
 8004230:	b29a      	uxth	r2, r3
 8004232:	68fb      	ldr	r3, [r7, #12]
 8004234:	86da      	strh	r2, [r3, #54]	; 0x36
        /* Next Data is a reception (Rx). Tx not allowed */
        txallowed = 0U;
 8004236:	2300      	movs	r3, #0
 8004238:	62fb      	str	r3, [r7, #44]	; 0x2c
        }
#endif /* USE_SPI_CRC */
      }

      /* Wait until RXNE flag is reset */
      if ((__HAL_SPI_GET_FLAG(hspi, SPI_FLAG_RXNE)) && (hspi->RxXferCount > 0U))
 800423a:	68fb      	ldr	r3, [r7, #12]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	689b      	ldr	r3, [r3, #8]
 8004240:	f003 0301 	and.w	r3, r3, #1
 8004244:	2b01      	cmp	r3, #1
 8004246:	d119      	bne.n	800427c <HAL_SPI_TransmitReceive+0x2b6>
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800424c:	b29b      	uxth	r3, r3
 800424e:	2b00      	cmp	r3, #0
 8004250:	d014      	beq.n	800427c <HAL_SPI_TransmitReceive+0x2b6>
      {
        (*(uint8_t *)hspi->pRxBuffPtr) = hspi->Instance->DR;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	68da      	ldr	r2, [r3, #12]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800425c:	b2d2      	uxtb	r2, r2
 800425e:	701a      	strb	r2, [r3, #0]
        hspi->pRxBuffPtr++;
 8004260:	68fb      	ldr	r3, [r7, #12]
 8004262:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004264:	1c5a      	adds	r2, r3, #1
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	639a      	str	r2, [r3, #56]	; 0x38
        hspi->RxXferCount--;
 800426a:	68fb      	ldr	r3, [r7, #12]
 800426c:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 800426e:	b29b      	uxth	r3, r3
 8004270:	3b01      	subs	r3, #1
 8004272:	b29a      	uxth	r2, r3
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	87da      	strh	r2, [r3, #62]	; 0x3e
        /* Next Data is a Transmission (Tx). Tx is allowed */
        txallowed = 1U;
 8004278:	2301      	movs	r3, #1
 800427a:	62fb      	str	r3, [r7, #44]	; 0x2c
      }
      if ((((HAL_GetTick() - tickstart) >=  Timeout) && ((Timeout != HAL_MAX_DELAY))) || (Timeout == 0U))
 800427c:	f7fe f87e 	bl	800237c <HAL_GetTick>
 8004280:	4602      	mov	r2, r0
 8004282:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004284:	1ad3      	subs	r3, r2, r3
 8004286:	6bba      	ldr	r2, [r7, #56]	; 0x38
 8004288:	429a      	cmp	r2, r3
 800428a:	d803      	bhi.n	8004294 <HAL_SPI_TransmitReceive+0x2ce>
 800428c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800428e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004292:	d102      	bne.n	800429a <HAL_SPI_TransmitReceive+0x2d4>
 8004294:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004296:	2b00      	cmp	r3, #0
 8004298:	d107      	bne.n	80042aa <HAL_SPI_TransmitReceive+0x2e4>
      {
        errorcode = HAL_TIMEOUT;
 800429a:	2303      	movs	r3, #3
 800429c:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
        hspi->State = HAL_SPI_STATE_READY;
 80042a0:	68fb      	ldr	r3, [r7, #12]
 80042a2:	2201      	movs	r2, #1
 80042a4:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
        goto error;
 80042a8:	e033      	b.n	8004312 <HAL_SPI_TransmitReceive+0x34c>
    while ((hspi->TxXferCount > 0U) || (hspi->RxXferCount > 0U))
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	8edb      	ldrh	r3, [r3, #54]	; 0x36
 80042ae:	b29b      	uxth	r3, r3
 80042b0:	2b00      	cmp	r3, #0
 80042b2:	d19e      	bne.n	80041f2 <HAL_SPI_TransmitReceive+0x22c>
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	8fdb      	ldrh	r3, [r3, #62]	; 0x3e
 80042b8:	b29b      	uxth	r3, r3
 80042ba:	2b00      	cmp	r3, #0
 80042bc:	d199      	bne.n	80041f2 <HAL_SPI_TransmitReceive+0x22c>
    }
  }
#endif /* USE_SPI_CRC */

  /* Check the end of the transaction */
  if (SPI_EndRxTxTransaction(hspi, Timeout, tickstart) != HAL_OK)
 80042be:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80042c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80042c2:	68f8      	ldr	r0, [r7, #12]
 80042c4:	f000 f916 	bl	80044f4 <SPI_EndRxTxTransaction>
 80042c8:	4603      	mov	r3, r0
 80042ca:	2b00      	cmp	r3, #0
 80042cc:	d006      	beq.n	80042dc <HAL_SPI_TransmitReceive+0x316>
  {
    errorcode = HAL_ERROR;
 80042ce:	2301      	movs	r3, #1
 80042d0:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    hspi->ErrorCode = HAL_SPI_ERROR_FLAG;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2220      	movs	r2, #32
 80042d8:	655a      	str	r2, [r3, #84]	; 0x54
    goto error;
 80042da:	e01a      	b.n	8004312 <HAL_SPI_TransmitReceive+0x34c>
  }

  /* Clear overrun flag in 2 Lines communication mode because received is not read */
  if (hspi->Init.Direction == SPI_DIRECTION_2LINES)
 80042dc:	68fb      	ldr	r3, [r7, #12]
 80042de:	689b      	ldr	r3, [r3, #8]
 80042e0:	2b00      	cmp	r3, #0
 80042e2:	d10a      	bne.n	80042fa <HAL_SPI_TransmitReceive+0x334>
  {
    __HAL_SPI_CLEAR_OVRFLAG(hspi);
 80042e4:	2300      	movs	r3, #0
 80042e6:	617b      	str	r3, [r7, #20]
 80042e8:	68fb      	ldr	r3, [r7, #12]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	68db      	ldr	r3, [r3, #12]
 80042ee:	617b      	str	r3, [r7, #20]
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	689b      	ldr	r3, [r3, #8]
 80042f6:	617b      	str	r3, [r7, #20]
 80042f8:	697b      	ldr	r3, [r7, #20]
  }

  if (hspi->ErrorCode != HAL_SPI_ERROR_NONE)
 80042fa:	68fb      	ldr	r3, [r7, #12]
 80042fc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d003      	beq.n	800430a <HAL_SPI_TransmitReceive+0x344>
  {
    errorcode = HAL_ERROR;
 8004302:	2301      	movs	r3, #1
 8004304:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
 8004308:	e003      	b.n	8004312 <HAL_SPI_TransmitReceive+0x34c>
  }
  else
  {
    hspi->State = HAL_SPI_STATE_READY;
 800430a:	68fb      	ldr	r3, [r7, #12]
 800430c:	2201      	movs	r2, #1
 800430e:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51
  }
  
error :
  __HAL_UNLOCK(hspi);
 8004312:	68fb      	ldr	r3, [r7, #12]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50
  return errorcode;
 800431a:	f897 302b 	ldrb.w	r3, [r7, #43]	; 0x2b
}
 800431e:	4618      	mov	r0, r3
 8004320:	3730      	adds	r7, #48	; 0x30
 8004322:	46bd      	mov	sp, r7
 8004324:	bd80      	pop	{r7, pc}

08004326 <HAL_SPI_GetState>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval SPI state
  */
HAL_SPI_StateTypeDef HAL_SPI_GetState(SPI_HandleTypeDef *hspi)
{
 8004326:	b480      	push	{r7}
 8004328:	b083      	sub	sp, #12
 800432a:	af00      	add	r7, sp, #0
 800432c:	6078      	str	r0, [r7, #4]
  /* Return SPI handle state */
  return hspi->State;
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	f893 3051 	ldrb.w	r3, [r3, #81]	; 0x51
 8004334:	b2db      	uxtb	r3, r3
}
 8004336:	4618      	mov	r0, r3
 8004338:	370c      	adds	r7, #12
 800433a:	46bd      	mov	sp, r7
 800433c:	bc80      	pop	{r7}
 800433e:	4770      	bx	lr

08004340 <SPI_WaitFlagStateUntilTimeout>:
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_WaitFlagStateUntilTimeout(SPI_HandleTypeDef *hspi, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout, uint32_t Tickstart)
{
 8004340:	b580      	push	{r7, lr}
 8004342:	b088      	sub	sp, #32
 8004344:	af00      	add	r7, sp, #0
 8004346:	60f8      	str	r0, [r7, #12]
 8004348:	60b9      	str	r1, [r7, #8]
 800434a:	603b      	str	r3, [r7, #0]
 800434c:	4613      	mov	r3, r2
 800434e:	71fb      	strb	r3, [r7, #7]
  __IO uint32_t count;
  uint32_t tmp_timeout;
  uint32_t tmp_tickstart;

  /* Adjust Timeout value  in case of end of transfer */
  tmp_timeout   = Timeout - (HAL_GetTick() - Tickstart);
 8004350:	f7fe f814 	bl	800237c <HAL_GetTick>
 8004354:	4602      	mov	r2, r0
 8004356:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8004358:	1a9b      	subs	r3, r3, r2
 800435a:	683a      	ldr	r2, [r7, #0]
 800435c:	4413      	add	r3, r2
 800435e:	61fb      	str	r3, [r7, #28]
  tmp_tickstart = HAL_GetTick();
 8004360:	f7fe f80c 	bl	800237c <HAL_GetTick>
 8004364:	61b8      	str	r0, [r7, #24]

  /* Calculate Timeout based on a software loop to avoid blocking issue if Systick is disabled */
  count = tmp_timeout * ((SystemCoreClock * 32U) >> 20U);
 8004366:	4b39      	ldr	r3, [pc, #228]	; (800444c <SPI_WaitFlagStateUntilTimeout+0x10c>)
 8004368:	681b      	ldr	r3, [r3, #0]
 800436a:	015b      	lsls	r3, r3, #5
 800436c:	0d1b      	lsrs	r3, r3, #20
 800436e:	69fa      	ldr	r2, [r7, #28]
 8004370:	fb02 f303 	mul.w	r3, r2, r3
 8004374:	617b      	str	r3, [r7, #20]

  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004376:	e054      	b.n	8004422 <SPI_WaitFlagStateUntilTimeout+0xe2>
  {
    if (Timeout != HAL_MAX_DELAY)
 8004378:	683b      	ldr	r3, [r7, #0]
 800437a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800437e:	d050      	beq.n	8004422 <SPI_WaitFlagStateUntilTimeout+0xe2>
    {
      if (((HAL_GetTick() - tmp_tickstart) >= tmp_timeout) || (tmp_timeout == 0U))
 8004380:	f7fd fffc 	bl	800237c <HAL_GetTick>
 8004384:	4602      	mov	r2, r0
 8004386:	69bb      	ldr	r3, [r7, #24]
 8004388:	1ad3      	subs	r3, r2, r3
 800438a:	69fa      	ldr	r2, [r7, #28]
 800438c:	429a      	cmp	r2, r3
 800438e:	d902      	bls.n	8004396 <SPI_WaitFlagStateUntilTimeout+0x56>
 8004390:	69fb      	ldr	r3, [r7, #28]
 8004392:	2b00      	cmp	r3, #0
 8004394:	d13d      	bne.n	8004412 <SPI_WaitFlagStateUntilTimeout+0xd2>
        /* Disable the SPI and reset the CRC: the CRC value should be cleared
           on both master and slave sides in order to resynchronize the master
           and slave for their respective CRC calculation */

        /* Disable TXE, RXNE and ERR interrupts for the interrupt process */
        __HAL_SPI_DISABLE_IT(hspi, (SPI_IT_TXE | SPI_IT_RXNE | SPI_IT_ERR));
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	681b      	ldr	r3, [r3, #0]
 800439a:	685a      	ldr	r2, [r3, #4]
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	681b      	ldr	r3, [r3, #0]
 80043a0:	f022 02e0 	bic.w	r2, r2, #224	; 0xe0
 80043a4:	605a      	str	r2, [r3, #4]

        if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 80043a6:	68fb      	ldr	r3, [r7, #12]
 80043a8:	685b      	ldr	r3, [r3, #4]
 80043aa:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 80043ae:	d111      	bne.n	80043d4 <SPI_WaitFlagStateUntilTimeout+0x94>
 80043b0:	68fb      	ldr	r3, [r7, #12]
 80043b2:	689b      	ldr	r3, [r3, #8]
 80043b4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80043b8:	d004      	beq.n	80043c4 <SPI_WaitFlagStateUntilTimeout+0x84>
                                                     || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 80043ba:	68fb      	ldr	r3, [r7, #12]
 80043bc:	689b      	ldr	r3, [r3, #8]
 80043be:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 80043c2:	d107      	bne.n	80043d4 <SPI_WaitFlagStateUntilTimeout+0x94>
        {
          /* Disable SPI peripheral */
          __HAL_SPI_DISABLE(hspi);
 80043c4:	68fb      	ldr	r3, [r7, #12]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	681a      	ldr	r2, [r3, #0]
 80043ca:	68fb      	ldr	r3, [r7, #12]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80043d2:	601a      	str	r2, [r3, #0]
        }

        /* Reset CRC Calculation */
        if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
 80043d4:	68fb      	ldr	r3, [r7, #12]
 80043d6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80043d8:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80043dc:	d10f      	bne.n	80043fe <SPI_WaitFlagStateUntilTimeout+0xbe>
        {
          SPI_RESET_CRC(hspi);
 80043de:	68fb      	ldr	r3, [r7, #12]
 80043e0:	681b      	ldr	r3, [r3, #0]
 80043e2:	681a      	ldr	r2, [r3, #0]
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80043ec:	601a      	str	r2, [r3, #0]
 80043ee:	68fb      	ldr	r3, [r7, #12]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681a      	ldr	r2, [r3, #0]
 80043f4:	68fb      	ldr	r3, [r7, #12]
 80043f6:	681b      	ldr	r3, [r3, #0]
 80043f8:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80043fc:	601a      	str	r2, [r3, #0]
        }

        hspi->State = HAL_SPI_STATE_READY;
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	2201      	movs	r2, #1
 8004402:	f883 2051 	strb.w	r2, [r3, #81]	; 0x51

        /* Process Unlocked */
        __HAL_UNLOCK(hspi);
 8004406:	68fb      	ldr	r3, [r7, #12]
 8004408:	2200      	movs	r2, #0
 800440a:	f883 2050 	strb.w	r2, [r3, #80]	; 0x50

        return HAL_TIMEOUT;
 800440e:	2303      	movs	r3, #3
 8004410:	e017      	b.n	8004442 <SPI_WaitFlagStateUntilTimeout+0x102>
      }
      /* If Systick is disabled or not incremented, deactivate timeout to go in disable loop procedure */
      if (count == 0U)
 8004412:	697b      	ldr	r3, [r7, #20]
 8004414:	2b00      	cmp	r3, #0
 8004416:	d101      	bne.n	800441c <SPI_WaitFlagStateUntilTimeout+0xdc>
      {
        tmp_timeout = 0U;
 8004418:	2300      	movs	r3, #0
 800441a:	61fb      	str	r3, [r7, #28]
      }
      count--;
 800441c:	697b      	ldr	r3, [r7, #20]
 800441e:	3b01      	subs	r3, #1
 8004420:	617b      	str	r3, [r7, #20]
  while ((__HAL_SPI_GET_FLAG(hspi, Flag) ? SET : RESET) != State)
 8004422:	68fb      	ldr	r3, [r7, #12]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	689a      	ldr	r2, [r3, #8]
 8004428:	68bb      	ldr	r3, [r7, #8]
 800442a:	4013      	ands	r3, r2
 800442c:	68ba      	ldr	r2, [r7, #8]
 800442e:	429a      	cmp	r2, r3
 8004430:	bf0c      	ite	eq
 8004432:	2301      	moveq	r3, #1
 8004434:	2300      	movne	r3, #0
 8004436:	b2db      	uxtb	r3, r3
 8004438:	461a      	mov	r2, r3
 800443a:	79fb      	ldrb	r3, [r7, #7]
 800443c:	429a      	cmp	r2, r3
 800443e:	d19b      	bne.n	8004378 <SPI_WaitFlagStateUntilTimeout+0x38>
    }
  }

  return HAL_OK;
 8004440:	2300      	movs	r3, #0
}
 8004442:	4618      	mov	r0, r3
 8004444:	3720      	adds	r7, #32
 8004446:	46bd      	mov	sp, r7
 8004448:	bd80      	pop	{r7, pc}
 800444a:	bf00      	nop
 800444c:	2000001c 	.word	0x2000001c

08004450 <SPI_EndRxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTransaction(SPI_HandleTypeDef *hspi,  uint32_t Timeout, uint32_t Tickstart)
{
 8004450:	b580      	push	{r7, lr}
 8004452:	b086      	sub	sp, #24
 8004454:	af02      	add	r7, sp, #8
 8004456:	60f8      	str	r0, [r7, #12]
 8004458:	60b9      	str	r1, [r7, #8]
 800445a:	607a      	str	r2, [r7, #4]
  if ((hspi->Init.Mode == SPI_MODE_MASTER) && ((hspi->Init.Direction == SPI_DIRECTION_1LINE)
 800445c:	68fb      	ldr	r3, [r7, #12]
 800445e:	685b      	ldr	r3, [r3, #4]
 8004460:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004464:	d111      	bne.n	800448a <SPI_EndRxTransaction+0x3a>
 8004466:	68fb      	ldr	r3, [r7, #12]
 8004468:	689b      	ldr	r3, [r3, #8]
 800446a:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800446e:	d004      	beq.n	800447a <SPI_EndRxTransaction+0x2a>
                                               || (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY)))
 8004470:	68fb      	ldr	r3, [r7, #12]
 8004472:	689b      	ldr	r3, [r3, #8]
 8004474:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 8004478:	d107      	bne.n	800448a <SPI_EndRxTransaction+0x3a>
  {
    /* Disable SPI peripheral */
    __HAL_SPI_DISABLE(hspi);
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	681a      	ldr	r2, [r3, #0]
 8004480:	68fb      	ldr	r3, [r7, #12]
 8004482:	681b      	ldr	r3, [r3, #0]
 8004484:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8004488:	601a      	str	r2, [r3, #0]
  }

  if ((hspi->Init.Mode == SPI_MODE_MASTER) && (hspi->Init.Direction == SPI_DIRECTION_2LINES_RXONLY))
 800448a:	68fb      	ldr	r3, [r7, #12]
 800448c:	685b      	ldr	r3, [r3, #4]
 800448e:	f5b3 7f82 	cmp.w	r3, #260	; 0x104
 8004492:	d117      	bne.n	80044c4 <SPI_EndRxTransaction+0x74>
 8004494:	68fb      	ldr	r3, [r7, #12]
 8004496:	689b      	ldr	r3, [r3, #8]
 8004498:	f5b3 6f80 	cmp.w	r3, #1024	; 0x400
 800449c:	d112      	bne.n	80044c4 <SPI_EndRxTransaction+0x74>
  {
    /* Wait the RXNE reset */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_RXNE, RESET, Timeout, Tickstart) != HAL_OK)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	9300      	str	r3, [sp, #0]
 80044a2:	68bb      	ldr	r3, [r7, #8]
 80044a4:	2200      	movs	r2, #0
 80044a6:	2101      	movs	r1, #1
 80044a8:	68f8      	ldr	r0, [r7, #12]
 80044aa:	f7ff ff49 	bl	8004340 <SPI_WaitFlagStateUntilTimeout>
 80044ae:	4603      	mov	r3, r0
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	d01a      	beq.n	80044ea <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044b8:	f043 0220 	orr.w	r2, r3, #32
 80044bc:	68fb      	ldr	r3, [r7, #12]
 80044be:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80044c0:	2303      	movs	r3, #3
 80044c2:	e013      	b.n	80044ec <SPI_EndRxTransaction+0x9c>
    }
  }
  else
  {
    /* Control the BSY flag */
    if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	9300      	str	r3, [sp, #0]
 80044c8:	68bb      	ldr	r3, [r7, #8]
 80044ca:	2200      	movs	r2, #0
 80044cc:	2180      	movs	r1, #128	; 0x80
 80044ce:	68f8      	ldr	r0, [r7, #12]
 80044d0:	f7ff ff36 	bl	8004340 <SPI_WaitFlagStateUntilTimeout>
 80044d4:	4603      	mov	r3, r0
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d007      	beq.n	80044ea <SPI_EndRxTransaction+0x9a>
    {
      SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 80044da:	68fb      	ldr	r3, [r7, #12]
 80044dc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80044de:	f043 0220 	orr.w	r2, r3, #32
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	655a      	str	r2, [r3, #84]	; 0x54
      return HAL_TIMEOUT;
 80044e6:	2303      	movs	r3, #3
 80044e8:	e000      	b.n	80044ec <SPI_EndRxTransaction+0x9c>
    }
  }
  return HAL_OK;
 80044ea:	2300      	movs	r3, #0
}
 80044ec:	4618      	mov	r0, r3
 80044ee:	3710      	adds	r7, #16
 80044f0:	46bd      	mov	sp, r7
 80044f2:	bd80      	pop	{r7, pc}

080044f4 <SPI_EndRxTxTransaction>:
  * @param  Timeout Timeout duration
  * @param  Tickstart tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef SPI_EndRxTxTransaction(SPI_HandleTypeDef *hspi, uint32_t Timeout, uint32_t Tickstart)
{
 80044f4:	b580      	push	{r7, lr}
 80044f6:	b086      	sub	sp, #24
 80044f8:	af02      	add	r7, sp, #8
 80044fa:	60f8      	str	r0, [r7, #12]
 80044fc:	60b9      	str	r1, [r7, #8]
 80044fe:	607a      	str	r2, [r7, #4]
  /* Control the BSY flag */
  if (SPI_WaitFlagStateUntilTimeout(hspi, SPI_FLAG_BSY, RESET, Timeout, Tickstart) != HAL_OK)
 8004500:	687b      	ldr	r3, [r7, #4]
 8004502:	9300      	str	r3, [sp, #0]
 8004504:	68bb      	ldr	r3, [r7, #8]
 8004506:	2200      	movs	r2, #0
 8004508:	2180      	movs	r1, #128	; 0x80
 800450a:	68f8      	ldr	r0, [r7, #12]
 800450c:	f7ff ff18 	bl	8004340 <SPI_WaitFlagStateUntilTimeout>
 8004510:	4603      	mov	r3, r0
 8004512:	2b00      	cmp	r3, #0
 8004514:	d007      	beq.n	8004526 <SPI_EndRxTxTransaction+0x32>
  {
    SET_BIT(hspi->ErrorCode, HAL_SPI_ERROR_FLAG);
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800451a:	f043 0220 	orr.w	r2, r3, #32
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_TIMEOUT;
 8004522:	2303      	movs	r3, #3
 8004524:	e000      	b.n	8004528 <SPI_EndRxTxTransaction+0x34>
  }
  return HAL_OK;
 8004526:	2300      	movs	r3, #0
}
 8004528:	4618      	mov	r0, r3
 800452a:	3710      	adds	r7, #16
 800452c:	46bd      	mov	sp, r7
 800452e:	bd80      	pop	{r7, pc}

08004530 <__cvt>:
 8004530:	2b00      	cmp	r3, #0
 8004532:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004536:	461f      	mov	r7, r3
 8004538:	bfbb      	ittet	lt
 800453a:	f103 4300 	addlt.w	r3, r3, #2147483648	; 0x80000000
 800453e:	461f      	movlt	r7, r3
 8004540:	2300      	movge	r3, #0
 8004542:	232d      	movlt	r3, #45	; 0x2d
 8004544:	b088      	sub	sp, #32
 8004546:	4614      	mov	r4, r2
 8004548:	9a12      	ldr	r2, [sp, #72]	; 0x48
 800454a:	9d10      	ldr	r5, [sp, #64]	; 0x40
 800454c:	7013      	strb	r3, [r2, #0]
 800454e:	9b14      	ldr	r3, [sp, #80]	; 0x50
 8004550:	f8dd a04c 	ldr.w	sl, [sp, #76]	; 0x4c
 8004554:	f023 0820 	bic.w	r8, r3, #32
 8004558:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 800455c:	d005      	beq.n	800456a <__cvt+0x3a>
 800455e:	f1b8 0f45 	cmp.w	r8, #69	; 0x45
 8004562:	d100      	bne.n	8004566 <__cvt+0x36>
 8004564:	3501      	adds	r5, #1
 8004566:	2302      	movs	r3, #2
 8004568:	e000      	b.n	800456c <__cvt+0x3c>
 800456a:	2303      	movs	r3, #3
 800456c:	aa07      	add	r2, sp, #28
 800456e:	9204      	str	r2, [sp, #16]
 8004570:	aa06      	add	r2, sp, #24
 8004572:	e9cd a202 	strd	sl, r2, [sp, #8]
 8004576:	e9cd 3500 	strd	r3, r5, [sp]
 800457a:	4622      	mov	r2, r4
 800457c:	463b      	mov	r3, r7
 800457e:	f000 fe5f 	bl	8005240 <_dtoa_r>
 8004582:	f1b8 0f47 	cmp.w	r8, #71	; 0x47
 8004586:	4606      	mov	r6, r0
 8004588:	d102      	bne.n	8004590 <__cvt+0x60>
 800458a:	9b11      	ldr	r3, [sp, #68]	; 0x44
 800458c:	07db      	lsls	r3, r3, #31
 800458e:	d522      	bpl.n	80045d6 <__cvt+0xa6>
 8004590:	f1b8 0f46 	cmp.w	r8, #70	; 0x46
 8004594:	eb06 0905 	add.w	r9, r6, r5
 8004598:	d110      	bne.n	80045bc <__cvt+0x8c>
 800459a:	7833      	ldrb	r3, [r6, #0]
 800459c:	2b30      	cmp	r3, #48	; 0x30
 800459e:	d10a      	bne.n	80045b6 <__cvt+0x86>
 80045a0:	2200      	movs	r2, #0
 80045a2:	2300      	movs	r3, #0
 80045a4:	4620      	mov	r0, r4
 80045a6:	4639      	mov	r1, r7
 80045a8:	f7fc fab2 	bl	8000b10 <__aeabi_dcmpeq>
 80045ac:	b918      	cbnz	r0, 80045b6 <__cvt+0x86>
 80045ae:	f1c5 0501 	rsb	r5, r5, #1
 80045b2:	f8ca 5000 	str.w	r5, [sl]
 80045b6:	f8da 3000 	ldr.w	r3, [sl]
 80045ba:	4499      	add	r9, r3
 80045bc:	2200      	movs	r2, #0
 80045be:	2300      	movs	r3, #0
 80045c0:	4620      	mov	r0, r4
 80045c2:	4639      	mov	r1, r7
 80045c4:	f7fc faa4 	bl	8000b10 <__aeabi_dcmpeq>
 80045c8:	b108      	cbz	r0, 80045ce <__cvt+0x9e>
 80045ca:	f8cd 901c 	str.w	r9, [sp, #28]
 80045ce:	2230      	movs	r2, #48	; 0x30
 80045d0:	9b07      	ldr	r3, [sp, #28]
 80045d2:	454b      	cmp	r3, r9
 80045d4:	d307      	bcc.n	80045e6 <__cvt+0xb6>
 80045d6:	4630      	mov	r0, r6
 80045d8:	9b07      	ldr	r3, [sp, #28]
 80045da:	9a15      	ldr	r2, [sp, #84]	; 0x54
 80045dc:	1b9b      	subs	r3, r3, r6
 80045de:	6013      	str	r3, [r2, #0]
 80045e0:	b008      	add	sp, #32
 80045e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80045e6:	1c59      	adds	r1, r3, #1
 80045e8:	9107      	str	r1, [sp, #28]
 80045ea:	701a      	strb	r2, [r3, #0]
 80045ec:	e7f0      	b.n	80045d0 <__cvt+0xa0>

080045ee <__exponent>:
 80045ee:	4603      	mov	r3, r0
 80045f0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80045f2:	2900      	cmp	r1, #0
 80045f4:	f803 2b02 	strb.w	r2, [r3], #2
 80045f8:	bfb6      	itet	lt
 80045fa:	222d      	movlt	r2, #45	; 0x2d
 80045fc:	222b      	movge	r2, #43	; 0x2b
 80045fe:	4249      	neglt	r1, r1
 8004600:	2909      	cmp	r1, #9
 8004602:	7042      	strb	r2, [r0, #1]
 8004604:	dd2a      	ble.n	800465c <__exponent+0x6e>
 8004606:	f10d 0207 	add.w	r2, sp, #7
 800460a:	4617      	mov	r7, r2
 800460c:	260a      	movs	r6, #10
 800460e:	fb91 f5f6 	sdiv	r5, r1, r6
 8004612:	4694      	mov	ip, r2
 8004614:	fb06 1415 	mls	r4, r6, r5, r1
 8004618:	3430      	adds	r4, #48	; 0x30
 800461a:	f80c 4c01 	strb.w	r4, [ip, #-1]
 800461e:	460c      	mov	r4, r1
 8004620:	2c63      	cmp	r4, #99	; 0x63
 8004622:	4629      	mov	r1, r5
 8004624:	f102 32ff 	add.w	r2, r2, #4294967295
 8004628:	dcf1      	bgt.n	800460e <__exponent+0x20>
 800462a:	3130      	adds	r1, #48	; 0x30
 800462c:	f1ac 0402 	sub.w	r4, ip, #2
 8004630:	f802 1c01 	strb.w	r1, [r2, #-1]
 8004634:	4622      	mov	r2, r4
 8004636:	1c41      	adds	r1, r0, #1
 8004638:	42ba      	cmp	r2, r7
 800463a:	d30a      	bcc.n	8004652 <__exponent+0x64>
 800463c:	f10d 0209 	add.w	r2, sp, #9
 8004640:	eba2 020c 	sub.w	r2, r2, ip
 8004644:	42bc      	cmp	r4, r7
 8004646:	bf88      	it	hi
 8004648:	2200      	movhi	r2, #0
 800464a:	4413      	add	r3, r2
 800464c:	1a18      	subs	r0, r3, r0
 800464e:	b003      	add	sp, #12
 8004650:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8004652:	f812 5b01 	ldrb.w	r5, [r2], #1
 8004656:	f801 5f01 	strb.w	r5, [r1, #1]!
 800465a:	e7ed      	b.n	8004638 <__exponent+0x4a>
 800465c:	2330      	movs	r3, #48	; 0x30
 800465e:	3130      	adds	r1, #48	; 0x30
 8004660:	7083      	strb	r3, [r0, #2]
 8004662:	70c1      	strb	r1, [r0, #3]
 8004664:	1d03      	adds	r3, r0, #4
 8004666:	e7f1      	b.n	800464c <__exponent+0x5e>

08004668 <_printf_float>:
 8004668:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800466c:	b091      	sub	sp, #68	; 0x44
 800466e:	460c      	mov	r4, r1
 8004670:	f8dd 8068 	ldr.w	r8, [sp, #104]	; 0x68
 8004674:	4616      	mov	r6, r2
 8004676:	461f      	mov	r7, r3
 8004678:	4605      	mov	r5, r0
 800467a:	f000 fcd3 	bl	8005024 <_localeconv_r>
 800467e:	6803      	ldr	r3, [r0, #0]
 8004680:	4618      	mov	r0, r3
 8004682:	9309      	str	r3, [sp, #36]	; 0x24
 8004684:	f7fb fd64 	bl	8000150 <strlen>
 8004688:	2300      	movs	r3, #0
 800468a:	930e      	str	r3, [sp, #56]	; 0x38
 800468c:	f8d8 3000 	ldr.w	r3, [r8]
 8004690:	900a      	str	r0, [sp, #40]	; 0x28
 8004692:	3307      	adds	r3, #7
 8004694:	f023 0307 	bic.w	r3, r3, #7
 8004698:	f103 0208 	add.w	r2, r3, #8
 800469c:	f894 9018 	ldrb.w	r9, [r4, #24]
 80046a0:	f8d4 b000 	ldr.w	fp, [r4]
 80046a4:	f8c8 2000 	str.w	r2, [r8]
 80046a8:	e9d3 a800 	ldrd	sl, r8, [r3]
 80046ac:	4652      	mov	r2, sl
 80046ae:	4643      	mov	r3, r8
 80046b0:	e9c4 2312 	strd	r2, r3, [r4, #72]	; 0x48
 80046b4:	f028 4300 	bic.w	r3, r8, #2147483648	; 0x80000000
 80046b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80046ba:	f04f 32ff 	mov.w	r2, #4294967295
 80046be:	4650      	mov	r0, sl
 80046c0:	4b9c      	ldr	r3, [pc, #624]	; (8004934 <_printf_float+0x2cc>)
 80046c2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80046c4:	f7fc fa56 	bl	8000b74 <__aeabi_dcmpun>
 80046c8:	bb70      	cbnz	r0, 8004728 <_printf_float+0xc0>
 80046ca:	f04f 32ff 	mov.w	r2, #4294967295
 80046ce:	4650      	mov	r0, sl
 80046d0:	4b98      	ldr	r3, [pc, #608]	; (8004934 <_printf_float+0x2cc>)
 80046d2:	990b      	ldr	r1, [sp, #44]	; 0x2c
 80046d4:	f7fc fa30 	bl	8000b38 <__aeabi_dcmple>
 80046d8:	bb30      	cbnz	r0, 8004728 <_printf_float+0xc0>
 80046da:	2200      	movs	r2, #0
 80046dc:	2300      	movs	r3, #0
 80046de:	4650      	mov	r0, sl
 80046e0:	4641      	mov	r1, r8
 80046e2:	f7fc fa1f 	bl	8000b24 <__aeabi_dcmplt>
 80046e6:	b110      	cbz	r0, 80046ee <_printf_float+0x86>
 80046e8:	232d      	movs	r3, #45	; 0x2d
 80046ea:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80046ee:	4a92      	ldr	r2, [pc, #584]	; (8004938 <_printf_float+0x2d0>)
 80046f0:	4b92      	ldr	r3, [pc, #584]	; (800493c <_printf_float+0x2d4>)
 80046f2:	f1b9 0f47 	cmp.w	r9, #71	; 0x47
 80046f6:	bf94      	ite	ls
 80046f8:	4690      	movls	r8, r2
 80046fa:	4698      	movhi	r8, r3
 80046fc:	2303      	movs	r3, #3
 80046fe:	f04f 0a00 	mov.w	sl, #0
 8004702:	6123      	str	r3, [r4, #16]
 8004704:	f02b 0304 	bic.w	r3, fp, #4
 8004708:	6023      	str	r3, [r4, #0]
 800470a:	4633      	mov	r3, r6
 800470c:	4621      	mov	r1, r4
 800470e:	4628      	mov	r0, r5
 8004710:	9700      	str	r7, [sp, #0]
 8004712:	aa0f      	add	r2, sp, #60	; 0x3c
 8004714:	f000 f9d6 	bl	8004ac4 <_printf_common>
 8004718:	3001      	adds	r0, #1
 800471a:	f040 8090 	bne.w	800483e <_printf_float+0x1d6>
 800471e:	f04f 30ff 	mov.w	r0, #4294967295
 8004722:	b011      	add	sp, #68	; 0x44
 8004724:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8004728:	4652      	mov	r2, sl
 800472a:	4643      	mov	r3, r8
 800472c:	4650      	mov	r0, sl
 800472e:	4641      	mov	r1, r8
 8004730:	f7fc fa20 	bl	8000b74 <__aeabi_dcmpun>
 8004734:	b148      	cbz	r0, 800474a <_printf_float+0xe2>
 8004736:	f1b8 0f00 	cmp.w	r8, #0
 800473a:	bfb8      	it	lt
 800473c:	232d      	movlt	r3, #45	; 0x2d
 800473e:	4a80      	ldr	r2, [pc, #512]	; (8004940 <_printf_float+0x2d8>)
 8004740:	bfb8      	it	lt
 8004742:	f884 3043 	strblt.w	r3, [r4, #67]	; 0x43
 8004746:	4b7f      	ldr	r3, [pc, #508]	; (8004944 <_printf_float+0x2dc>)
 8004748:	e7d3      	b.n	80046f2 <_printf_float+0x8a>
 800474a:	6863      	ldr	r3, [r4, #4]
 800474c:	f009 01df 	and.w	r1, r9, #223	; 0xdf
 8004750:	1c5a      	adds	r2, r3, #1
 8004752:	d142      	bne.n	80047da <_printf_float+0x172>
 8004754:	2306      	movs	r3, #6
 8004756:	6063      	str	r3, [r4, #4]
 8004758:	2200      	movs	r2, #0
 800475a:	9206      	str	r2, [sp, #24]
 800475c:	aa0e      	add	r2, sp, #56	; 0x38
 800475e:	e9cd 9204 	strd	r9, r2, [sp, #16]
 8004762:	aa0d      	add	r2, sp, #52	; 0x34
 8004764:	f44b 6380 	orr.w	r3, fp, #1024	; 0x400
 8004768:	9203      	str	r2, [sp, #12]
 800476a:	f10d 0233 	add.w	r2, sp, #51	; 0x33
 800476e:	e9cd 3201 	strd	r3, r2, [sp, #4]
 8004772:	6023      	str	r3, [r4, #0]
 8004774:	6863      	ldr	r3, [r4, #4]
 8004776:	4652      	mov	r2, sl
 8004778:	9300      	str	r3, [sp, #0]
 800477a:	4628      	mov	r0, r5
 800477c:	4643      	mov	r3, r8
 800477e:	910b      	str	r1, [sp, #44]	; 0x2c
 8004780:	f7ff fed6 	bl	8004530 <__cvt>
 8004784:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8004786:	4680      	mov	r8, r0
 8004788:	2947      	cmp	r1, #71	; 0x47
 800478a:	990d      	ldr	r1, [sp, #52]	; 0x34
 800478c:	d108      	bne.n	80047a0 <_printf_float+0x138>
 800478e:	1cc8      	adds	r0, r1, #3
 8004790:	db02      	blt.n	8004798 <_printf_float+0x130>
 8004792:	6863      	ldr	r3, [r4, #4]
 8004794:	4299      	cmp	r1, r3
 8004796:	dd40      	ble.n	800481a <_printf_float+0x1b2>
 8004798:	f1a9 0902 	sub.w	r9, r9, #2
 800479c:	fa5f f989 	uxtb.w	r9, r9
 80047a0:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 80047a4:	d81f      	bhi.n	80047e6 <_printf_float+0x17e>
 80047a6:	464a      	mov	r2, r9
 80047a8:	3901      	subs	r1, #1
 80047aa:	f104 0050 	add.w	r0, r4, #80	; 0x50
 80047ae:	910d      	str	r1, [sp, #52]	; 0x34
 80047b0:	f7ff ff1d 	bl	80045ee <__exponent>
 80047b4:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 80047b6:	4682      	mov	sl, r0
 80047b8:	1813      	adds	r3, r2, r0
 80047ba:	2a01      	cmp	r2, #1
 80047bc:	6123      	str	r3, [r4, #16]
 80047be:	dc02      	bgt.n	80047c6 <_printf_float+0x15e>
 80047c0:	6822      	ldr	r2, [r4, #0]
 80047c2:	07d2      	lsls	r2, r2, #31
 80047c4:	d501      	bpl.n	80047ca <_printf_float+0x162>
 80047c6:	3301      	adds	r3, #1
 80047c8:	6123      	str	r3, [r4, #16]
 80047ca:	f89d 3033 	ldrb.w	r3, [sp, #51]	; 0x33
 80047ce:	2b00      	cmp	r3, #0
 80047d0:	d09b      	beq.n	800470a <_printf_float+0xa2>
 80047d2:	232d      	movs	r3, #45	; 0x2d
 80047d4:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 80047d8:	e797      	b.n	800470a <_printf_float+0xa2>
 80047da:	2947      	cmp	r1, #71	; 0x47
 80047dc:	d1bc      	bne.n	8004758 <_printf_float+0xf0>
 80047de:	2b00      	cmp	r3, #0
 80047e0:	d1ba      	bne.n	8004758 <_printf_float+0xf0>
 80047e2:	2301      	movs	r3, #1
 80047e4:	e7b7      	b.n	8004756 <_printf_float+0xee>
 80047e6:	f1b9 0f66 	cmp.w	r9, #102	; 0x66
 80047ea:	d118      	bne.n	800481e <_printf_float+0x1b6>
 80047ec:	2900      	cmp	r1, #0
 80047ee:	6863      	ldr	r3, [r4, #4]
 80047f0:	dd0b      	ble.n	800480a <_printf_float+0x1a2>
 80047f2:	6121      	str	r1, [r4, #16]
 80047f4:	b913      	cbnz	r3, 80047fc <_printf_float+0x194>
 80047f6:	6822      	ldr	r2, [r4, #0]
 80047f8:	07d0      	lsls	r0, r2, #31
 80047fa:	d502      	bpl.n	8004802 <_printf_float+0x19a>
 80047fc:	3301      	adds	r3, #1
 80047fe:	440b      	add	r3, r1
 8004800:	6123      	str	r3, [r4, #16]
 8004802:	f04f 0a00 	mov.w	sl, #0
 8004806:	65a1      	str	r1, [r4, #88]	; 0x58
 8004808:	e7df      	b.n	80047ca <_printf_float+0x162>
 800480a:	b913      	cbnz	r3, 8004812 <_printf_float+0x1aa>
 800480c:	6822      	ldr	r2, [r4, #0]
 800480e:	07d2      	lsls	r2, r2, #31
 8004810:	d501      	bpl.n	8004816 <_printf_float+0x1ae>
 8004812:	3302      	adds	r3, #2
 8004814:	e7f4      	b.n	8004800 <_printf_float+0x198>
 8004816:	2301      	movs	r3, #1
 8004818:	e7f2      	b.n	8004800 <_printf_float+0x198>
 800481a:	f04f 0967 	mov.w	r9, #103	; 0x67
 800481e:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004820:	4299      	cmp	r1, r3
 8004822:	db05      	blt.n	8004830 <_printf_float+0x1c8>
 8004824:	6823      	ldr	r3, [r4, #0]
 8004826:	6121      	str	r1, [r4, #16]
 8004828:	07d8      	lsls	r0, r3, #31
 800482a:	d5ea      	bpl.n	8004802 <_printf_float+0x19a>
 800482c:	1c4b      	adds	r3, r1, #1
 800482e:	e7e7      	b.n	8004800 <_printf_float+0x198>
 8004830:	2900      	cmp	r1, #0
 8004832:	bfcc      	ite	gt
 8004834:	2201      	movgt	r2, #1
 8004836:	f1c1 0202 	rsble	r2, r1, #2
 800483a:	4413      	add	r3, r2
 800483c:	e7e0      	b.n	8004800 <_printf_float+0x198>
 800483e:	6823      	ldr	r3, [r4, #0]
 8004840:	055a      	lsls	r2, r3, #21
 8004842:	d407      	bmi.n	8004854 <_printf_float+0x1ec>
 8004844:	6923      	ldr	r3, [r4, #16]
 8004846:	4642      	mov	r2, r8
 8004848:	4631      	mov	r1, r6
 800484a:	4628      	mov	r0, r5
 800484c:	47b8      	blx	r7
 800484e:	3001      	adds	r0, #1
 8004850:	d12b      	bne.n	80048aa <_printf_float+0x242>
 8004852:	e764      	b.n	800471e <_printf_float+0xb6>
 8004854:	f1b9 0f65 	cmp.w	r9, #101	; 0x65
 8004858:	f240 80dd 	bls.w	8004a16 <_printf_float+0x3ae>
 800485c:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004860:	2200      	movs	r2, #0
 8004862:	2300      	movs	r3, #0
 8004864:	f7fc f954 	bl	8000b10 <__aeabi_dcmpeq>
 8004868:	2800      	cmp	r0, #0
 800486a:	d033      	beq.n	80048d4 <_printf_float+0x26c>
 800486c:	2301      	movs	r3, #1
 800486e:	4631      	mov	r1, r6
 8004870:	4628      	mov	r0, r5
 8004872:	4a35      	ldr	r2, [pc, #212]	; (8004948 <_printf_float+0x2e0>)
 8004874:	47b8      	blx	r7
 8004876:	3001      	adds	r0, #1
 8004878:	f43f af51 	beq.w	800471e <_printf_float+0xb6>
 800487c:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004880:	429a      	cmp	r2, r3
 8004882:	db02      	blt.n	800488a <_printf_float+0x222>
 8004884:	6823      	ldr	r3, [r4, #0]
 8004886:	07d8      	lsls	r0, r3, #31
 8004888:	d50f      	bpl.n	80048aa <_printf_float+0x242>
 800488a:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 800488e:	4631      	mov	r1, r6
 8004890:	4628      	mov	r0, r5
 8004892:	47b8      	blx	r7
 8004894:	3001      	adds	r0, #1
 8004896:	f43f af42 	beq.w	800471e <_printf_float+0xb6>
 800489a:	f04f 0800 	mov.w	r8, #0
 800489e:	f104 091a 	add.w	r9, r4, #26
 80048a2:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80048a4:	3b01      	subs	r3, #1
 80048a6:	4543      	cmp	r3, r8
 80048a8:	dc09      	bgt.n	80048be <_printf_float+0x256>
 80048aa:	6823      	ldr	r3, [r4, #0]
 80048ac:	079b      	lsls	r3, r3, #30
 80048ae:	f100 8104 	bmi.w	8004aba <_printf_float+0x452>
 80048b2:	68e0      	ldr	r0, [r4, #12]
 80048b4:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 80048b6:	4298      	cmp	r0, r3
 80048b8:	bfb8      	it	lt
 80048ba:	4618      	movlt	r0, r3
 80048bc:	e731      	b.n	8004722 <_printf_float+0xba>
 80048be:	2301      	movs	r3, #1
 80048c0:	464a      	mov	r2, r9
 80048c2:	4631      	mov	r1, r6
 80048c4:	4628      	mov	r0, r5
 80048c6:	47b8      	blx	r7
 80048c8:	3001      	adds	r0, #1
 80048ca:	f43f af28 	beq.w	800471e <_printf_float+0xb6>
 80048ce:	f108 0801 	add.w	r8, r8, #1
 80048d2:	e7e6      	b.n	80048a2 <_printf_float+0x23a>
 80048d4:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 80048d6:	2b00      	cmp	r3, #0
 80048d8:	dc38      	bgt.n	800494c <_printf_float+0x2e4>
 80048da:	2301      	movs	r3, #1
 80048dc:	4631      	mov	r1, r6
 80048de:	4628      	mov	r0, r5
 80048e0:	4a19      	ldr	r2, [pc, #100]	; (8004948 <_printf_float+0x2e0>)
 80048e2:	47b8      	blx	r7
 80048e4:	3001      	adds	r0, #1
 80048e6:	f43f af1a 	beq.w	800471e <_printf_float+0xb6>
 80048ea:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 80048ee:	4313      	orrs	r3, r2
 80048f0:	d102      	bne.n	80048f8 <_printf_float+0x290>
 80048f2:	6823      	ldr	r3, [r4, #0]
 80048f4:	07d9      	lsls	r1, r3, #31
 80048f6:	d5d8      	bpl.n	80048aa <_printf_float+0x242>
 80048f8:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80048fc:	4631      	mov	r1, r6
 80048fe:	4628      	mov	r0, r5
 8004900:	47b8      	blx	r7
 8004902:	3001      	adds	r0, #1
 8004904:	f43f af0b 	beq.w	800471e <_printf_float+0xb6>
 8004908:	f04f 0900 	mov.w	r9, #0
 800490c:	f104 0a1a 	add.w	sl, r4, #26
 8004910:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8004912:	425b      	negs	r3, r3
 8004914:	454b      	cmp	r3, r9
 8004916:	dc01      	bgt.n	800491c <_printf_float+0x2b4>
 8004918:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 800491a:	e794      	b.n	8004846 <_printf_float+0x1de>
 800491c:	2301      	movs	r3, #1
 800491e:	4652      	mov	r2, sl
 8004920:	4631      	mov	r1, r6
 8004922:	4628      	mov	r0, r5
 8004924:	47b8      	blx	r7
 8004926:	3001      	adds	r0, #1
 8004928:	f43f aef9 	beq.w	800471e <_printf_float+0xb6>
 800492c:	f109 0901 	add.w	r9, r9, #1
 8004930:	e7ee      	b.n	8004910 <_printf_float+0x2a8>
 8004932:	bf00      	nop
 8004934:	7fefffff 	.word	0x7fefffff
 8004938:	0800736a 	.word	0x0800736a
 800493c:	0800736e 	.word	0x0800736e
 8004940:	08007372 	.word	0x08007372
 8004944:	08007376 	.word	0x08007376
 8004948:	0800737a 	.word	0x0800737a
 800494c:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 800494e:	6da3      	ldr	r3, [r4, #88]	; 0x58
 8004950:	429a      	cmp	r2, r3
 8004952:	bfa8      	it	ge
 8004954:	461a      	movge	r2, r3
 8004956:	2a00      	cmp	r2, #0
 8004958:	4691      	mov	r9, r2
 800495a:	dc37      	bgt.n	80049cc <_printf_float+0x364>
 800495c:	f04f 0b00 	mov.w	fp, #0
 8004960:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8004964:	f104 021a 	add.w	r2, r4, #26
 8004968:	f8d4 a058 	ldr.w	sl, [r4, #88]	; 0x58
 800496c:	ebaa 0309 	sub.w	r3, sl, r9
 8004970:	455b      	cmp	r3, fp
 8004972:	dc33      	bgt.n	80049dc <_printf_float+0x374>
 8004974:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 8004978:	429a      	cmp	r2, r3
 800497a:	db3b      	blt.n	80049f4 <_printf_float+0x38c>
 800497c:	6823      	ldr	r3, [r4, #0]
 800497e:	07da      	lsls	r2, r3, #31
 8004980:	d438      	bmi.n	80049f4 <_printf_float+0x38c>
 8004982:	e9dd 320d 	ldrd	r3, r2, [sp, #52]	; 0x34
 8004986:	eba2 0903 	sub.w	r9, r2, r3
 800498a:	eba2 020a 	sub.w	r2, r2, sl
 800498e:	4591      	cmp	r9, r2
 8004990:	bfa8      	it	ge
 8004992:	4691      	movge	r9, r2
 8004994:	f1b9 0f00 	cmp.w	r9, #0
 8004998:	dc34      	bgt.n	8004a04 <_printf_float+0x39c>
 800499a:	f04f 0800 	mov.w	r8, #0
 800499e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80049a2:	f104 0a1a 	add.w	sl, r4, #26
 80049a6:	e9dd 230d 	ldrd	r2, r3, [sp, #52]	; 0x34
 80049aa:	1a9b      	subs	r3, r3, r2
 80049ac:	eba3 0309 	sub.w	r3, r3, r9
 80049b0:	4543      	cmp	r3, r8
 80049b2:	f77f af7a 	ble.w	80048aa <_printf_float+0x242>
 80049b6:	2301      	movs	r3, #1
 80049b8:	4652      	mov	r2, sl
 80049ba:	4631      	mov	r1, r6
 80049bc:	4628      	mov	r0, r5
 80049be:	47b8      	blx	r7
 80049c0:	3001      	adds	r0, #1
 80049c2:	f43f aeac 	beq.w	800471e <_printf_float+0xb6>
 80049c6:	f108 0801 	add.w	r8, r8, #1
 80049ca:	e7ec      	b.n	80049a6 <_printf_float+0x33e>
 80049cc:	4613      	mov	r3, r2
 80049ce:	4631      	mov	r1, r6
 80049d0:	4642      	mov	r2, r8
 80049d2:	4628      	mov	r0, r5
 80049d4:	47b8      	blx	r7
 80049d6:	3001      	adds	r0, #1
 80049d8:	d1c0      	bne.n	800495c <_printf_float+0x2f4>
 80049da:	e6a0      	b.n	800471e <_printf_float+0xb6>
 80049dc:	2301      	movs	r3, #1
 80049de:	4631      	mov	r1, r6
 80049e0:	4628      	mov	r0, r5
 80049e2:	920b      	str	r2, [sp, #44]	; 0x2c
 80049e4:	47b8      	blx	r7
 80049e6:	3001      	adds	r0, #1
 80049e8:	f43f ae99 	beq.w	800471e <_printf_float+0xb6>
 80049ec:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80049ee:	f10b 0b01 	add.w	fp, fp, #1
 80049f2:	e7b9      	b.n	8004968 <_printf_float+0x300>
 80049f4:	4631      	mov	r1, r6
 80049f6:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 80049fa:	4628      	mov	r0, r5
 80049fc:	47b8      	blx	r7
 80049fe:	3001      	adds	r0, #1
 8004a00:	d1bf      	bne.n	8004982 <_printf_float+0x31a>
 8004a02:	e68c      	b.n	800471e <_printf_float+0xb6>
 8004a04:	464b      	mov	r3, r9
 8004a06:	4631      	mov	r1, r6
 8004a08:	4628      	mov	r0, r5
 8004a0a:	eb08 020a 	add.w	r2, r8, sl
 8004a0e:	47b8      	blx	r7
 8004a10:	3001      	adds	r0, #1
 8004a12:	d1c2      	bne.n	800499a <_printf_float+0x332>
 8004a14:	e683      	b.n	800471e <_printf_float+0xb6>
 8004a16:	9a0e      	ldr	r2, [sp, #56]	; 0x38
 8004a18:	2a01      	cmp	r2, #1
 8004a1a:	dc01      	bgt.n	8004a20 <_printf_float+0x3b8>
 8004a1c:	07db      	lsls	r3, r3, #31
 8004a1e:	d539      	bpl.n	8004a94 <_printf_float+0x42c>
 8004a20:	2301      	movs	r3, #1
 8004a22:	4642      	mov	r2, r8
 8004a24:	4631      	mov	r1, r6
 8004a26:	4628      	mov	r0, r5
 8004a28:	47b8      	blx	r7
 8004a2a:	3001      	adds	r0, #1
 8004a2c:	f43f ae77 	beq.w	800471e <_printf_float+0xb6>
 8004a30:	e9dd 2309 	ldrd	r2, r3, [sp, #36]	; 0x24
 8004a34:	4631      	mov	r1, r6
 8004a36:	4628      	mov	r0, r5
 8004a38:	47b8      	blx	r7
 8004a3a:	3001      	adds	r0, #1
 8004a3c:	f43f ae6f 	beq.w	800471e <_printf_float+0xb6>
 8004a40:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	; 0x48
 8004a44:	2200      	movs	r2, #0
 8004a46:	2300      	movs	r3, #0
 8004a48:	f8dd 9038 	ldr.w	r9, [sp, #56]	; 0x38
 8004a4c:	f7fc f860 	bl	8000b10 <__aeabi_dcmpeq>
 8004a50:	b9d8      	cbnz	r0, 8004a8a <_printf_float+0x422>
 8004a52:	f109 33ff 	add.w	r3, r9, #4294967295
 8004a56:	f108 0201 	add.w	r2, r8, #1
 8004a5a:	4631      	mov	r1, r6
 8004a5c:	4628      	mov	r0, r5
 8004a5e:	47b8      	blx	r7
 8004a60:	3001      	adds	r0, #1
 8004a62:	d10e      	bne.n	8004a82 <_printf_float+0x41a>
 8004a64:	e65b      	b.n	800471e <_printf_float+0xb6>
 8004a66:	2301      	movs	r3, #1
 8004a68:	464a      	mov	r2, r9
 8004a6a:	4631      	mov	r1, r6
 8004a6c:	4628      	mov	r0, r5
 8004a6e:	47b8      	blx	r7
 8004a70:	3001      	adds	r0, #1
 8004a72:	f43f ae54 	beq.w	800471e <_printf_float+0xb6>
 8004a76:	f108 0801 	add.w	r8, r8, #1
 8004a7a:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8004a7c:	3b01      	subs	r3, #1
 8004a7e:	4543      	cmp	r3, r8
 8004a80:	dcf1      	bgt.n	8004a66 <_printf_float+0x3fe>
 8004a82:	4653      	mov	r3, sl
 8004a84:	f104 0250 	add.w	r2, r4, #80	; 0x50
 8004a88:	e6de      	b.n	8004848 <_printf_float+0x1e0>
 8004a8a:	f04f 0800 	mov.w	r8, #0
 8004a8e:	f104 091a 	add.w	r9, r4, #26
 8004a92:	e7f2      	b.n	8004a7a <_printf_float+0x412>
 8004a94:	2301      	movs	r3, #1
 8004a96:	4642      	mov	r2, r8
 8004a98:	e7df      	b.n	8004a5a <_printf_float+0x3f2>
 8004a9a:	2301      	movs	r3, #1
 8004a9c:	464a      	mov	r2, r9
 8004a9e:	4631      	mov	r1, r6
 8004aa0:	4628      	mov	r0, r5
 8004aa2:	47b8      	blx	r7
 8004aa4:	3001      	adds	r0, #1
 8004aa6:	f43f ae3a 	beq.w	800471e <_printf_float+0xb6>
 8004aaa:	f108 0801 	add.w	r8, r8, #1
 8004aae:	68e3      	ldr	r3, [r4, #12]
 8004ab0:	990f      	ldr	r1, [sp, #60]	; 0x3c
 8004ab2:	1a5b      	subs	r3, r3, r1
 8004ab4:	4543      	cmp	r3, r8
 8004ab6:	dcf0      	bgt.n	8004a9a <_printf_float+0x432>
 8004ab8:	e6fb      	b.n	80048b2 <_printf_float+0x24a>
 8004aba:	f04f 0800 	mov.w	r8, #0
 8004abe:	f104 0919 	add.w	r9, r4, #25
 8004ac2:	e7f4      	b.n	8004aae <_printf_float+0x446>

08004ac4 <_printf_common>:
 8004ac4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8004ac8:	4616      	mov	r6, r2
 8004aca:	4699      	mov	r9, r3
 8004acc:	688a      	ldr	r2, [r1, #8]
 8004ace:	690b      	ldr	r3, [r1, #16]
 8004ad0:	4607      	mov	r7, r0
 8004ad2:	4293      	cmp	r3, r2
 8004ad4:	bfb8      	it	lt
 8004ad6:	4613      	movlt	r3, r2
 8004ad8:	6033      	str	r3, [r6, #0]
 8004ada:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8004ade:	460c      	mov	r4, r1
 8004ae0:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8004ae4:	b10a      	cbz	r2, 8004aea <_printf_common+0x26>
 8004ae6:	3301      	adds	r3, #1
 8004ae8:	6033      	str	r3, [r6, #0]
 8004aea:	6823      	ldr	r3, [r4, #0]
 8004aec:	0699      	lsls	r1, r3, #26
 8004aee:	bf42      	ittt	mi
 8004af0:	6833      	ldrmi	r3, [r6, #0]
 8004af2:	3302      	addmi	r3, #2
 8004af4:	6033      	strmi	r3, [r6, #0]
 8004af6:	6825      	ldr	r5, [r4, #0]
 8004af8:	f015 0506 	ands.w	r5, r5, #6
 8004afc:	d106      	bne.n	8004b0c <_printf_common+0x48>
 8004afe:	f104 0a19 	add.w	sl, r4, #25
 8004b02:	68e3      	ldr	r3, [r4, #12]
 8004b04:	6832      	ldr	r2, [r6, #0]
 8004b06:	1a9b      	subs	r3, r3, r2
 8004b08:	42ab      	cmp	r3, r5
 8004b0a:	dc2b      	bgt.n	8004b64 <_printf_common+0xa0>
 8004b0c:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 8004b10:	1e13      	subs	r3, r2, #0
 8004b12:	6822      	ldr	r2, [r4, #0]
 8004b14:	bf18      	it	ne
 8004b16:	2301      	movne	r3, #1
 8004b18:	0692      	lsls	r2, r2, #26
 8004b1a:	d430      	bmi.n	8004b7e <_printf_common+0xba>
 8004b1c:	4649      	mov	r1, r9
 8004b1e:	4638      	mov	r0, r7
 8004b20:	f104 0243 	add.w	r2, r4, #67	; 0x43
 8004b24:	47c0      	blx	r8
 8004b26:	3001      	adds	r0, #1
 8004b28:	d023      	beq.n	8004b72 <_printf_common+0xae>
 8004b2a:	6823      	ldr	r3, [r4, #0]
 8004b2c:	6922      	ldr	r2, [r4, #16]
 8004b2e:	f003 0306 	and.w	r3, r3, #6
 8004b32:	2b04      	cmp	r3, #4
 8004b34:	bf14      	ite	ne
 8004b36:	2500      	movne	r5, #0
 8004b38:	6833      	ldreq	r3, [r6, #0]
 8004b3a:	f04f 0600 	mov.w	r6, #0
 8004b3e:	bf08      	it	eq
 8004b40:	68e5      	ldreq	r5, [r4, #12]
 8004b42:	f104 041a 	add.w	r4, r4, #26
 8004b46:	bf08      	it	eq
 8004b48:	1aed      	subeq	r5, r5, r3
 8004b4a:	f854 3c12 	ldr.w	r3, [r4, #-18]
 8004b4e:	bf08      	it	eq
 8004b50:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8004b54:	4293      	cmp	r3, r2
 8004b56:	bfc4      	itt	gt
 8004b58:	1a9b      	subgt	r3, r3, r2
 8004b5a:	18ed      	addgt	r5, r5, r3
 8004b5c:	42b5      	cmp	r5, r6
 8004b5e:	d11a      	bne.n	8004b96 <_printf_common+0xd2>
 8004b60:	2000      	movs	r0, #0
 8004b62:	e008      	b.n	8004b76 <_printf_common+0xb2>
 8004b64:	2301      	movs	r3, #1
 8004b66:	4652      	mov	r2, sl
 8004b68:	4649      	mov	r1, r9
 8004b6a:	4638      	mov	r0, r7
 8004b6c:	47c0      	blx	r8
 8004b6e:	3001      	adds	r0, #1
 8004b70:	d103      	bne.n	8004b7a <_printf_common+0xb6>
 8004b72:	f04f 30ff 	mov.w	r0, #4294967295
 8004b76:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004b7a:	3501      	adds	r5, #1
 8004b7c:	e7c1      	b.n	8004b02 <_printf_common+0x3e>
 8004b7e:	2030      	movs	r0, #48	; 0x30
 8004b80:	18e1      	adds	r1, r4, r3
 8004b82:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8004b86:	1c5a      	adds	r2, r3, #1
 8004b88:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8004b8c:	4422      	add	r2, r4
 8004b8e:	3302      	adds	r3, #2
 8004b90:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 8004b94:	e7c2      	b.n	8004b1c <_printf_common+0x58>
 8004b96:	2301      	movs	r3, #1
 8004b98:	4622      	mov	r2, r4
 8004b9a:	4649      	mov	r1, r9
 8004b9c:	4638      	mov	r0, r7
 8004b9e:	47c0      	blx	r8
 8004ba0:	3001      	adds	r0, #1
 8004ba2:	d0e6      	beq.n	8004b72 <_printf_common+0xae>
 8004ba4:	3601      	adds	r6, #1
 8004ba6:	e7d9      	b.n	8004b5c <_printf_common+0x98>

08004ba8 <_printf_i>:
 8004ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8004bac:	7e0f      	ldrb	r7, [r1, #24]
 8004bae:	4691      	mov	r9, r2
 8004bb0:	2f78      	cmp	r7, #120	; 0x78
 8004bb2:	4680      	mov	r8, r0
 8004bb4:	460c      	mov	r4, r1
 8004bb6:	469a      	mov	sl, r3
 8004bb8:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 8004bba:	f101 0243 	add.w	r2, r1, #67	; 0x43
 8004bbe:	d807      	bhi.n	8004bd0 <_printf_i+0x28>
 8004bc0:	2f62      	cmp	r7, #98	; 0x62
 8004bc2:	d80a      	bhi.n	8004bda <_printf_i+0x32>
 8004bc4:	2f00      	cmp	r7, #0
 8004bc6:	f000 80d5 	beq.w	8004d74 <_printf_i+0x1cc>
 8004bca:	2f58      	cmp	r7, #88	; 0x58
 8004bcc:	f000 80c1 	beq.w	8004d52 <_printf_i+0x1aa>
 8004bd0:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004bd4:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8004bd8:	e03a      	b.n	8004c50 <_printf_i+0xa8>
 8004bda:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 8004bde:	2b15      	cmp	r3, #21
 8004be0:	d8f6      	bhi.n	8004bd0 <_printf_i+0x28>
 8004be2:	a101      	add	r1, pc, #4	; (adr r1, 8004be8 <_printf_i+0x40>)
 8004be4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8004be8:	08004c41 	.word	0x08004c41
 8004bec:	08004c55 	.word	0x08004c55
 8004bf0:	08004bd1 	.word	0x08004bd1
 8004bf4:	08004bd1 	.word	0x08004bd1
 8004bf8:	08004bd1 	.word	0x08004bd1
 8004bfc:	08004bd1 	.word	0x08004bd1
 8004c00:	08004c55 	.word	0x08004c55
 8004c04:	08004bd1 	.word	0x08004bd1
 8004c08:	08004bd1 	.word	0x08004bd1
 8004c0c:	08004bd1 	.word	0x08004bd1
 8004c10:	08004bd1 	.word	0x08004bd1
 8004c14:	08004d5b 	.word	0x08004d5b
 8004c18:	08004c81 	.word	0x08004c81
 8004c1c:	08004d15 	.word	0x08004d15
 8004c20:	08004bd1 	.word	0x08004bd1
 8004c24:	08004bd1 	.word	0x08004bd1
 8004c28:	08004d7d 	.word	0x08004d7d
 8004c2c:	08004bd1 	.word	0x08004bd1
 8004c30:	08004c81 	.word	0x08004c81
 8004c34:	08004bd1 	.word	0x08004bd1
 8004c38:	08004bd1 	.word	0x08004bd1
 8004c3c:	08004d1d 	.word	0x08004d1d
 8004c40:	682b      	ldr	r3, [r5, #0]
 8004c42:	1d1a      	adds	r2, r3, #4
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	602a      	str	r2, [r5, #0]
 8004c48:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8004c4c:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 8004c50:	2301      	movs	r3, #1
 8004c52:	e0a0      	b.n	8004d96 <_printf_i+0x1ee>
 8004c54:	6820      	ldr	r0, [r4, #0]
 8004c56:	682b      	ldr	r3, [r5, #0]
 8004c58:	0607      	lsls	r7, r0, #24
 8004c5a:	f103 0104 	add.w	r1, r3, #4
 8004c5e:	6029      	str	r1, [r5, #0]
 8004c60:	d501      	bpl.n	8004c66 <_printf_i+0xbe>
 8004c62:	681e      	ldr	r6, [r3, #0]
 8004c64:	e003      	b.n	8004c6e <_printf_i+0xc6>
 8004c66:	0646      	lsls	r6, r0, #25
 8004c68:	d5fb      	bpl.n	8004c62 <_printf_i+0xba>
 8004c6a:	f9b3 6000 	ldrsh.w	r6, [r3]
 8004c6e:	2e00      	cmp	r6, #0
 8004c70:	da03      	bge.n	8004c7a <_printf_i+0xd2>
 8004c72:	232d      	movs	r3, #45	; 0x2d
 8004c74:	4276      	negs	r6, r6
 8004c76:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004c7a:	230a      	movs	r3, #10
 8004c7c:	4859      	ldr	r0, [pc, #356]	; (8004de4 <_printf_i+0x23c>)
 8004c7e:	e012      	b.n	8004ca6 <_printf_i+0xfe>
 8004c80:	682b      	ldr	r3, [r5, #0]
 8004c82:	6820      	ldr	r0, [r4, #0]
 8004c84:	1d19      	adds	r1, r3, #4
 8004c86:	6029      	str	r1, [r5, #0]
 8004c88:	0605      	lsls	r5, r0, #24
 8004c8a:	d501      	bpl.n	8004c90 <_printf_i+0xe8>
 8004c8c:	681e      	ldr	r6, [r3, #0]
 8004c8e:	e002      	b.n	8004c96 <_printf_i+0xee>
 8004c90:	0641      	lsls	r1, r0, #25
 8004c92:	d5fb      	bpl.n	8004c8c <_printf_i+0xe4>
 8004c94:	881e      	ldrh	r6, [r3, #0]
 8004c96:	2f6f      	cmp	r7, #111	; 0x6f
 8004c98:	bf0c      	ite	eq
 8004c9a:	2308      	moveq	r3, #8
 8004c9c:	230a      	movne	r3, #10
 8004c9e:	4851      	ldr	r0, [pc, #324]	; (8004de4 <_printf_i+0x23c>)
 8004ca0:	2100      	movs	r1, #0
 8004ca2:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8004ca6:	6865      	ldr	r5, [r4, #4]
 8004ca8:	2d00      	cmp	r5, #0
 8004caa:	bfa8      	it	ge
 8004cac:	6821      	ldrge	r1, [r4, #0]
 8004cae:	60a5      	str	r5, [r4, #8]
 8004cb0:	bfa4      	itt	ge
 8004cb2:	f021 0104 	bicge.w	r1, r1, #4
 8004cb6:	6021      	strge	r1, [r4, #0]
 8004cb8:	b90e      	cbnz	r6, 8004cbe <_printf_i+0x116>
 8004cba:	2d00      	cmp	r5, #0
 8004cbc:	d04b      	beq.n	8004d56 <_printf_i+0x1ae>
 8004cbe:	4615      	mov	r5, r2
 8004cc0:	fbb6 f1f3 	udiv	r1, r6, r3
 8004cc4:	fb03 6711 	mls	r7, r3, r1, r6
 8004cc8:	5dc7      	ldrb	r7, [r0, r7]
 8004cca:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8004cce:	4637      	mov	r7, r6
 8004cd0:	42bb      	cmp	r3, r7
 8004cd2:	460e      	mov	r6, r1
 8004cd4:	d9f4      	bls.n	8004cc0 <_printf_i+0x118>
 8004cd6:	2b08      	cmp	r3, #8
 8004cd8:	d10b      	bne.n	8004cf2 <_printf_i+0x14a>
 8004cda:	6823      	ldr	r3, [r4, #0]
 8004cdc:	07de      	lsls	r6, r3, #31
 8004cde:	d508      	bpl.n	8004cf2 <_printf_i+0x14a>
 8004ce0:	6923      	ldr	r3, [r4, #16]
 8004ce2:	6861      	ldr	r1, [r4, #4]
 8004ce4:	4299      	cmp	r1, r3
 8004ce6:	bfde      	ittt	le
 8004ce8:	2330      	movle	r3, #48	; 0x30
 8004cea:	f805 3c01 	strble.w	r3, [r5, #-1]
 8004cee:	f105 35ff 	addle.w	r5, r5, #4294967295
 8004cf2:	1b52      	subs	r2, r2, r5
 8004cf4:	6122      	str	r2, [r4, #16]
 8004cf6:	464b      	mov	r3, r9
 8004cf8:	4621      	mov	r1, r4
 8004cfa:	4640      	mov	r0, r8
 8004cfc:	f8cd a000 	str.w	sl, [sp]
 8004d00:	aa03      	add	r2, sp, #12
 8004d02:	f7ff fedf 	bl	8004ac4 <_printf_common>
 8004d06:	3001      	adds	r0, #1
 8004d08:	d14a      	bne.n	8004da0 <_printf_i+0x1f8>
 8004d0a:	f04f 30ff 	mov.w	r0, #4294967295
 8004d0e:	b004      	add	sp, #16
 8004d10:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8004d14:	6823      	ldr	r3, [r4, #0]
 8004d16:	f043 0320 	orr.w	r3, r3, #32
 8004d1a:	6023      	str	r3, [r4, #0]
 8004d1c:	2778      	movs	r7, #120	; 0x78
 8004d1e:	4832      	ldr	r0, [pc, #200]	; (8004de8 <_printf_i+0x240>)
 8004d20:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8004d24:	6823      	ldr	r3, [r4, #0]
 8004d26:	6829      	ldr	r1, [r5, #0]
 8004d28:	061f      	lsls	r7, r3, #24
 8004d2a:	f851 6b04 	ldr.w	r6, [r1], #4
 8004d2e:	d402      	bmi.n	8004d36 <_printf_i+0x18e>
 8004d30:	065f      	lsls	r7, r3, #25
 8004d32:	bf48      	it	mi
 8004d34:	b2b6      	uxthmi	r6, r6
 8004d36:	07df      	lsls	r7, r3, #31
 8004d38:	bf48      	it	mi
 8004d3a:	f043 0320 	orrmi.w	r3, r3, #32
 8004d3e:	6029      	str	r1, [r5, #0]
 8004d40:	bf48      	it	mi
 8004d42:	6023      	strmi	r3, [r4, #0]
 8004d44:	b91e      	cbnz	r6, 8004d4e <_printf_i+0x1a6>
 8004d46:	6823      	ldr	r3, [r4, #0]
 8004d48:	f023 0320 	bic.w	r3, r3, #32
 8004d4c:	6023      	str	r3, [r4, #0]
 8004d4e:	2310      	movs	r3, #16
 8004d50:	e7a6      	b.n	8004ca0 <_printf_i+0xf8>
 8004d52:	4824      	ldr	r0, [pc, #144]	; (8004de4 <_printf_i+0x23c>)
 8004d54:	e7e4      	b.n	8004d20 <_printf_i+0x178>
 8004d56:	4615      	mov	r5, r2
 8004d58:	e7bd      	b.n	8004cd6 <_printf_i+0x12e>
 8004d5a:	682b      	ldr	r3, [r5, #0]
 8004d5c:	6826      	ldr	r6, [r4, #0]
 8004d5e:	1d18      	adds	r0, r3, #4
 8004d60:	6961      	ldr	r1, [r4, #20]
 8004d62:	6028      	str	r0, [r5, #0]
 8004d64:	0635      	lsls	r5, r6, #24
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	d501      	bpl.n	8004d6e <_printf_i+0x1c6>
 8004d6a:	6019      	str	r1, [r3, #0]
 8004d6c:	e002      	b.n	8004d74 <_printf_i+0x1cc>
 8004d6e:	0670      	lsls	r0, r6, #25
 8004d70:	d5fb      	bpl.n	8004d6a <_printf_i+0x1c2>
 8004d72:	8019      	strh	r1, [r3, #0]
 8004d74:	2300      	movs	r3, #0
 8004d76:	4615      	mov	r5, r2
 8004d78:	6123      	str	r3, [r4, #16]
 8004d7a:	e7bc      	b.n	8004cf6 <_printf_i+0x14e>
 8004d7c:	682b      	ldr	r3, [r5, #0]
 8004d7e:	2100      	movs	r1, #0
 8004d80:	1d1a      	adds	r2, r3, #4
 8004d82:	602a      	str	r2, [r5, #0]
 8004d84:	681d      	ldr	r5, [r3, #0]
 8004d86:	6862      	ldr	r2, [r4, #4]
 8004d88:	4628      	mov	r0, r5
 8004d8a:	f000 f9c1 	bl	8005110 <memchr>
 8004d8e:	b108      	cbz	r0, 8004d94 <_printf_i+0x1ec>
 8004d90:	1b40      	subs	r0, r0, r5
 8004d92:	6060      	str	r0, [r4, #4]
 8004d94:	6863      	ldr	r3, [r4, #4]
 8004d96:	6123      	str	r3, [r4, #16]
 8004d98:	2300      	movs	r3, #0
 8004d9a:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8004d9e:	e7aa      	b.n	8004cf6 <_printf_i+0x14e>
 8004da0:	462a      	mov	r2, r5
 8004da2:	4649      	mov	r1, r9
 8004da4:	4640      	mov	r0, r8
 8004da6:	6923      	ldr	r3, [r4, #16]
 8004da8:	47d0      	blx	sl
 8004daa:	3001      	adds	r0, #1
 8004dac:	d0ad      	beq.n	8004d0a <_printf_i+0x162>
 8004dae:	6823      	ldr	r3, [r4, #0]
 8004db0:	079b      	lsls	r3, r3, #30
 8004db2:	d413      	bmi.n	8004ddc <_printf_i+0x234>
 8004db4:	68e0      	ldr	r0, [r4, #12]
 8004db6:	9b03      	ldr	r3, [sp, #12]
 8004db8:	4298      	cmp	r0, r3
 8004dba:	bfb8      	it	lt
 8004dbc:	4618      	movlt	r0, r3
 8004dbe:	e7a6      	b.n	8004d0e <_printf_i+0x166>
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	4632      	mov	r2, r6
 8004dc4:	4649      	mov	r1, r9
 8004dc6:	4640      	mov	r0, r8
 8004dc8:	47d0      	blx	sl
 8004dca:	3001      	adds	r0, #1
 8004dcc:	d09d      	beq.n	8004d0a <_printf_i+0x162>
 8004dce:	3501      	adds	r5, #1
 8004dd0:	68e3      	ldr	r3, [r4, #12]
 8004dd2:	9903      	ldr	r1, [sp, #12]
 8004dd4:	1a5b      	subs	r3, r3, r1
 8004dd6:	42ab      	cmp	r3, r5
 8004dd8:	dcf2      	bgt.n	8004dc0 <_printf_i+0x218>
 8004dda:	e7eb      	b.n	8004db4 <_printf_i+0x20c>
 8004ddc:	2500      	movs	r5, #0
 8004dde:	f104 0619 	add.w	r6, r4, #25
 8004de2:	e7f5      	b.n	8004dd0 <_printf_i+0x228>
 8004de4:	0800737c 	.word	0x0800737c
 8004de8:	0800738d 	.word	0x0800738d

08004dec <std>:
 8004dec:	2300      	movs	r3, #0
 8004dee:	b510      	push	{r4, lr}
 8004df0:	4604      	mov	r4, r0
 8004df2:	e9c0 3300 	strd	r3, r3, [r0]
 8004df6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8004dfa:	6083      	str	r3, [r0, #8]
 8004dfc:	8181      	strh	r1, [r0, #12]
 8004dfe:	6643      	str	r3, [r0, #100]	; 0x64
 8004e00:	81c2      	strh	r2, [r0, #14]
 8004e02:	6183      	str	r3, [r0, #24]
 8004e04:	4619      	mov	r1, r3
 8004e06:	2208      	movs	r2, #8
 8004e08:	305c      	adds	r0, #92	; 0x5c
 8004e0a:	f000 f902 	bl	8005012 <memset>
 8004e0e:	4b05      	ldr	r3, [pc, #20]	; (8004e24 <std+0x38>)
 8004e10:	6224      	str	r4, [r4, #32]
 8004e12:	6263      	str	r3, [r4, #36]	; 0x24
 8004e14:	4b04      	ldr	r3, [pc, #16]	; (8004e28 <std+0x3c>)
 8004e16:	62a3      	str	r3, [r4, #40]	; 0x28
 8004e18:	4b04      	ldr	r3, [pc, #16]	; (8004e2c <std+0x40>)
 8004e1a:	62e3      	str	r3, [r4, #44]	; 0x2c
 8004e1c:	4b04      	ldr	r3, [pc, #16]	; (8004e30 <std+0x44>)
 8004e1e:	6323      	str	r3, [r4, #48]	; 0x30
 8004e20:	bd10      	pop	{r4, pc}
 8004e22:	bf00      	nop
 8004e24:	08004f8d 	.word	0x08004f8d
 8004e28:	08004faf 	.word	0x08004faf
 8004e2c:	08004fe7 	.word	0x08004fe7
 8004e30:	0800500b 	.word	0x0800500b

08004e34 <stdio_exit_handler>:
 8004e34:	4a02      	ldr	r2, [pc, #8]	; (8004e40 <stdio_exit_handler+0xc>)
 8004e36:	4903      	ldr	r1, [pc, #12]	; (8004e44 <stdio_exit_handler+0x10>)
 8004e38:	4803      	ldr	r0, [pc, #12]	; (8004e48 <stdio_exit_handler+0x14>)
 8004e3a:	f000 b869 	b.w	8004f10 <_fwalk_sglue>
 8004e3e:	bf00      	nop
 8004e40:	20000028 	.word	0x20000028
 8004e44:	08006aa5 	.word	0x08006aa5
 8004e48:	20000034 	.word	0x20000034

08004e4c <cleanup_stdio>:
 8004e4c:	6841      	ldr	r1, [r0, #4]
 8004e4e:	4b0c      	ldr	r3, [pc, #48]	; (8004e80 <cleanup_stdio+0x34>)
 8004e50:	b510      	push	{r4, lr}
 8004e52:	4299      	cmp	r1, r3
 8004e54:	4604      	mov	r4, r0
 8004e56:	d001      	beq.n	8004e5c <cleanup_stdio+0x10>
 8004e58:	f001 fe24 	bl	8006aa4 <_fflush_r>
 8004e5c:	68a1      	ldr	r1, [r4, #8]
 8004e5e:	4b09      	ldr	r3, [pc, #36]	; (8004e84 <cleanup_stdio+0x38>)
 8004e60:	4299      	cmp	r1, r3
 8004e62:	d002      	beq.n	8004e6a <cleanup_stdio+0x1e>
 8004e64:	4620      	mov	r0, r4
 8004e66:	f001 fe1d 	bl	8006aa4 <_fflush_r>
 8004e6a:	68e1      	ldr	r1, [r4, #12]
 8004e6c:	4b06      	ldr	r3, [pc, #24]	; (8004e88 <cleanup_stdio+0x3c>)
 8004e6e:	4299      	cmp	r1, r3
 8004e70:	d004      	beq.n	8004e7c <cleanup_stdio+0x30>
 8004e72:	4620      	mov	r0, r4
 8004e74:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004e78:	f001 be14 	b.w	8006aa4 <_fflush_r>
 8004e7c:	bd10      	pop	{r4, pc}
 8004e7e:	bf00      	nop
 8004e80:	200002f8 	.word	0x200002f8
 8004e84:	20000360 	.word	0x20000360
 8004e88:	200003c8 	.word	0x200003c8

08004e8c <global_stdio_init.part.0>:
 8004e8c:	b510      	push	{r4, lr}
 8004e8e:	4b0b      	ldr	r3, [pc, #44]	; (8004ebc <global_stdio_init.part.0+0x30>)
 8004e90:	4c0b      	ldr	r4, [pc, #44]	; (8004ec0 <global_stdio_init.part.0+0x34>)
 8004e92:	4a0c      	ldr	r2, [pc, #48]	; (8004ec4 <global_stdio_init.part.0+0x38>)
 8004e94:	4620      	mov	r0, r4
 8004e96:	601a      	str	r2, [r3, #0]
 8004e98:	2104      	movs	r1, #4
 8004e9a:	2200      	movs	r2, #0
 8004e9c:	f7ff ffa6 	bl	8004dec <std>
 8004ea0:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8004ea4:	2201      	movs	r2, #1
 8004ea6:	2109      	movs	r1, #9
 8004ea8:	f7ff ffa0 	bl	8004dec <std>
 8004eac:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8004eb0:	2202      	movs	r2, #2
 8004eb2:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004eb6:	2112      	movs	r1, #18
 8004eb8:	f7ff bf98 	b.w	8004dec <std>
 8004ebc:	20000430 	.word	0x20000430
 8004ec0:	200002f8 	.word	0x200002f8
 8004ec4:	08004e35 	.word	0x08004e35

08004ec8 <__sfp_lock_acquire>:
 8004ec8:	4801      	ldr	r0, [pc, #4]	; (8004ed0 <__sfp_lock_acquire+0x8>)
 8004eca:	f000 b91f 	b.w	800510c <__retarget_lock_acquire_recursive>
 8004ece:	bf00      	nop
 8004ed0:	20000439 	.word	0x20000439

08004ed4 <__sfp_lock_release>:
 8004ed4:	4801      	ldr	r0, [pc, #4]	; (8004edc <__sfp_lock_release+0x8>)
 8004ed6:	f000 b91a 	b.w	800510e <__retarget_lock_release_recursive>
 8004eda:	bf00      	nop
 8004edc:	20000439 	.word	0x20000439

08004ee0 <__sinit>:
 8004ee0:	b510      	push	{r4, lr}
 8004ee2:	4604      	mov	r4, r0
 8004ee4:	f7ff fff0 	bl	8004ec8 <__sfp_lock_acquire>
 8004ee8:	6a23      	ldr	r3, [r4, #32]
 8004eea:	b11b      	cbz	r3, 8004ef4 <__sinit+0x14>
 8004eec:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8004ef0:	f7ff bff0 	b.w	8004ed4 <__sfp_lock_release>
 8004ef4:	4b04      	ldr	r3, [pc, #16]	; (8004f08 <__sinit+0x28>)
 8004ef6:	6223      	str	r3, [r4, #32]
 8004ef8:	4b04      	ldr	r3, [pc, #16]	; (8004f0c <__sinit+0x2c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d1f5      	bne.n	8004eec <__sinit+0xc>
 8004f00:	f7ff ffc4 	bl	8004e8c <global_stdio_init.part.0>
 8004f04:	e7f2      	b.n	8004eec <__sinit+0xc>
 8004f06:	bf00      	nop
 8004f08:	08004e4d 	.word	0x08004e4d
 8004f0c:	20000430 	.word	0x20000430

08004f10 <_fwalk_sglue>:
 8004f10:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8004f14:	4607      	mov	r7, r0
 8004f16:	4688      	mov	r8, r1
 8004f18:	4614      	mov	r4, r2
 8004f1a:	2600      	movs	r6, #0
 8004f1c:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8004f20:	f1b9 0901 	subs.w	r9, r9, #1
 8004f24:	d505      	bpl.n	8004f32 <_fwalk_sglue+0x22>
 8004f26:	6824      	ldr	r4, [r4, #0]
 8004f28:	2c00      	cmp	r4, #0
 8004f2a:	d1f7      	bne.n	8004f1c <_fwalk_sglue+0xc>
 8004f2c:	4630      	mov	r0, r6
 8004f2e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8004f32:	89ab      	ldrh	r3, [r5, #12]
 8004f34:	2b01      	cmp	r3, #1
 8004f36:	d907      	bls.n	8004f48 <_fwalk_sglue+0x38>
 8004f38:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8004f3c:	3301      	adds	r3, #1
 8004f3e:	d003      	beq.n	8004f48 <_fwalk_sglue+0x38>
 8004f40:	4629      	mov	r1, r5
 8004f42:	4638      	mov	r0, r7
 8004f44:	47c0      	blx	r8
 8004f46:	4306      	orrs	r6, r0
 8004f48:	3568      	adds	r5, #104	; 0x68
 8004f4a:	e7e9      	b.n	8004f20 <_fwalk_sglue+0x10>

08004f4c <siprintf>:
 8004f4c:	b40e      	push	{r1, r2, r3}
 8004f4e:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8004f52:	b500      	push	{lr}
 8004f54:	b09c      	sub	sp, #112	; 0x70
 8004f56:	ab1d      	add	r3, sp, #116	; 0x74
 8004f58:	9002      	str	r0, [sp, #8]
 8004f5a:	9006      	str	r0, [sp, #24]
 8004f5c:	9107      	str	r1, [sp, #28]
 8004f5e:	9104      	str	r1, [sp, #16]
 8004f60:	4808      	ldr	r0, [pc, #32]	; (8004f84 <siprintf+0x38>)
 8004f62:	4909      	ldr	r1, [pc, #36]	; (8004f88 <siprintf+0x3c>)
 8004f64:	f853 2b04 	ldr.w	r2, [r3], #4
 8004f68:	9105      	str	r1, [sp, #20]
 8004f6a:	6800      	ldr	r0, [r0, #0]
 8004f6c:	a902      	add	r1, sp, #8
 8004f6e:	9301      	str	r3, [sp, #4]
 8004f70:	f001 fc18 	bl	80067a4 <_svfiprintf_r>
 8004f74:	2200      	movs	r2, #0
 8004f76:	9b02      	ldr	r3, [sp, #8]
 8004f78:	701a      	strb	r2, [r3, #0]
 8004f7a:	b01c      	add	sp, #112	; 0x70
 8004f7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8004f80:	b003      	add	sp, #12
 8004f82:	4770      	bx	lr
 8004f84:	20000080 	.word	0x20000080
 8004f88:	ffff0208 	.word	0xffff0208

08004f8c <__sread>:
 8004f8c:	b510      	push	{r4, lr}
 8004f8e:	460c      	mov	r4, r1
 8004f90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004f94:	f000 f86c 	bl	8005070 <_read_r>
 8004f98:	2800      	cmp	r0, #0
 8004f9a:	bfab      	itete	ge
 8004f9c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8004f9e:	89a3      	ldrhlt	r3, [r4, #12]
 8004fa0:	181b      	addge	r3, r3, r0
 8004fa2:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8004fa6:	bfac      	ite	ge
 8004fa8:	6563      	strge	r3, [r4, #84]	; 0x54
 8004faa:	81a3      	strhlt	r3, [r4, #12]
 8004fac:	bd10      	pop	{r4, pc}

08004fae <__swrite>:
 8004fae:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8004fb2:	461f      	mov	r7, r3
 8004fb4:	898b      	ldrh	r3, [r1, #12]
 8004fb6:	4605      	mov	r5, r0
 8004fb8:	05db      	lsls	r3, r3, #23
 8004fba:	460c      	mov	r4, r1
 8004fbc:	4616      	mov	r6, r2
 8004fbe:	d505      	bpl.n	8004fcc <__swrite+0x1e>
 8004fc0:	2302      	movs	r3, #2
 8004fc2:	2200      	movs	r2, #0
 8004fc4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fc8:	f000 f840 	bl	800504c <_lseek_r>
 8004fcc:	89a3      	ldrh	r3, [r4, #12]
 8004fce:	4632      	mov	r2, r6
 8004fd0:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004fd4:	81a3      	strh	r3, [r4, #12]
 8004fd6:	4628      	mov	r0, r5
 8004fd8:	463b      	mov	r3, r7
 8004fda:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8004fde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8004fe2:	f000 b857 	b.w	8005094 <_write_r>

08004fe6 <__sseek>:
 8004fe6:	b510      	push	{r4, lr}
 8004fe8:	460c      	mov	r4, r1
 8004fea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8004fee:	f000 f82d 	bl	800504c <_lseek_r>
 8004ff2:	1c43      	adds	r3, r0, #1
 8004ff4:	89a3      	ldrh	r3, [r4, #12]
 8004ff6:	bf15      	itete	ne
 8004ff8:	6560      	strne	r0, [r4, #84]	; 0x54
 8004ffa:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8004ffe:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8005002:	81a3      	strheq	r3, [r4, #12]
 8005004:	bf18      	it	ne
 8005006:	81a3      	strhne	r3, [r4, #12]
 8005008:	bd10      	pop	{r4, pc}

0800500a <__sclose>:
 800500a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800500e:	f000 b80d 	b.w	800502c <_close_r>

08005012 <memset>:
 8005012:	4603      	mov	r3, r0
 8005014:	4402      	add	r2, r0
 8005016:	4293      	cmp	r3, r2
 8005018:	d100      	bne.n	800501c <memset+0xa>
 800501a:	4770      	bx	lr
 800501c:	f803 1b01 	strb.w	r1, [r3], #1
 8005020:	e7f9      	b.n	8005016 <memset+0x4>
	...

08005024 <_localeconv_r>:
 8005024:	4800      	ldr	r0, [pc, #0]	; (8005028 <_localeconv_r+0x4>)
 8005026:	4770      	bx	lr
 8005028:	20000174 	.word	0x20000174

0800502c <_close_r>:
 800502c:	b538      	push	{r3, r4, r5, lr}
 800502e:	2300      	movs	r3, #0
 8005030:	4d05      	ldr	r5, [pc, #20]	; (8005048 <_close_r+0x1c>)
 8005032:	4604      	mov	r4, r0
 8005034:	4608      	mov	r0, r1
 8005036:	602b      	str	r3, [r5, #0]
 8005038:	f7fd f857 	bl	80020ea <_close>
 800503c:	1c43      	adds	r3, r0, #1
 800503e:	d102      	bne.n	8005046 <_close_r+0x1a>
 8005040:	682b      	ldr	r3, [r5, #0]
 8005042:	b103      	cbz	r3, 8005046 <_close_r+0x1a>
 8005044:	6023      	str	r3, [r4, #0]
 8005046:	bd38      	pop	{r3, r4, r5, pc}
 8005048:	20000434 	.word	0x20000434

0800504c <_lseek_r>:
 800504c:	b538      	push	{r3, r4, r5, lr}
 800504e:	4604      	mov	r4, r0
 8005050:	4608      	mov	r0, r1
 8005052:	4611      	mov	r1, r2
 8005054:	2200      	movs	r2, #0
 8005056:	4d05      	ldr	r5, [pc, #20]	; (800506c <_lseek_r+0x20>)
 8005058:	602a      	str	r2, [r5, #0]
 800505a:	461a      	mov	r2, r3
 800505c:	f7fd f869 	bl	8002132 <_lseek>
 8005060:	1c43      	adds	r3, r0, #1
 8005062:	d102      	bne.n	800506a <_lseek_r+0x1e>
 8005064:	682b      	ldr	r3, [r5, #0]
 8005066:	b103      	cbz	r3, 800506a <_lseek_r+0x1e>
 8005068:	6023      	str	r3, [r4, #0]
 800506a:	bd38      	pop	{r3, r4, r5, pc}
 800506c:	20000434 	.word	0x20000434

08005070 <_read_r>:
 8005070:	b538      	push	{r3, r4, r5, lr}
 8005072:	4604      	mov	r4, r0
 8005074:	4608      	mov	r0, r1
 8005076:	4611      	mov	r1, r2
 8005078:	2200      	movs	r2, #0
 800507a:	4d05      	ldr	r5, [pc, #20]	; (8005090 <_read_r+0x20>)
 800507c:	602a      	str	r2, [r5, #0]
 800507e:	461a      	mov	r2, r3
 8005080:	f7fc fffa 	bl	8002078 <_read>
 8005084:	1c43      	adds	r3, r0, #1
 8005086:	d102      	bne.n	800508e <_read_r+0x1e>
 8005088:	682b      	ldr	r3, [r5, #0]
 800508a:	b103      	cbz	r3, 800508e <_read_r+0x1e>
 800508c:	6023      	str	r3, [r4, #0]
 800508e:	bd38      	pop	{r3, r4, r5, pc}
 8005090:	20000434 	.word	0x20000434

08005094 <_write_r>:
 8005094:	b538      	push	{r3, r4, r5, lr}
 8005096:	4604      	mov	r4, r0
 8005098:	4608      	mov	r0, r1
 800509a:	4611      	mov	r1, r2
 800509c:	2200      	movs	r2, #0
 800509e:	4d05      	ldr	r5, [pc, #20]	; (80050b4 <_write_r+0x20>)
 80050a0:	602a      	str	r2, [r5, #0]
 80050a2:	461a      	mov	r2, r3
 80050a4:	f7fd f805 	bl	80020b2 <_write>
 80050a8:	1c43      	adds	r3, r0, #1
 80050aa:	d102      	bne.n	80050b2 <_write_r+0x1e>
 80050ac:	682b      	ldr	r3, [r5, #0]
 80050ae:	b103      	cbz	r3, 80050b2 <_write_r+0x1e>
 80050b0:	6023      	str	r3, [r4, #0]
 80050b2:	bd38      	pop	{r3, r4, r5, pc}
 80050b4:	20000434 	.word	0x20000434

080050b8 <__errno>:
 80050b8:	4b01      	ldr	r3, [pc, #4]	; (80050c0 <__errno+0x8>)
 80050ba:	6818      	ldr	r0, [r3, #0]
 80050bc:	4770      	bx	lr
 80050be:	bf00      	nop
 80050c0:	20000080 	.word	0x20000080

080050c4 <__libc_init_array>:
 80050c4:	b570      	push	{r4, r5, r6, lr}
 80050c6:	2600      	movs	r6, #0
 80050c8:	4d0c      	ldr	r5, [pc, #48]	; (80050fc <__libc_init_array+0x38>)
 80050ca:	4c0d      	ldr	r4, [pc, #52]	; (8005100 <__libc_init_array+0x3c>)
 80050cc:	1b64      	subs	r4, r4, r5
 80050ce:	10a4      	asrs	r4, r4, #2
 80050d0:	42a6      	cmp	r6, r4
 80050d2:	d109      	bne.n	80050e8 <__libc_init_array+0x24>
 80050d4:	f002 f908 	bl	80072e8 <_init>
 80050d8:	2600      	movs	r6, #0
 80050da:	4d0a      	ldr	r5, [pc, #40]	; (8005104 <__libc_init_array+0x40>)
 80050dc:	4c0a      	ldr	r4, [pc, #40]	; (8005108 <__libc_init_array+0x44>)
 80050de:	1b64      	subs	r4, r4, r5
 80050e0:	10a4      	asrs	r4, r4, #2
 80050e2:	42a6      	cmp	r6, r4
 80050e4:	d105      	bne.n	80050f2 <__libc_init_array+0x2e>
 80050e6:	bd70      	pop	{r4, r5, r6, pc}
 80050e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80050ec:	4798      	blx	r3
 80050ee:	3601      	adds	r6, #1
 80050f0:	e7ee      	b.n	80050d0 <__libc_init_array+0xc>
 80050f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80050f6:	4798      	blx	r3
 80050f8:	3601      	adds	r6, #1
 80050fa:	e7f2      	b.n	80050e2 <__libc_init_array+0x1e>
 80050fc:	080076dc 	.word	0x080076dc
 8005100:	080076dc 	.word	0x080076dc
 8005104:	080076dc 	.word	0x080076dc
 8005108:	080076e0 	.word	0x080076e0

0800510c <__retarget_lock_acquire_recursive>:
 800510c:	4770      	bx	lr

0800510e <__retarget_lock_release_recursive>:
 800510e:	4770      	bx	lr

08005110 <memchr>:
 8005110:	4603      	mov	r3, r0
 8005112:	b510      	push	{r4, lr}
 8005114:	b2c9      	uxtb	r1, r1
 8005116:	4402      	add	r2, r0
 8005118:	4293      	cmp	r3, r2
 800511a:	4618      	mov	r0, r3
 800511c:	d101      	bne.n	8005122 <memchr+0x12>
 800511e:	2000      	movs	r0, #0
 8005120:	e003      	b.n	800512a <memchr+0x1a>
 8005122:	7804      	ldrb	r4, [r0, #0]
 8005124:	3301      	adds	r3, #1
 8005126:	428c      	cmp	r4, r1
 8005128:	d1f6      	bne.n	8005118 <memchr+0x8>
 800512a:	bd10      	pop	{r4, pc}

0800512c <quorem>:
 800512c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005130:	6903      	ldr	r3, [r0, #16]
 8005132:	690c      	ldr	r4, [r1, #16]
 8005134:	4607      	mov	r7, r0
 8005136:	42a3      	cmp	r3, r4
 8005138:	db7f      	blt.n	800523a <quorem+0x10e>
 800513a:	3c01      	subs	r4, #1
 800513c:	f100 0514 	add.w	r5, r0, #20
 8005140:	f101 0814 	add.w	r8, r1, #20
 8005144:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8005148:	9301      	str	r3, [sp, #4]
 800514a:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 800514e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8005152:	3301      	adds	r3, #1
 8005154:	429a      	cmp	r2, r3
 8005156:	fbb2 f6f3 	udiv	r6, r2, r3
 800515a:	ea4f 0b84 	mov.w	fp, r4, lsl #2
 800515e:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8005162:	d331      	bcc.n	80051c8 <quorem+0x9c>
 8005164:	f04f 0e00 	mov.w	lr, #0
 8005168:	4640      	mov	r0, r8
 800516a:	46ac      	mov	ip, r5
 800516c:	46f2      	mov	sl, lr
 800516e:	f850 2b04 	ldr.w	r2, [r0], #4
 8005172:	b293      	uxth	r3, r2
 8005174:	fb06 e303 	mla	r3, r6, r3, lr
 8005178:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 800517c:	0c1a      	lsrs	r2, r3, #16
 800517e:	b29b      	uxth	r3, r3
 8005180:	fb06 220e 	mla	r2, r6, lr, r2
 8005184:	ebaa 0303 	sub.w	r3, sl, r3
 8005188:	f8dc a000 	ldr.w	sl, [ip]
 800518c:	ea4f 4e12 	mov.w	lr, r2, lsr #16
 8005190:	fa1f fa8a 	uxth.w	sl, sl
 8005194:	4453      	add	r3, sl
 8005196:	f8dc a000 	ldr.w	sl, [ip]
 800519a:	b292      	uxth	r2, r2
 800519c:	ebc2 421a 	rsb	r2, r2, sl, lsr #16
 80051a0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051a4:	b29b      	uxth	r3, r3
 80051a6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051aa:	4581      	cmp	r9, r0
 80051ac:	ea4f 4a22 	mov.w	sl, r2, asr #16
 80051b0:	f84c 3b04 	str.w	r3, [ip], #4
 80051b4:	d2db      	bcs.n	800516e <quorem+0x42>
 80051b6:	f855 300b 	ldr.w	r3, [r5, fp]
 80051ba:	b92b      	cbnz	r3, 80051c8 <quorem+0x9c>
 80051bc:	9b01      	ldr	r3, [sp, #4]
 80051be:	3b04      	subs	r3, #4
 80051c0:	429d      	cmp	r5, r3
 80051c2:	461a      	mov	r2, r3
 80051c4:	d32d      	bcc.n	8005222 <quorem+0xf6>
 80051c6:	613c      	str	r4, [r7, #16]
 80051c8:	4638      	mov	r0, r7
 80051ca:	f001 f993 	bl	80064f4 <__mcmp>
 80051ce:	2800      	cmp	r0, #0
 80051d0:	db23      	blt.n	800521a <quorem+0xee>
 80051d2:	4629      	mov	r1, r5
 80051d4:	2000      	movs	r0, #0
 80051d6:	3601      	adds	r6, #1
 80051d8:	f858 2b04 	ldr.w	r2, [r8], #4
 80051dc:	f8d1 c000 	ldr.w	ip, [r1]
 80051e0:	b293      	uxth	r3, r2
 80051e2:	1ac3      	subs	r3, r0, r3
 80051e4:	0c12      	lsrs	r2, r2, #16
 80051e6:	fa1f f08c 	uxth.w	r0, ip
 80051ea:	4403      	add	r3, r0
 80051ec:	ebc2 421c 	rsb	r2, r2, ip, lsr #16
 80051f0:	eb02 4223 	add.w	r2, r2, r3, asr #16
 80051f4:	b29b      	uxth	r3, r3
 80051f6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80051fa:	45c1      	cmp	r9, r8
 80051fc:	ea4f 4022 	mov.w	r0, r2, asr #16
 8005200:	f841 3b04 	str.w	r3, [r1], #4
 8005204:	d2e8      	bcs.n	80051d8 <quorem+0xac>
 8005206:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800520a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800520e:	b922      	cbnz	r2, 800521a <quorem+0xee>
 8005210:	3b04      	subs	r3, #4
 8005212:	429d      	cmp	r5, r3
 8005214:	461a      	mov	r2, r3
 8005216:	d30a      	bcc.n	800522e <quorem+0x102>
 8005218:	613c      	str	r4, [r7, #16]
 800521a:	4630      	mov	r0, r6
 800521c:	b003      	add	sp, #12
 800521e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005222:	6812      	ldr	r2, [r2, #0]
 8005224:	3b04      	subs	r3, #4
 8005226:	2a00      	cmp	r2, #0
 8005228:	d1cd      	bne.n	80051c6 <quorem+0x9a>
 800522a:	3c01      	subs	r4, #1
 800522c:	e7c8      	b.n	80051c0 <quorem+0x94>
 800522e:	6812      	ldr	r2, [r2, #0]
 8005230:	3b04      	subs	r3, #4
 8005232:	2a00      	cmp	r2, #0
 8005234:	d1f0      	bne.n	8005218 <quorem+0xec>
 8005236:	3c01      	subs	r4, #1
 8005238:	e7eb      	b.n	8005212 <quorem+0xe6>
 800523a:	2000      	movs	r0, #0
 800523c:	e7ee      	b.n	800521c <quorem+0xf0>
	...

08005240 <_dtoa_r>:
 8005240:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005244:	4616      	mov	r6, r2
 8005246:	461f      	mov	r7, r3
 8005248:	69c4      	ldr	r4, [r0, #28]
 800524a:	b099      	sub	sp, #100	; 0x64
 800524c:	4605      	mov	r5, r0
 800524e:	e9cd 6704 	strd	r6, r7, [sp, #16]
 8005252:	f8dd 8094 	ldr.w	r8, [sp, #148]	; 0x94
 8005256:	b974      	cbnz	r4, 8005276 <_dtoa_r+0x36>
 8005258:	2010      	movs	r0, #16
 800525a:	f000 fe1d 	bl	8005e98 <malloc>
 800525e:	4602      	mov	r2, r0
 8005260:	61e8      	str	r0, [r5, #28]
 8005262:	b920      	cbnz	r0, 800526e <_dtoa_r+0x2e>
 8005264:	21ef      	movs	r1, #239	; 0xef
 8005266:	4bac      	ldr	r3, [pc, #688]	; (8005518 <_dtoa_r+0x2d8>)
 8005268:	48ac      	ldr	r0, [pc, #688]	; (800551c <_dtoa_r+0x2dc>)
 800526a:	f001 fc7b 	bl	8006b64 <__assert_func>
 800526e:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8005272:	6004      	str	r4, [r0, #0]
 8005274:	60c4      	str	r4, [r0, #12]
 8005276:	69eb      	ldr	r3, [r5, #28]
 8005278:	6819      	ldr	r1, [r3, #0]
 800527a:	b151      	cbz	r1, 8005292 <_dtoa_r+0x52>
 800527c:	685a      	ldr	r2, [r3, #4]
 800527e:	2301      	movs	r3, #1
 8005280:	4093      	lsls	r3, r2
 8005282:	604a      	str	r2, [r1, #4]
 8005284:	608b      	str	r3, [r1, #8]
 8005286:	4628      	mov	r0, r5
 8005288:	f000 fefa 	bl	8006080 <_Bfree>
 800528c:	2200      	movs	r2, #0
 800528e:	69eb      	ldr	r3, [r5, #28]
 8005290:	601a      	str	r2, [r3, #0]
 8005292:	1e3b      	subs	r3, r7, #0
 8005294:	bfaf      	iteee	ge
 8005296:	2300      	movge	r3, #0
 8005298:	2201      	movlt	r2, #1
 800529a:	f023 4300 	biclt.w	r3, r3, #2147483648	; 0x80000000
 800529e:	9305      	strlt	r3, [sp, #20]
 80052a0:	bfa8      	it	ge
 80052a2:	f8c8 3000 	strge.w	r3, [r8]
 80052a6:	f8dd 9014 	ldr.w	r9, [sp, #20]
 80052aa:	4b9d      	ldr	r3, [pc, #628]	; (8005520 <_dtoa_r+0x2e0>)
 80052ac:	bfb8      	it	lt
 80052ae:	f8c8 2000 	strlt.w	r2, [r8]
 80052b2:	ea33 0309 	bics.w	r3, r3, r9
 80052b6:	d119      	bne.n	80052ec <_dtoa_r+0xac>
 80052b8:	f242 730f 	movw	r3, #9999	; 0x270f
 80052bc:	9a24      	ldr	r2, [sp, #144]	; 0x90
 80052be:	6013      	str	r3, [r2, #0]
 80052c0:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80052c4:	4333      	orrs	r3, r6
 80052c6:	f000 8589 	beq.w	8005ddc <_dtoa_r+0xb9c>
 80052ca:	9b26      	ldr	r3, [sp, #152]	; 0x98
 80052cc:	b953      	cbnz	r3, 80052e4 <_dtoa_r+0xa4>
 80052ce:	4b95      	ldr	r3, [pc, #596]	; (8005524 <_dtoa_r+0x2e4>)
 80052d0:	e023      	b.n	800531a <_dtoa_r+0xda>
 80052d2:	4b95      	ldr	r3, [pc, #596]	; (8005528 <_dtoa_r+0x2e8>)
 80052d4:	9303      	str	r3, [sp, #12]
 80052d6:	3308      	adds	r3, #8
 80052d8:	9a26      	ldr	r2, [sp, #152]	; 0x98
 80052da:	6013      	str	r3, [r2, #0]
 80052dc:	9803      	ldr	r0, [sp, #12]
 80052de:	b019      	add	sp, #100	; 0x64
 80052e0:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80052e4:	4b8f      	ldr	r3, [pc, #572]	; (8005524 <_dtoa_r+0x2e4>)
 80052e6:	9303      	str	r3, [sp, #12]
 80052e8:	3303      	adds	r3, #3
 80052ea:	e7f5      	b.n	80052d8 <_dtoa_r+0x98>
 80052ec:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 80052f0:	e9cd 340c 	strd	r3, r4, [sp, #48]	; 0x30
 80052f4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80052f8:	2200      	movs	r2, #0
 80052fa:	2300      	movs	r3, #0
 80052fc:	f7fb fc08 	bl	8000b10 <__aeabi_dcmpeq>
 8005300:	4680      	mov	r8, r0
 8005302:	b160      	cbz	r0, 800531e <_dtoa_r+0xde>
 8005304:	2301      	movs	r3, #1
 8005306:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005308:	6013      	str	r3, [r2, #0]
 800530a:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800530c:	2b00      	cmp	r3, #0
 800530e:	f000 8562 	beq.w	8005dd6 <_dtoa_r+0xb96>
 8005312:	4b86      	ldr	r3, [pc, #536]	; (800552c <_dtoa_r+0x2ec>)
 8005314:	9a26      	ldr	r2, [sp, #152]	; 0x98
 8005316:	6013      	str	r3, [r2, #0]
 8005318:	3b01      	subs	r3, #1
 800531a:	9303      	str	r3, [sp, #12]
 800531c:	e7de      	b.n	80052dc <_dtoa_r+0x9c>
 800531e:	ab16      	add	r3, sp, #88	; 0x58
 8005320:	9301      	str	r3, [sp, #4]
 8005322:	ab17      	add	r3, sp, #92	; 0x5c
 8005324:	9300      	str	r3, [sp, #0]
 8005326:	4628      	mov	r0, r5
 8005328:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	; 0x30
 800532c:	f001 f98a 	bl	8006644 <__d2b>
 8005330:	f3c9 540a 	ubfx	r4, r9, #20, #11
 8005334:	4682      	mov	sl, r0
 8005336:	2c00      	cmp	r4, #0
 8005338:	d07e      	beq.n	8005438 <_dtoa_r+0x1f8>
 800533a:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800533e:	9b0d      	ldr	r3, [sp, #52]	; 0x34
 8005340:	f2a4 34ff 	subw	r4, r4, #1023	; 0x3ff
 8005344:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005348:	f043 537f 	orr.w	r3, r3, #1069547520	; 0x3fc00000
 800534c:	f443 1340 	orr.w	r3, r3, #3145728	; 0x300000
 8005350:	f8cd 804c 	str.w	r8, [sp, #76]	; 0x4c
 8005354:	4619      	mov	r1, r3
 8005356:	2200      	movs	r2, #0
 8005358:	4b75      	ldr	r3, [pc, #468]	; (8005530 <_dtoa_r+0x2f0>)
 800535a:	f7fa ffb9 	bl	80002d0 <__aeabi_dsub>
 800535e:	a368      	add	r3, pc, #416	; (adr r3, 8005500 <_dtoa_r+0x2c0>)
 8005360:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005364:	f7fb f96c 	bl	8000640 <__aeabi_dmul>
 8005368:	a367      	add	r3, pc, #412	; (adr r3, 8005508 <_dtoa_r+0x2c8>)
 800536a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800536e:	f7fa ffb1 	bl	80002d4 <__adddf3>
 8005372:	4606      	mov	r6, r0
 8005374:	4620      	mov	r0, r4
 8005376:	460f      	mov	r7, r1
 8005378:	f7fb f8f8 	bl	800056c <__aeabi_i2d>
 800537c:	a364      	add	r3, pc, #400	; (adr r3, 8005510 <_dtoa_r+0x2d0>)
 800537e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005382:	f7fb f95d 	bl	8000640 <__aeabi_dmul>
 8005386:	4602      	mov	r2, r0
 8005388:	460b      	mov	r3, r1
 800538a:	4630      	mov	r0, r6
 800538c:	4639      	mov	r1, r7
 800538e:	f7fa ffa1 	bl	80002d4 <__adddf3>
 8005392:	4606      	mov	r6, r0
 8005394:	460f      	mov	r7, r1
 8005396:	f7fb fc03 	bl	8000ba0 <__aeabi_d2iz>
 800539a:	2200      	movs	r2, #0
 800539c:	4683      	mov	fp, r0
 800539e:	2300      	movs	r3, #0
 80053a0:	4630      	mov	r0, r6
 80053a2:	4639      	mov	r1, r7
 80053a4:	f7fb fbbe 	bl	8000b24 <__aeabi_dcmplt>
 80053a8:	b148      	cbz	r0, 80053be <_dtoa_r+0x17e>
 80053aa:	4658      	mov	r0, fp
 80053ac:	f7fb f8de 	bl	800056c <__aeabi_i2d>
 80053b0:	4632      	mov	r2, r6
 80053b2:	463b      	mov	r3, r7
 80053b4:	f7fb fbac 	bl	8000b10 <__aeabi_dcmpeq>
 80053b8:	b908      	cbnz	r0, 80053be <_dtoa_r+0x17e>
 80053ba:	f10b 3bff 	add.w	fp, fp, #4294967295
 80053be:	f1bb 0f16 	cmp.w	fp, #22
 80053c2:	d857      	bhi.n	8005474 <_dtoa_r+0x234>
 80053c4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80053c8:	4b5a      	ldr	r3, [pc, #360]	; (8005534 <_dtoa_r+0x2f4>)
 80053ca:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80053ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80053d2:	f7fb fba7 	bl	8000b24 <__aeabi_dcmplt>
 80053d6:	2800      	cmp	r0, #0
 80053d8:	d04e      	beq.n	8005478 <_dtoa_r+0x238>
 80053da:	2300      	movs	r3, #0
 80053dc:	f10b 3bff 	add.w	fp, fp, #4294967295
 80053e0:	930f      	str	r3, [sp, #60]	; 0x3c
 80053e2:	9b16      	ldr	r3, [sp, #88]	; 0x58
 80053e4:	1b1b      	subs	r3, r3, r4
 80053e6:	1e5a      	subs	r2, r3, #1
 80053e8:	bf46      	itte	mi
 80053ea:	f1c3 0901 	rsbmi	r9, r3, #1
 80053ee:	2300      	movmi	r3, #0
 80053f0:	f04f 0900 	movpl.w	r9, #0
 80053f4:	9209      	str	r2, [sp, #36]	; 0x24
 80053f6:	bf48      	it	mi
 80053f8:	9309      	strmi	r3, [sp, #36]	; 0x24
 80053fa:	f1bb 0f00 	cmp.w	fp, #0
 80053fe:	db3d      	blt.n	800547c <_dtoa_r+0x23c>
 8005400:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005402:	f8cd b038 	str.w	fp, [sp, #56]	; 0x38
 8005406:	445b      	add	r3, fp
 8005408:	9309      	str	r3, [sp, #36]	; 0x24
 800540a:	2300      	movs	r3, #0
 800540c:	930a      	str	r3, [sp, #40]	; 0x28
 800540e:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005410:	2b09      	cmp	r3, #9
 8005412:	d867      	bhi.n	80054e4 <_dtoa_r+0x2a4>
 8005414:	2b05      	cmp	r3, #5
 8005416:	bfc4      	itt	gt
 8005418:	3b04      	subgt	r3, #4
 800541a:	9322      	strgt	r3, [sp, #136]	; 0x88
 800541c:	9b22      	ldr	r3, [sp, #136]	; 0x88
 800541e:	bfc8      	it	gt
 8005420:	2400      	movgt	r4, #0
 8005422:	f1a3 0302 	sub.w	r3, r3, #2
 8005426:	bfd8      	it	le
 8005428:	2401      	movle	r4, #1
 800542a:	2b03      	cmp	r3, #3
 800542c:	f200 8086 	bhi.w	800553c <_dtoa_r+0x2fc>
 8005430:	e8df f003 	tbb	[pc, r3]
 8005434:	5637392c 	.word	0x5637392c
 8005438:	e9dd 4316 	ldrd	r4, r3, [sp, #88]	; 0x58
 800543c:	441c      	add	r4, r3
 800543e:	f204 4332 	addw	r3, r4, #1074	; 0x432
 8005442:	2b20      	cmp	r3, #32
 8005444:	bfc1      	itttt	gt
 8005446:	f1c3 0340 	rsbgt	r3, r3, #64	; 0x40
 800544a:	fa09 f903 	lslgt.w	r9, r9, r3
 800544e:	f204 4312 	addwgt	r3, r4, #1042	; 0x412
 8005452:	fa26 f303 	lsrgt.w	r3, r6, r3
 8005456:	bfd6      	itet	le
 8005458:	f1c3 0320 	rsble	r3, r3, #32
 800545c:	ea49 0003 	orrgt.w	r0, r9, r3
 8005460:	fa06 f003 	lslle.w	r0, r6, r3
 8005464:	f7fb f872 	bl	800054c <__aeabi_ui2d>
 8005468:	2201      	movs	r2, #1
 800546a:	f1a1 73f8 	sub.w	r3, r1, #32505856	; 0x1f00000
 800546e:	3c01      	subs	r4, #1
 8005470:	9213      	str	r2, [sp, #76]	; 0x4c
 8005472:	e76f      	b.n	8005354 <_dtoa_r+0x114>
 8005474:	2301      	movs	r3, #1
 8005476:	e7b3      	b.n	80053e0 <_dtoa_r+0x1a0>
 8005478:	900f      	str	r0, [sp, #60]	; 0x3c
 800547a:	e7b2      	b.n	80053e2 <_dtoa_r+0x1a2>
 800547c:	f1cb 0300 	rsb	r3, fp, #0
 8005480:	930a      	str	r3, [sp, #40]	; 0x28
 8005482:	2300      	movs	r3, #0
 8005484:	eba9 090b 	sub.w	r9, r9, fp
 8005488:	930e      	str	r3, [sp, #56]	; 0x38
 800548a:	e7c0      	b.n	800540e <_dtoa_r+0x1ce>
 800548c:	2300      	movs	r3, #0
 800548e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005490:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005492:	2b00      	cmp	r3, #0
 8005494:	dc55      	bgt.n	8005542 <_dtoa_r+0x302>
 8005496:	2301      	movs	r3, #1
 8005498:	461a      	mov	r2, r3
 800549a:	9306      	str	r3, [sp, #24]
 800549c:	9308      	str	r3, [sp, #32]
 800549e:	9223      	str	r2, [sp, #140]	; 0x8c
 80054a0:	e00b      	b.n	80054ba <_dtoa_r+0x27a>
 80054a2:	2301      	movs	r3, #1
 80054a4:	e7f3      	b.n	800548e <_dtoa_r+0x24e>
 80054a6:	2300      	movs	r3, #0
 80054a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80054aa:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80054ac:	445b      	add	r3, fp
 80054ae:	9306      	str	r3, [sp, #24]
 80054b0:	3301      	adds	r3, #1
 80054b2:	2b01      	cmp	r3, #1
 80054b4:	9308      	str	r3, [sp, #32]
 80054b6:	bfb8      	it	lt
 80054b8:	2301      	movlt	r3, #1
 80054ba:	2100      	movs	r1, #0
 80054bc:	2204      	movs	r2, #4
 80054be:	69e8      	ldr	r0, [r5, #28]
 80054c0:	f102 0614 	add.w	r6, r2, #20
 80054c4:	429e      	cmp	r6, r3
 80054c6:	d940      	bls.n	800554a <_dtoa_r+0x30a>
 80054c8:	6041      	str	r1, [r0, #4]
 80054ca:	4628      	mov	r0, r5
 80054cc:	f000 fd98 	bl	8006000 <_Balloc>
 80054d0:	9003      	str	r0, [sp, #12]
 80054d2:	2800      	cmp	r0, #0
 80054d4:	d13c      	bne.n	8005550 <_dtoa_r+0x310>
 80054d6:	4602      	mov	r2, r0
 80054d8:	f240 11af 	movw	r1, #431	; 0x1af
 80054dc:	4b16      	ldr	r3, [pc, #88]	; (8005538 <_dtoa_r+0x2f8>)
 80054de:	e6c3      	b.n	8005268 <_dtoa_r+0x28>
 80054e0:	2301      	movs	r3, #1
 80054e2:	e7e1      	b.n	80054a8 <_dtoa_r+0x268>
 80054e4:	2401      	movs	r4, #1
 80054e6:	2300      	movs	r3, #0
 80054e8:	940b      	str	r4, [sp, #44]	; 0x2c
 80054ea:	9322      	str	r3, [sp, #136]	; 0x88
 80054ec:	f04f 33ff 	mov.w	r3, #4294967295
 80054f0:	2200      	movs	r2, #0
 80054f2:	9306      	str	r3, [sp, #24]
 80054f4:	9308      	str	r3, [sp, #32]
 80054f6:	2312      	movs	r3, #18
 80054f8:	e7d1      	b.n	800549e <_dtoa_r+0x25e>
 80054fa:	bf00      	nop
 80054fc:	f3af 8000 	nop.w
 8005500:	636f4361 	.word	0x636f4361
 8005504:	3fd287a7 	.word	0x3fd287a7
 8005508:	8b60c8b3 	.word	0x8b60c8b3
 800550c:	3fc68a28 	.word	0x3fc68a28
 8005510:	509f79fb 	.word	0x509f79fb
 8005514:	3fd34413 	.word	0x3fd34413
 8005518:	080073ab 	.word	0x080073ab
 800551c:	080073c2 	.word	0x080073c2
 8005520:	7ff00000 	.word	0x7ff00000
 8005524:	080073a7 	.word	0x080073a7
 8005528:	0800739e 	.word	0x0800739e
 800552c:	0800737b 	.word	0x0800737b
 8005530:	3ff80000 	.word	0x3ff80000
 8005534:	080074b0 	.word	0x080074b0
 8005538:	0800741a 	.word	0x0800741a
 800553c:	2301      	movs	r3, #1
 800553e:	930b      	str	r3, [sp, #44]	; 0x2c
 8005540:	e7d4      	b.n	80054ec <_dtoa_r+0x2ac>
 8005542:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005544:	9306      	str	r3, [sp, #24]
 8005546:	9308      	str	r3, [sp, #32]
 8005548:	e7b7      	b.n	80054ba <_dtoa_r+0x27a>
 800554a:	3101      	adds	r1, #1
 800554c:	0052      	lsls	r2, r2, #1
 800554e:	e7b7      	b.n	80054c0 <_dtoa_r+0x280>
 8005550:	69eb      	ldr	r3, [r5, #28]
 8005552:	9a03      	ldr	r2, [sp, #12]
 8005554:	601a      	str	r2, [r3, #0]
 8005556:	9b08      	ldr	r3, [sp, #32]
 8005558:	2b0e      	cmp	r3, #14
 800555a:	f200 80a8 	bhi.w	80056ae <_dtoa_r+0x46e>
 800555e:	2c00      	cmp	r4, #0
 8005560:	f000 80a5 	beq.w	80056ae <_dtoa_r+0x46e>
 8005564:	f1bb 0f00 	cmp.w	fp, #0
 8005568:	dd34      	ble.n	80055d4 <_dtoa_r+0x394>
 800556a:	4b9a      	ldr	r3, [pc, #616]	; (80057d4 <_dtoa_r+0x594>)
 800556c:	f00b 020f 	and.w	r2, fp, #15
 8005570:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8005574:	f41b 7f80 	tst.w	fp, #256	; 0x100
 8005578:	e9d3 3400 	ldrd	r3, r4, [r3]
 800557c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005580:	ea4f 142b 	mov.w	r4, fp, asr #4
 8005584:	d016      	beq.n	80055b4 <_dtoa_r+0x374>
 8005586:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 800558a:	4b93      	ldr	r3, [pc, #588]	; (80057d8 <_dtoa_r+0x598>)
 800558c:	2703      	movs	r7, #3
 800558e:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8005592:	f7fb f97f 	bl	8000894 <__aeabi_ddiv>
 8005596:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800559a:	f004 040f 	and.w	r4, r4, #15
 800559e:	4e8e      	ldr	r6, [pc, #568]	; (80057d8 <_dtoa_r+0x598>)
 80055a0:	b954      	cbnz	r4, 80055b8 <_dtoa_r+0x378>
 80055a2:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80055a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80055aa:	f7fb f973 	bl	8000894 <__aeabi_ddiv>
 80055ae:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055b2:	e029      	b.n	8005608 <_dtoa_r+0x3c8>
 80055b4:	2702      	movs	r7, #2
 80055b6:	e7f2      	b.n	800559e <_dtoa_r+0x35e>
 80055b8:	07e1      	lsls	r1, r4, #31
 80055ba:	d508      	bpl.n	80055ce <_dtoa_r+0x38e>
 80055bc:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80055c0:	e9d6 2300 	ldrd	r2, r3, [r6]
 80055c4:	f7fb f83c 	bl	8000640 <__aeabi_dmul>
 80055c8:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80055cc:	3701      	adds	r7, #1
 80055ce:	1064      	asrs	r4, r4, #1
 80055d0:	3608      	adds	r6, #8
 80055d2:	e7e5      	b.n	80055a0 <_dtoa_r+0x360>
 80055d4:	f000 80a5 	beq.w	8005722 <_dtoa_r+0x4e2>
 80055d8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	; 0x30
 80055dc:	f1cb 0400 	rsb	r4, fp, #0
 80055e0:	4b7c      	ldr	r3, [pc, #496]	; (80057d4 <_dtoa_r+0x594>)
 80055e2:	f004 020f 	and.w	r2, r4, #15
 80055e6:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80055ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055ee:	f7fb f827 	bl	8000640 <__aeabi_dmul>
 80055f2:	2702      	movs	r7, #2
 80055f4:	2300      	movs	r3, #0
 80055f6:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80055fa:	4e77      	ldr	r6, [pc, #476]	; (80057d8 <_dtoa_r+0x598>)
 80055fc:	1124      	asrs	r4, r4, #4
 80055fe:	2c00      	cmp	r4, #0
 8005600:	f040 8084 	bne.w	800570c <_dtoa_r+0x4cc>
 8005604:	2b00      	cmp	r3, #0
 8005606:	d1d2      	bne.n	80055ae <_dtoa_r+0x36e>
 8005608:	e9dd 3404 	ldrd	r3, r4, [sp, #16]
 800560c:	e9cd 3410 	strd	r3, r4, [sp, #64]	; 0x40
 8005610:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005612:	2b00      	cmp	r3, #0
 8005614:	f000 8087 	beq.w	8005726 <_dtoa_r+0x4e6>
 8005618:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 800561c:	2200      	movs	r2, #0
 800561e:	4b6f      	ldr	r3, [pc, #444]	; (80057dc <_dtoa_r+0x59c>)
 8005620:	f7fb fa80 	bl	8000b24 <__aeabi_dcmplt>
 8005624:	2800      	cmp	r0, #0
 8005626:	d07e      	beq.n	8005726 <_dtoa_r+0x4e6>
 8005628:	9b08      	ldr	r3, [sp, #32]
 800562a:	2b00      	cmp	r3, #0
 800562c:	d07b      	beq.n	8005726 <_dtoa_r+0x4e6>
 800562e:	9b06      	ldr	r3, [sp, #24]
 8005630:	2b00      	cmp	r3, #0
 8005632:	dd38      	ble.n	80056a6 <_dtoa_r+0x466>
 8005634:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005638:	2200      	movs	r2, #0
 800563a:	4b69      	ldr	r3, [pc, #420]	; (80057e0 <_dtoa_r+0x5a0>)
 800563c:	f7fb f800 	bl	8000640 <__aeabi_dmul>
 8005640:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005644:	9c06      	ldr	r4, [sp, #24]
 8005646:	f10b 38ff 	add.w	r8, fp, #4294967295
 800564a:	3701      	adds	r7, #1
 800564c:	4638      	mov	r0, r7
 800564e:	f7fa ff8d 	bl	800056c <__aeabi_i2d>
 8005652:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005656:	f7fa fff3 	bl	8000640 <__aeabi_dmul>
 800565a:	2200      	movs	r2, #0
 800565c:	4b61      	ldr	r3, [pc, #388]	; (80057e4 <_dtoa_r+0x5a4>)
 800565e:	f7fa fe39 	bl	80002d4 <__adddf3>
 8005662:	f1a1 7650 	sub.w	r6, r1, #54525952	; 0x3400000
 8005666:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800566a:	9611      	str	r6, [sp, #68]	; 0x44
 800566c:	2c00      	cmp	r4, #0
 800566e:	d15d      	bne.n	800572c <_dtoa_r+0x4ec>
 8005670:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005674:	2200      	movs	r2, #0
 8005676:	4b5c      	ldr	r3, [pc, #368]	; (80057e8 <_dtoa_r+0x5a8>)
 8005678:	f7fa fe2a 	bl	80002d0 <__aeabi_dsub>
 800567c:	4602      	mov	r2, r0
 800567e:	460b      	mov	r3, r1
 8005680:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005684:	4633      	mov	r3, r6
 8005686:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005688:	f7fb fa6a 	bl	8000b60 <__aeabi_dcmpgt>
 800568c:	2800      	cmp	r0, #0
 800568e:	f040 8295 	bne.w	8005bbc <_dtoa_r+0x97c>
 8005692:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005696:	9a10      	ldr	r2, [sp, #64]	; 0x40
 8005698:	f106 4300 	add.w	r3, r6, #2147483648	; 0x80000000
 800569c:	f7fb fa42 	bl	8000b24 <__aeabi_dcmplt>
 80056a0:	2800      	cmp	r0, #0
 80056a2:	f040 8289 	bne.w	8005bb8 <_dtoa_r+0x978>
 80056a6:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	; 0x30
 80056aa:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80056ae:	9b17      	ldr	r3, [sp, #92]	; 0x5c
 80056b0:	2b00      	cmp	r3, #0
 80056b2:	f2c0 8151 	blt.w	8005958 <_dtoa_r+0x718>
 80056b6:	f1bb 0f0e 	cmp.w	fp, #14
 80056ba:	f300 814d 	bgt.w	8005958 <_dtoa_r+0x718>
 80056be:	4b45      	ldr	r3, [pc, #276]	; (80057d4 <_dtoa_r+0x594>)
 80056c0:	eb03 03cb 	add.w	r3, r3, fp, lsl #3
 80056c4:	e9d3 3400 	ldrd	r3, r4, [r3]
 80056c8:	e9cd 3406 	strd	r3, r4, [sp, #24]
 80056cc:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 80056ce:	2b00      	cmp	r3, #0
 80056d0:	f280 80da 	bge.w	8005888 <_dtoa_r+0x648>
 80056d4:	9b08      	ldr	r3, [sp, #32]
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	f300 80d6 	bgt.w	8005888 <_dtoa_r+0x648>
 80056dc:	f040 826b 	bne.w	8005bb6 <_dtoa_r+0x976>
 80056e0:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80056e4:	2200      	movs	r2, #0
 80056e6:	4b40      	ldr	r3, [pc, #256]	; (80057e8 <_dtoa_r+0x5a8>)
 80056e8:	f7fa ffaa 	bl	8000640 <__aeabi_dmul>
 80056ec:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80056f0:	f7fb fa2c 	bl	8000b4c <__aeabi_dcmpge>
 80056f4:	9c08      	ldr	r4, [sp, #32]
 80056f6:	4626      	mov	r6, r4
 80056f8:	2800      	cmp	r0, #0
 80056fa:	f040 8241 	bne.w	8005b80 <_dtoa_r+0x940>
 80056fe:	2331      	movs	r3, #49	; 0x31
 8005700:	9f03      	ldr	r7, [sp, #12]
 8005702:	f10b 0b01 	add.w	fp, fp, #1
 8005706:	f807 3b01 	strb.w	r3, [r7], #1
 800570a:	e23d      	b.n	8005b88 <_dtoa_r+0x948>
 800570c:	07e2      	lsls	r2, r4, #31
 800570e:	d505      	bpl.n	800571c <_dtoa_r+0x4dc>
 8005710:	e9d6 2300 	ldrd	r2, r3, [r6]
 8005714:	f7fa ff94 	bl	8000640 <__aeabi_dmul>
 8005718:	2301      	movs	r3, #1
 800571a:	3701      	adds	r7, #1
 800571c:	1064      	asrs	r4, r4, #1
 800571e:	3608      	adds	r6, #8
 8005720:	e76d      	b.n	80055fe <_dtoa_r+0x3be>
 8005722:	2702      	movs	r7, #2
 8005724:	e770      	b.n	8005608 <_dtoa_r+0x3c8>
 8005726:	46d8      	mov	r8, fp
 8005728:	9c08      	ldr	r4, [sp, #32]
 800572a:	e78f      	b.n	800564c <_dtoa_r+0x40c>
 800572c:	9903      	ldr	r1, [sp, #12]
 800572e:	4b29      	ldr	r3, [pc, #164]	; (80057d4 <_dtoa_r+0x594>)
 8005730:	4421      	add	r1, r4
 8005732:	9112      	str	r1, [sp, #72]	; 0x48
 8005734:	990b      	ldr	r1, [sp, #44]	; 0x2c
 8005736:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 800573a:	e9dd 6710 	ldrd	r6, r7, [sp, #64]	; 0x40
 800573e:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8005742:	2900      	cmp	r1, #0
 8005744:	d054      	beq.n	80057f0 <_dtoa_r+0x5b0>
 8005746:	2000      	movs	r0, #0
 8005748:	4928      	ldr	r1, [pc, #160]	; (80057ec <_dtoa_r+0x5ac>)
 800574a:	f7fb f8a3 	bl	8000894 <__aeabi_ddiv>
 800574e:	463b      	mov	r3, r7
 8005750:	4632      	mov	r2, r6
 8005752:	f7fa fdbd 	bl	80002d0 <__aeabi_dsub>
 8005756:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 800575a:	9f03      	ldr	r7, [sp, #12]
 800575c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005760:	f7fb fa1e 	bl	8000ba0 <__aeabi_d2iz>
 8005764:	4604      	mov	r4, r0
 8005766:	f7fa ff01 	bl	800056c <__aeabi_i2d>
 800576a:	4602      	mov	r2, r0
 800576c:	460b      	mov	r3, r1
 800576e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005772:	f7fa fdad 	bl	80002d0 <__aeabi_dsub>
 8005776:	4602      	mov	r2, r0
 8005778:	460b      	mov	r3, r1
 800577a:	3430      	adds	r4, #48	; 0x30
 800577c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005780:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005784:	f807 4b01 	strb.w	r4, [r7], #1
 8005788:	f7fb f9cc 	bl	8000b24 <__aeabi_dcmplt>
 800578c:	2800      	cmp	r0, #0
 800578e:	d173      	bne.n	8005878 <_dtoa_r+0x638>
 8005790:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005794:	2000      	movs	r0, #0
 8005796:	4911      	ldr	r1, [pc, #68]	; (80057dc <_dtoa_r+0x59c>)
 8005798:	f7fa fd9a 	bl	80002d0 <__aeabi_dsub>
 800579c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 80057a0:	f7fb f9c0 	bl	8000b24 <__aeabi_dcmplt>
 80057a4:	2800      	cmp	r0, #0
 80057a6:	f040 80b6 	bne.w	8005916 <_dtoa_r+0x6d6>
 80057aa:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80057ac:	429f      	cmp	r7, r3
 80057ae:	f43f af7a 	beq.w	80056a6 <_dtoa_r+0x466>
 80057b2:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 80057b6:	2200      	movs	r2, #0
 80057b8:	4b09      	ldr	r3, [pc, #36]	; (80057e0 <_dtoa_r+0x5a0>)
 80057ba:	f7fa ff41 	bl	8000640 <__aeabi_dmul>
 80057be:	2200      	movs	r2, #0
 80057c0:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80057c4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80057c8:	4b05      	ldr	r3, [pc, #20]	; (80057e0 <_dtoa_r+0x5a0>)
 80057ca:	f7fa ff39 	bl	8000640 <__aeabi_dmul>
 80057ce:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80057d2:	e7c3      	b.n	800575c <_dtoa_r+0x51c>
 80057d4:	080074b0 	.word	0x080074b0
 80057d8:	08007488 	.word	0x08007488
 80057dc:	3ff00000 	.word	0x3ff00000
 80057e0:	40240000 	.word	0x40240000
 80057e4:	401c0000 	.word	0x401c0000
 80057e8:	40140000 	.word	0x40140000
 80057ec:	3fe00000 	.word	0x3fe00000
 80057f0:	4630      	mov	r0, r6
 80057f2:	4639      	mov	r1, r7
 80057f4:	f7fa ff24 	bl	8000640 <__aeabi_dmul>
 80057f8:	9b12      	ldr	r3, [sp, #72]	; 0x48
 80057fa:	e9cd 0110 	strd	r0, r1, [sp, #64]	; 0x40
 80057fe:	9c03      	ldr	r4, [sp, #12]
 8005800:	9314      	str	r3, [sp, #80]	; 0x50
 8005802:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005806:	f7fb f9cb 	bl	8000ba0 <__aeabi_d2iz>
 800580a:	9015      	str	r0, [sp, #84]	; 0x54
 800580c:	f7fa feae 	bl	800056c <__aeabi_i2d>
 8005810:	4602      	mov	r2, r0
 8005812:	460b      	mov	r3, r1
 8005814:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8005818:	f7fa fd5a 	bl	80002d0 <__aeabi_dsub>
 800581c:	9b15      	ldr	r3, [sp, #84]	; 0x54
 800581e:	4606      	mov	r6, r0
 8005820:	3330      	adds	r3, #48	; 0x30
 8005822:	f804 3b01 	strb.w	r3, [r4], #1
 8005826:	9b12      	ldr	r3, [sp, #72]	; 0x48
 8005828:	460f      	mov	r7, r1
 800582a:	429c      	cmp	r4, r3
 800582c:	f04f 0200 	mov.w	r2, #0
 8005830:	d124      	bne.n	800587c <_dtoa_r+0x63c>
 8005832:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	; 0x40
 8005836:	4baf      	ldr	r3, [pc, #700]	; (8005af4 <_dtoa_r+0x8b4>)
 8005838:	f7fa fd4c 	bl	80002d4 <__adddf3>
 800583c:	4602      	mov	r2, r0
 800583e:	460b      	mov	r3, r1
 8005840:	4630      	mov	r0, r6
 8005842:	4639      	mov	r1, r7
 8005844:	f7fb f98c 	bl	8000b60 <__aeabi_dcmpgt>
 8005848:	2800      	cmp	r0, #0
 800584a:	d163      	bne.n	8005914 <_dtoa_r+0x6d4>
 800584c:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	; 0x40
 8005850:	2000      	movs	r0, #0
 8005852:	49a8      	ldr	r1, [pc, #672]	; (8005af4 <_dtoa_r+0x8b4>)
 8005854:	f7fa fd3c 	bl	80002d0 <__aeabi_dsub>
 8005858:	4602      	mov	r2, r0
 800585a:	460b      	mov	r3, r1
 800585c:	4630      	mov	r0, r6
 800585e:	4639      	mov	r1, r7
 8005860:	f7fb f960 	bl	8000b24 <__aeabi_dcmplt>
 8005864:	2800      	cmp	r0, #0
 8005866:	f43f af1e 	beq.w	80056a6 <_dtoa_r+0x466>
 800586a:	9f14      	ldr	r7, [sp, #80]	; 0x50
 800586c:	1e7b      	subs	r3, r7, #1
 800586e:	9314      	str	r3, [sp, #80]	; 0x50
 8005870:	f817 3c01 	ldrb.w	r3, [r7, #-1]
 8005874:	2b30      	cmp	r3, #48	; 0x30
 8005876:	d0f8      	beq.n	800586a <_dtoa_r+0x62a>
 8005878:	46c3      	mov	fp, r8
 800587a:	e03b      	b.n	80058f4 <_dtoa_r+0x6b4>
 800587c:	4b9e      	ldr	r3, [pc, #632]	; (8005af8 <_dtoa_r+0x8b8>)
 800587e:	f7fa fedf 	bl	8000640 <__aeabi_dmul>
 8005882:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8005886:	e7bc      	b.n	8005802 <_dtoa_r+0x5c2>
 8005888:	9f03      	ldr	r7, [sp, #12]
 800588a:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 800588e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005892:	4640      	mov	r0, r8
 8005894:	4649      	mov	r1, r9
 8005896:	f7fa fffd 	bl	8000894 <__aeabi_ddiv>
 800589a:	f7fb f981 	bl	8000ba0 <__aeabi_d2iz>
 800589e:	4604      	mov	r4, r0
 80058a0:	f7fa fe64 	bl	800056c <__aeabi_i2d>
 80058a4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058a8:	f7fa feca 	bl	8000640 <__aeabi_dmul>
 80058ac:	4602      	mov	r2, r0
 80058ae:	460b      	mov	r3, r1
 80058b0:	4640      	mov	r0, r8
 80058b2:	4649      	mov	r1, r9
 80058b4:	f7fa fd0c 	bl	80002d0 <__aeabi_dsub>
 80058b8:	f104 0630 	add.w	r6, r4, #48	; 0x30
 80058bc:	f807 6b01 	strb.w	r6, [r7], #1
 80058c0:	9e03      	ldr	r6, [sp, #12]
 80058c2:	f8dd c020 	ldr.w	ip, [sp, #32]
 80058c6:	1bbe      	subs	r6, r7, r6
 80058c8:	45b4      	cmp	ip, r6
 80058ca:	4602      	mov	r2, r0
 80058cc:	460b      	mov	r3, r1
 80058ce:	d136      	bne.n	800593e <_dtoa_r+0x6fe>
 80058d0:	f7fa fd00 	bl	80002d4 <__adddf3>
 80058d4:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058d8:	4680      	mov	r8, r0
 80058da:	4689      	mov	r9, r1
 80058dc:	f7fb f940 	bl	8000b60 <__aeabi_dcmpgt>
 80058e0:	bb58      	cbnz	r0, 800593a <_dtoa_r+0x6fa>
 80058e2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80058e6:	4640      	mov	r0, r8
 80058e8:	4649      	mov	r1, r9
 80058ea:	f7fb f911 	bl	8000b10 <__aeabi_dcmpeq>
 80058ee:	b108      	cbz	r0, 80058f4 <_dtoa_r+0x6b4>
 80058f0:	07e3      	lsls	r3, r4, #31
 80058f2:	d422      	bmi.n	800593a <_dtoa_r+0x6fa>
 80058f4:	4651      	mov	r1, sl
 80058f6:	4628      	mov	r0, r5
 80058f8:	f000 fbc2 	bl	8006080 <_Bfree>
 80058fc:	2300      	movs	r3, #0
 80058fe:	9a24      	ldr	r2, [sp, #144]	; 0x90
 8005900:	703b      	strb	r3, [r7, #0]
 8005902:	f10b 0301 	add.w	r3, fp, #1
 8005906:	6013      	str	r3, [r2, #0]
 8005908:	9b26      	ldr	r3, [sp, #152]	; 0x98
 800590a:	2b00      	cmp	r3, #0
 800590c:	f43f ace6 	beq.w	80052dc <_dtoa_r+0x9c>
 8005910:	601f      	str	r7, [r3, #0]
 8005912:	e4e3      	b.n	80052dc <_dtoa_r+0x9c>
 8005914:	4627      	mov	r7, r4
 8005916:	463b      	mov	r3, r7
 8005918:	461f      	mov	r7, r3
 800591a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800591e:	2a39      	cmp	r2, #57	; 0x39
 8005920:	d107      	bne.n	8005932 <_dtoa_r+0x6f2>
 8005922:	9a03      	ldr	r2, [sp, #12]
 8005924:	429a      	cmp	r2, r3
 8005926:	d1f7      	bne.n	8005918 <_dtoa_r+0x6d8>
 8005928:	2230      	movs	r2, #48	; 0x30
 800592a:	9903      	ldr	r1, [sp, #12]
 800592c:	f108 0801 	add.w	r8, r8, #1
 8005930:	700a      	strb	r2, [r1, #0]
 8005932:	781a      	ldrb	r2, [r3, #0]
 8005934:	3201      	adds	r2, #1
 8005936:	701a      	strb	r2, [r3, #0]
 8005938:	e79e      	b.n	8005878 <_dtoa_r+0x638>
 800593a:	46d8      	mov	r8, fp
 800593c:	e7eb      	b.n	8005916 <_dtoa_r+0x6d6>
 800593e:	2200      	movs	r2, #0
 8005940:	4b6d      	ldr	r3, [pc, #436]	; (8005af8 <_dtoa_r+0x8b8>)
 8005942:	f7fa fe7d 	bl	8000640 <__aeabi_dmul>
 8005946:	2200      	movs	r2, #0
 8005948:	2300      	movs	r3, #0
 800594a:	4680      	mov	r8, r0
 800594c:	4689      	mov	r9, r1
 800594e:	f7fb f8df 	bl	8000b10 <__aeabi_dcmpeq>
 8005952:	2800      	cmp	r0, #0
 8005954:	d09b      	beq.n	800588e <_dtoa_r+0x64e>
 8005956:	e7cd      	b.n	80058f4 <_dtoa_r+0x6b4>
 8005958:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 800595a:	2a00      	cmp	r2, #0
 800595c:	f000 80c4 	beq.w	8005ae8 <_dtoa_r+0x8a8>
 8005960:	9a22      	ldr	r2, [sp, #136]	; 0x88
 8005962:	2a01      	cmp	r2, #1
 8005964:	f300 80a8 	bgt.w	8005ab8 <_dtoa_r+0x878>
 8005968:	9a13      	ldr	r2, [sp, #76]	; 0x4c
 800596a:	2a00      	cmp	r2, #0
 800596c:	f000 80a0 	beq.w	8005ab0 <_dtoa_r+0x870>
 8005970:	f203 4333 	addw	r3, r3, #1075	; 0x433
 8005974:	464f      	mov	r7, r9
 8005976:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005978:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800597a:	2101      	movs	r1, #1
 800597c:	441a      	add	r2, r3
 800597e:	4628      	mov	r0, r5
 8005980:	4499      	add	r9, r3
 8005982:	9209      	str	r2, [sp, #36]	; 0x24
 8005984:	f000 fc32 	bl	80061ec <__i2b>
 8005988:	4606      	mov	r6, r0
 800598a:	b15f      	cbz	r7, 80059a4 <_dtoa_r+0x764>
 800598c:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800598e:	2b00      	cmp	r3, #0
 8005990:	dd08      	ble.n	80059a4 <_dtoa_r+0x764>
 8005992:	42bb      	cmp	r3, r7
 8005994:	bfa8      	it	ge
 8005996:	463b      	movge	r3, r7
 8005998:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800599a:	eba9 0903 	sub.w	r9, r9, r3
 800599e:	1aff      	subs	r7, r7, r3
 80059a0:	1ad3      	subs	r3, r2, r3
 80059a2:	9309      	str	r3, [sp, #36]	; 0x24
 80059a4:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059a6:	b1f3      	cbz	r3, 80059e6 <_dtoa_r+0x7a6>
 80059a8:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 80059aa:	2b00      	cmp	r3, #0
 80059ac:	f000 80a0 	beq.w	8005af0 <_dtoa_r+0x8b0>
 80059b0:	2c00      	cmp	r4, #0
 80059b2:	dd10      	ble.n	80059d6 <_dtoa_r+0x796>
 80059b4:	4631      	mov	r1, r6
 80059b6:	4622      	mov	r2, r4
 80059b8:	4628      	mov	r0, r5
 80059ba:	f000 fcd5 	bl	8006368 <__pow5mult>
 80059be:	4652      	mov	r2, sl
 80059c0:	4601      	mov	r1, r0
 80059c2:	4606      	mov	r6, r0
 80059c4:	4628      	mov	r0, r5
 80059c6:	f000 fc27 	bl	8006218 <__multiply>
 80059ca:	4680      	mov	r8, r0
 80059cc:	4651      	mov	r1, sl
 80059ce:	4628      	mov	r0, r5
 80059d0:	f000 fb56 	bl	8006080 <_Bfree>
 80059d4:	46c2      	mov	sl, r8
 80059d6:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 80059d8:	1b1a      	subs	r2, r3, r4
 80059da:	d004      	beq.n	80059e6 <_dtoa_r+0x7a6>
 80059dc:	4651      	mov	r1, sl
 80059de:	4628      	mov	r0, r5
 80059e0:	f000 fcc2 	bl	8006368 <__pow5mult>
 80059e4:	4682      	mov	sl, r0
 80059e6:	2101      	movs	r1, #1
 80059e8:	4628      	mov	r0, r5
 80059ea:	f000 fbff 	bl	80061ec <__i2b>
 80059ee:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 80059f0:	4604      	mov	r4, r0
 80059f2:	2b00      	cmp	r3, #0
 80059f4:	f340 8082 	ble.w	8005afc <_dtoa_r+0x8bc>
 80059f8:	461a      	mov	r2, r3
 80059fa:	4601      	mov	r1, r0
 80059fc:	4628      	mov	r0, r5
 80059fe:	f000 fcb3 	bl	8006368 <__pow5mult>
 8005a02:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005a04:	4604      	mov	r4, r0
 8005a06:	2b01      	cmp	r3, #1
 8005a08:	dd7b      	ble.n	8005b02 <_dtoa_r+0x8c2>
 8005a0a:	f04f 0800 	mov.w	r8, #0
 8005a0e:	6923      	ldr	r3, [r4, #16]
 8005a10:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8005a14:	6918      	ldr	r0, [r3, #16]
 8005a16:	f000 fb9b 	bl	8006150 <__hi0bits>
 8005a1a:	f1c0 0020 	rsb	r0, r0, #32
 8005a1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a20:	4418      	add	r0, r3
 8005a22:	f010 001f 	ands.w	r0, r0, #31
 8005a26:	f000 8092 	beq.w	8005b4e <_dtoa_r+0x90e>
 8005a2a:	f1c0 0320 	rsb	r3, r0, #32
 8005a2e:	2b04      	cmp	r3, #4
 8005a30:	f340 8085 	ble.w	8005b3e <_dtoa_r+0x8fe>
 8005a34:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a36:	f1c0 001c 	rsb	r0, r0, #28
 8005a3a:	4403      	add	r3, r0
 8005a3c:	4481      	add	r9, r0
 8005a3e:	4407      	add	r7, r0
 8005a40:	9309      	str	r3, [sp, #36]	; 0x24
 8005a42:	f1b9 0f00 	cmp.w	r9, #0
 8005a46:	dd05      	ble.n	8005a54 <_dtoa_r+0x814>
 8005a48:	4651      	mov	r1, sl
 8005a4a:	464a      	mov	r2, r9
 8005a4c:	4628      	mov	r0, r5
 8005a4e:	f000 fce5 	bl	800641c <__lshift>
 8005a52:	4682      	mov	sl, r0
 8005a54:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005a56:	2b00      	cmp	r3, #0
 8005a58:	dd05      	ble.n	8005a66 <_dtoa_r+0x826>
 8005a5a:	4621      	mov	r1, r4
 8005a5c:	461a      	mov	r2, r3
 8005a5e:	4628      	mov	r0, r5
 8005a60:	f000 fcdc 	bl	800641c <__lshift>
 8005a64:	4604      	mov	r4, r0
 8005a66:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
 8005a68:	2b00      	cmp	r3, #0
 8005a6a:	d072      	beq.n	8005b52 <_dtoa_r+0x912>
 8005a6c:	4621      	mov	r1, r4
 8005a6e:	4650      	mov	r0, sl
 8005a70:	f000 fd40 	bl	80064f4 <__mcmp>
 8005a74:	2800      	cmp	r0, #0
 8005a76:	da6c      	bge.n	8005b52 <_dtoa_r+0x912>
 8005a78:	2300      	movs	r3, #0
 8005a7a:	4651      	mov	r1, sl
 8005a7c:	220a      	movs	r2, #10
 8005a7e:	4628      	mov	r0, r5
 8005a80:	f000 fb20 	bl	80060c4 <__multadd>
 8005a84:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005a86:	4682      	mov	sl, r0
 8005a88:	f10b 3bff 	add.w	fp, fp, #4294967295
 8005a8c:	2b00      	cmp	r3, #0
 8005a8e:	f000 81ac 	beq.w	8005dea <_dtoa_r+0xbaa>
 8005a92:	2300      	movs	r3, #0
 8005a94:	4631      	mov	r1, r6
 8005a96:	220a      	movs	r2, #10
 8005a98:	4628      	mov	r0, r5
 8005a9a:	f000 fb13 	bl	80060c4 <__multadd>
 8005a9e:	9b06      	ldr	r3, [sp, #24]
 8005aa0:	4606      	mov	r6, r0
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	f300 8093 	bgt.w	8005bce <_dtoa_r+0x98e>
 8005aa8:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005aaa:	2b02      	cmp	r3, #2
 8005aac:	dc59      	bgt.n	8005b62 <_dtoa_r+0x922>
 8005aae:	e08e      	b.n	8005bce <_dtoa_r+0x98e>
 8005ab0:	9b16      	ldr	r3, [sp, #88]	; 0x58
 8005ab2:	f1c3 0336 	rsb	r3, r3, #54	; 0x36
 8005ab6:	e75d      	b.n	8005974 <_dtoa_r+0x734>
 8005ab8:	9b08      	ldr	r3, [sp, #32]
 8005aba:	1e5c      	subs	r4, r3, #1
 8005abc:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005abe:	42a3      	cmp	r3, r4
 8005ac0:	bfbf      	itttt	lt
 8005ac2:	9b0a      	ldrlt	r3, [sp, #40]	; 0x28
 8005ac4:	9a0e      	ldrlt	r2, [sp, #56]	; 0x38
 8005ac6:	1ae3      	sublt	r3, r4, r3
 8005ac8:	18d2      	addlt	r2, r2, r3
 8005aca:	bfa8      	it	ge
 8005acc:	1b1c      	subge	r4, r3, r4
 8005ace:	9b08      	ldr	r3, [sp, #32]
 8005ad0:	bfbe      	ittt	lt
 8005ad2:	940a      	strlt	r4, [sp, #40]	; 0x28
 8005ad4:	920e      	strlt	r2, [sp, #56]	; 0x38
 8005ad6:	2400      	movlt	r4, #0
 8005ad8:	2b00      	cmp	r3, #0
 8005ada:	bfb5      	itete	lt
 8005adc:	eba9 0703 	sublt.w	r7, r9, r3
 8005ae0:	464f      	movge	r7, r9
 8005ae2:	2300      	movlt	r3, #0
 8005ae4:	9b08      	ldrge	r3, [sp, #32]
 8005ae6:	e747      	b.n	8005978 <_dtoa_r+0x738>
 8005ae8:	464f      	mov	r7, r9
 8005aea:	9c0a      	ldr	r4, [sp, #40]	; 0x28
 8005aec:	9e0b      	ldr	r6, [sp, #44]	; 0x2c
 8005aee:	e74c      	b.n	800598a <_dtoa_r+0x74a>
 8005af0:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005af2:	e773      	b.n	80059dc <_dtoa_r+0x79c>
 8005af4:	3fe00000 	.word	0x3fe00000
 8005af8:	40240000 	.word	0x40240000
 8005afc:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005afe:	2b01      	cmp	r3, #1
 8005b00:	dc18      	bgt.n	8005b34 <_dtoa_r+0x8f4>
 8005b02:	9b04      	ldr	r3, [sp, #16]
 8005b04:	b9b3      	cbnz	r3, 8005b34 <_dtoa_r+0x8f4>
 8005b06:	9b05      	ldr	r3, [sp, #20]
 8005b08:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8005b0c:	b993      	cbnz	r3, 8005b34 <_dtoa_r+0x8f4>
 8005b0e:	9b05      	ldr	r3, [sp, #20]
 8005b10:	f023 4300 	bic.w	r3, r3, #2147483648	; 0x80000000
 8005b14:	0d1b      	lsrs	r3, r3, #20
 8005b16:	051b      	lsls	r3, r3, #20
 8005b18:	b17b      	cbz	r3, 8005b3a <_dtoa_r+0x8fa>
 8005b1a:	f04f 0801 	mov.w	r8, #1
 8005b1e:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005b20:	f109 0901 	add.w	r9, r9, #1
 8005b24:	3301      	adds	r3, #1
 8005b26:	9309      	str	r3, [sp, #36]	; 0x24
 8005b28:	9b0e      	ldr	r3, [sp, #56]	; 0x38
 8005b2a:	2b00      	cmp	r3, #0
 8005b2c:	f47f af6f 	bne.w	8005a0e <_dtoa_r+0x7ce>
 8005b30:	2001      	movs	r0, #1
 8005b32:	e774      	b.n	8005a1e <_dtoa_r+0x7de>
 8005b34:	f04f 0800 	mov.w	r8, #0
 8005b38:	e7f6      	b.n	8005b28 <_dtoa_r+0x8e8>
 8005b3a:	4698      	mov	r8, r3
 8005b3c:	e7f4      	b.n	8005b28 <_dtoa_r+0x8e8>
 8005b3e:	d080      	beq.n	8005a42 <_dtoa_r+0x802>
 8005b40:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8005b42:	331c      	adds	r3, #28
 8005b44:	441a      	add	r2, r3
 8005b46:	4499      	add	r9, r3
 8005b48:	441f      	add	r7, r3
 8005b4a:	9209      	str	r2, [sp, #36]	; 0x24
 8005b4c:	e779      	b.n	8005a42 <_dtoa_r+0x802>
 8005b4e:	4603      	mov	r3, r0
 8005b50:	e7f6      	b.n	8005b40 <_dtoa_r+0x900>
 8005b52:	9b08      	ldr	r3, [sp, #32]
 8005b54:	2b00      	cmp	r3, #0
 8005b56:	dc34      	bgt.n	8005bc2 <_dtoa_r+0x982>
 8005b58:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005b5a:	2b02      	cmp	r3, #2
 8005b5c:	dd31      	ble.n	8005bc2 <_dtoa_r+0x982>
 8005b5e:	9b08      	ldr	r3, [sp, #32]
 8005b60:	9306      	str	r3, [sp, #24]
 8005b62:	9b06      	ldr	r3, [sp, #24]
 8005b64:	b963      	cbnz	r3, 8005b80 <_dtoa_r+0x940>
 8005b66:	4621      	mov	r1, r4
 8005b68:	2205      	movs	r2, #5
 8005b6a:	4628      	mov	r0, r5
 8005b6c:	f000 faaa 	bl	80060c4 <__multadd>
 8005b70:	4601      	mov	r1, r0
 8005b72:	4604      	mov	r4, r0
 8005b74:	4650      	mov	r0, sl
 8005b76:	f000 fcbd 	bl	80064f4 <__mcmp>
 8005b7a:	2800      	cmp	r0, #0
 8005b7c:	f73f adbf 	bgt.w	80056fe <_dtoa_r+0x4be>
 8005b80:	9b23      	ldr	r3, [sp, #140]	; 0x8c
 8005b82:	9f03      	ldr	r7, [sp, #12]
 8005b84:	ea6f 0b03 	mvn.w	fp, r3
 8005b88:	f04f 0800 	mov.w	r8, #0
 8005b8c:	4621      	mov	r1, r4
 8005b8e:	4628      	mov	r0, r5
 8005b90:	f000 fa76 	bl	8006080 <_Bfree>
 8005b94:	2e00      	cmp	r6, #0
 8005b96:	f43f aead 	beq.w	80058f4 <_dtoa_r+0x6b4>
 8005b9a:	f1b8 0f00 	cmp.w	r8, #0
 8005b9e:	d005      	beq.n	8005bac <_dtoa_r+0x96c>
 8005ba0:	45b0      	cmp	r8, r6
 8005ba2:	d003      	beq.n	8005bac <_dtoa_r+0x96c>
 8005ba4:	4641      	mov	r1, r8
 8005ba6:	4628      	mov	r0, r5
 8005ba8:	f000 fa6a 	bl	8006080 <_Bfree>
 8005bac:	4631      	mov	r1, r6
 8005bae:	4628      	mov	r0, r5
 8005bb0:	f000 fa66 	bl	8006080 <_Bfree>
 8005bb4:	e69e      	b.n	80058f4 <_dtoa_r+0x6b4>
 8005bb6:	2400      	movs	r4, #0
 8005bb8:	4626      	mov	r6, r4
 8005bba:	e7e1      	b.n	8005b80 <_dtoa_r+0x940>
 8005bbc:	46c3      	mov	fp, r8
 8005bbe:	4626      	mov	r6, r4
 8005bc0:	e59d      	b.n	80056fe <_dtoa_r+0x4be>
 8005bc2:	9b0b      	ldr	r3, [sp, #44]	; 0x2c
 8005bc4:	2b00      	cmp	r3, #0
 8005bc6:	f000 80c8 	beq.w	8005d5a <_dtoa_r+0xb1a>
 8005bca:	9b08      	ldr	r3, [sp, #32]
 8005bcc:	9306      	str	r3, [sp, #24]
 8005bce:	2f00      	cmp	r7, #0
 8005bd0:	dd05      	ble.n	8005bde <_dtoa_r+0x99e>
 8005bd2:	4631      	mov	r1, r6
 8005bd4:	463a      	mov	r2, r7
 8005bd6:	4628      	mov	r0, r5
 8005bd8:	f000 fc20 	bl	800641c <__lshift>
 8005bdc:	4606      	mov	r6, r0
 8005bde:	f1b8 0f00 	cmp.w	r8, #0
 8005be2:	d05b      	beq.n	8005c9c <_dtoa_r+0xa5c>
 8005be4:	4628      	mov	r0, r5
 8005be6:	6871      	ldr	r1, [r6, #4]
 8005be8:	f000 fa0a 	bl	8006000 <_Balloc>
 8005bec:	4607      	mov	r7, r0
 8005bee:	b928      	cbnz	r0, 8005bfc <_dtoa_r+0x9bc>
 8005bf0:	4602      	mov	r2, r0
 8005bf2:	f240 21ef 	movw	r1, #751	; 0x2ef
 8005bf6:	4b81      	ldr	r3, [pc, #516]	; (8005dfc <_dtoa_r+0xbbc>)
 8005bf8:	f7ff bb36 	b.w	8005268 <_dtoa_r+0x28>
 8005bfc:	6932      	ldr	r2, [r6, #16]
 8005bfe:	f106 010c 	add.w	r1, r6, #12
 8005c02:	3202      	adds	r2, #2
 8005c04:	0092      	lsls	r2, r2, #2
 8005c06:	300c      	adds	r0, #12
 8005c08:	f000 ff9e 	bl	8006b48 <memcpy>
 8005c0c:	2201      	movs	r2, #1
 8005c0e:	4639      	mov	r1, r7
 8005c10:	4628      	mov	r0, r5
 8005c12:	f000 fc03 	bl	800641c <__lshift>
 8005c16:	46b0      	mov	r8, r6
 8005c18:	4606      	mov	r6, r0
 8005c1a:	9b03      	ldr	r3, [sp, #12]
 8005c1c:	9a03      	ldr	r2, [sp, #12]
 8005c1e:	3301      	adds	r3, #1
 8005c20:	9308      	str	r3, [sp, #32]
 8005c22:	9b06      	ldr	r3, [sp, #24]
 8005c24:	4413      	add	r3, r2
 8005c26:	930b      	str	r3, [sp, #44]	; 0x2c
 8005c28:	9b04      	ldr	r3, [sp, #16]
 8005c2a:	f003 0301 	and.w	r3, r3, #1
 8005c2e:	930a      	str	r3, [sp, #40]	; 0x28
 8005c30:	9b08      	ldr	r3, [sp, #32]
 8005c32:	4621      	mov	r1, r4
 8005c34:	3b01      	subs	r3, #1
 8005c36:	4650      	mov	r0, sl
 8005c38:	9304      	str	r3, [sp, #16]
 8005c3a:	f7ff fa77 	bl	800512c <quorem>
 8005c3e:	4641      	mov	r1, r8
 8005c40:	9006      	str	r0, [sp, #24]
 8005c42:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005c46:	4650      	mov	r0, sl
 8005c48:	f000 fc54 	bl	80064f4 <__mcmp>
 8005c4c:	4632      	mov	r2, r6
 8005c4e:	9009      	str	r0, [sp, #36]	; 0x24
 8005c50:	4621      	mov	r1, r4
 8005c52:	4628      	mov	r0, r5
 8005c54:	f000 fc6a 	bl	800652c <__mdiff>
 8005c58:	68c2      	ldr	r2, [r0, #12]
 8005c5a:	4607      	mov	r7, r0
 8005c5c:	bb02      	cbnz	r2, 8005ca0 <_dtoa_r+0xa60>
 8005c5e:	4601      	mov	r1, r0
 8005c60:	4650      	mov	r0, sl
 8005c62:	f000 fc47 	bl	80064f4 <__mcmp>
 8005c66:	4602      	mov	r2, r0
 8005c68:	4639      	mov	r1, r7
 8005c6a:	4628      	mov	r0, r5
 8005c6c:	920c      	str	r2, [sp, #48]	; 0x30
 8005c6e:	f000 fa07 	bl	8006080 <_Bfree>
 8005c72:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005c74:	9a0c      	ldr	r2, [sp, #48]	; 0x30
 8005c76:	9f08      	ldr	r7, [sp, #32]
 8005c78:	ea43 0102 	orr.w	r1, r3, r2
 8005c7c:	9b0a      	ldr	r3, [sp, #40]	; 0x28
 8005c7e:	4319      	orrs	r1, r3
 8005c80:	d110      	bne.n	8005ca4 <_dtoa_r+0xa64>
 8005c82:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005c86:	d029      	beq.n	8005cdc <_dtoa_r+0xa9c>
 8005c88:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005c8a:	2b00      	cmp	r3, #0
 8005c8c:	dd02      	ble.n	8005c94 <_dtoa_r+0xa54>
 8005c8e:	9b06      	ldr	r3, [sp, #24]
 8005c90:	f103 0931 	add.w	r9, r3, #49	; 0x31
 8005c94:	9b04      	ldr	r3, [sp, #16]
 8005c96:	f883 9000 	strb.w	r9, [r3]
 8005c9a:	e777      	b.n	8005b8c <_dtoa_r+0x94c>
 8005c9c:	4630      	mov	r0, r6
 8005c9e:	e7ba      	b.n	8005c16 <_dtoa_r+0x9d6>
 8005ca0:	2201      	movs	r2, #1
 8005ca2:	e7e1      	b.n	8005c68 <_dtoa_r+0xa28>
 8005ca4:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	db04      	blt.n	8005cb4 <_dtoa_r+0xa74>
 8005caa:	9922      	ldr	r1, [sp, #136]	; 0x88
 8005cac:	430b      	orrs	r3, r1
 8005cae:	990a      	ldr	r1, [sp, #40]	; 0x28
 8005cb0:	430b      	orrs	r3, r1
 8005cb2:	d120      	bne.n	8005cf6 <_dtoa_r+0xab6>
 8005cb4:	2a00      	cmp	r2, #0
 8005cb6:	dded      	ble.n	8005c94 <_dtoa_r+0xa54>
 8005cb8:	4651      	mov	r1, sl
 8005cba:	2201      	movs	r2, #1
 8005cbc:	4628      	mov	r0, r5
 8005cbe:	f000 fbad 	bl	800641c <__lshift>
 8005cc2:	4621      	mov	r1, r4
 8005cc4:	4682      	mov	sl, r0
 8005cc6:	f000 fc15 	bl	80064f4 <__mcmp>
 8005cca:	2800      	cmp	r0, #0
 8005ccc:	dc03      	bgt.n	8005cd6 <_dtoa_r+0xa96>
 8005cce:	d1e1      	bne.n	8005c94 <_dtoa_r+0xa54>
 8005cd0:	f019 0f01 	tst.w	r9, #1
 8005cd4:	d0de      	beq.n	8005c94 <_dtoa_r+0xa54>
 8005cd6:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005cda:	d1d8      	bne.n	8005c8e <_dtoa_r+0xa4e>
 8005cdc:	2339      	movs	r3, #57	; 0x39
 8005cde:	9a04      	ldr	r2, [sp, #16]
 8005ce0:	7013      	strb	r3, [r2, #0]
 8005ce2:	463b      	mov	r3, r7
 8005ce4:	461f      	mov	r7, r3
 8005ce6:	f817 2c01 	ldrb.w	r2, [r7, #-1]
 8005cea:	3b01      	subs	r3, #1
 8005cec:	2a39      	cmp	r2, #57	; 0x39
 8005cee:	d06b      	beq.n	8005dc8 <_dtoa_r+0xb88>
 8005cf0:	3201      	adds	r2, #1
 8005cf2:	701a      	strb	r2, [r3, #0]
 8005cf4:	e74a      	b.n	8005b8c <_dtoa_r+0x94c>
 8005cf6:	2a00      	cmp	r2, #0
 8005cf8:	dd07      	ble.n	8005d0a <_dtoa_r+0xaca>
 8005cfa:	f1b9 0f39 	cmp.w	r9, #57	; 0x39
 8005cfe:	d0ed      	beq.n	8005cdc <_dtoa_r+0xa9c>
 8005d00:	9a04      	ldr	r2, [sp, #16]
 8005d02:	f109 0301 	add.w	r3, r9, #1
 8005d06:	7013      	strb	r3, [r2, #0]
 8005d08:	e740      	b.n	8005b8c <_dtoa_r+0x94c>
 8005d0a:	9b08      	ldr	r3, [sp, #32]
 8005d0c:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005d0e:	f803 9c01 	strb.w	r9, [r3, #-1]
 8005d12:	4293      	cmp	r3, r2
 8005d14:	d042      	beq.n	8005d9c <_dtoa_r+0xb5c>
 8005d16:	4651      	mov	r1, sl
 8005d18:	2300      	movs	r3, #0
 8005d1a:	220a      	movs	r2, #10
 8005d1c:	4628      	mov	r0, r5
 8005d1e:	f000 f9d1 	bl	80060c4 <__multadd>
 8005d22:	45b0      	cmp	r8, r6
 8005d24:	4682      	mov	sl, r0
 8005d26:	f04f 0300 	mov.w	r3, #0
 8005d2a:	f04f 020a 	mov.w	r2, #10
 8005d2e:	4641      	mov	r1, r8
 8005d30:	4628      	mov	r0, r5
 8005d32:	d107      	bne.n	8005d44 <_dtoa_r+0xb04>
 8005d34:	f000 f9c6 	bl	80060c4 <__multadd>
 8005d38:	4680      	mov	r8, r0
 8005d3a:	4606      	mov	r6, r0
 8005d3c:	9b08      	ldr	r3, [sp, #32]
 8005d3e:	3301      	adds	r3, #1
 8005d40:	9308      	str	r3, [sp, #32]
 8005d42:	e775      	b.n	8005c30 <_dtoa_r+0x9f0>
 8005d44:	f000 f9be 	bl	80060c4 <__multadd>
 8005d48:	4631      	mov	r1, r6
 8005d4a:	4680      	mov	r8, r0
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	220a      	movs	r2, #10
 8005d50:	4628      	mov	r0, r5
 8005d52:	f000 f9b7 	bl	80060c4 <__multadd>
 8005d56:	4606      	mov	r6, r0
 8005d58:	e7f0      	b.n	8005d3c <_dtoa_r+0xafc>
 8005d5a:	9b08      	ldr	r3, [sp, #32]
 8005d5c:	9306      	str	r3, [sp, #24]
 8005d5e:	9f03      	ldr	r7, [sp, #12]
 8005d60:	4621      	mov	r1, r4
 8005d62:	4650      	mov	r0, sl
 8005d64:	f7ff f9e2 	bl	800512c <quorem>
 8005d68:	9b03      	ldr	r3, [sp, #12]
 8005d6a:	f100 0930 	add.w	r9, r0, #48	; 0x30
 8005d6e:	f807 9b01 	strb.w	r9, [r7], #1
 8005d72:	1afa      	subs	r2, r7, r3
 8005d74:	9b06      	ldr	r3, [sp, #24]
 8005d76:	4293      	cmp	r3, r2
 8005d78:	dd07      	ble.n	8005d8a <_dtoa_r+0xb4a>
 8005d7a:	4651      	mov	r1, sl
 8005d7c:	2300      	movs	r3, #0
 8005d7e:	220a      	movs	r2, #10
 8005d80:	4628      	mov	r0, r5
 8005d82:	f000 f99f 	bl	80060c4 <__multadd>
 8005d86:	4682      	mov	sl, r0
 8005d88:	e7ea      	b.n	8005d60 <_dtoa_r+0xb20>
 8005d8a:	9b06      	ldr	r3, [sp, #24]
 8005d8c:	f04f 0800 	mov.w	r8, #0
 8005d90:	2b00      	cmp	r3, #0
 8005d92:	bfcc      	ite	gt
 8005d94:	461f      	movgt	r7, r3
 8005d96:	2701      	movle	r7, #1
 8005d98:	9b03      	ldr	r3, [sp, #12]
 8005d9a:	441f      	add	r7, r3
 8005d9c:	4651      	mov	r1, sl
 8005d9e:	2201      	movs	r2, #1
 8005da0:	4628      	mov	r0, r5
 8005da2:	f000 fb3b 	bl	800641c <__lshift>
 8005da6:	4621      	mov	r1, r4
 8005da8:	4682      	mov	sl, r0
 8005daa:	f000 fba3 	bl	80064f4 <__mcmp>
 8005dae:	2800      	cmp	r0, #0
 8005db0:	dc97      	bgt.n	8005ce2 <_dtoa_r+0xaa2>
 8005db2:	d102      	bne.n	8005dba <_dtoa_r+0xb7a>
 8005db4:	f019 0f01 	tst.w	r9, #1
 8005db8:	d193      	bne.n	8005ce2 <_dtoa_r+0xaa2>
 8005dba:	463b      	mov	r3, r7
 8005dbc:	461f      	mov	r7, r3
 8005dbe:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8005dc2:	2a30      	cmp	r2, #48	; 0x30
 8005dc4:	d0fa      	beq.n	8005dbc <_dtoa_r+0xb7c>
 8005dc6:	e6e1      	b.n	8005b8c <_dtoa_r+0x94c>
 8005dc8:	9a03      	ldr	r2, [sp, #12]
 8005dca:	429a      	cmp	r2, r3
 8005dcc:	d18a      	bne.n	8005ce4 <_dtoa_r+0xaa4>
 8005dce:	2331      	movs	r3, #49	; 0x31
 8005dd0:	f10b 0b01 	add.w	fp, fp, #1
 8005dd4:	e797      	b.n	8005d06 <_dtoa_r+0xac6>
 8005dd6:	4b0a      	ldr	r3, [pc, #40]	; (8005e00 <_dtoa_r+0xbc0>)
 8005dd8:	f7ff ba9f 	b.w	800531a <_dtoa_r+0xda>
 8005ddc:	9b26      	ldr	r3, [sp, #152]	; 0x98
 8005dde:	2b00      	cmp	r3, #0
 8005de0:	f47f aa77 	bne.w	80052d2 <_dtoa_r+0x92>
 8005de4:	4b07      	ldr	r3, [pc, #28]	; (8005e04 <_dtoa_r+0xbc4>)
 8005de6:	f7ff ba98 	b.w	800531a <_dtoa_r+0xda>
 8005dea:	9b06      	ldr	r3, [sp, #24]
 8005dec:	2b00      	cmp	r3, #0
 8005dee:	dcb6      	bgt.n	8005d5e <_dtoa_r+0xb1e>
 8005df0:	9b22      	ldr	r3, [sp, #136]	; 0x88
 8005df2:	2b02      	cmp	r3, #2
 8005df4:	f73f aeb5 	bgt.w	8005b62 <_dtoa_r+0x922>
 8005df8:	e7b1      	b.n	8005d5e <_dtoa_r+0xb1e>
 8005dfa:	bf00      	nop
 8005dfc:	0800741a 	.word	0x0800741a
 8005e00:	0800737a 	.word	0x0800737a
 8005e04:	0800739e 	.word	0x0800739e

08005e08 <_free_r>:
 8005e08:	b538      	push	{r3, r4, r5, lr}
 8005e0a:	4605      	mov	r5, r0
 8005e0c:	2900      	cmp	r1, #0
 8005e0e:	d040      	beq.n	8005e92 <_free_r+0x8a>
 8005e10:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8005e14:	1f0c      	subs	r4, r1, #4
 8005e16:	2b00      	cmp	r3, #0
 8005e18:	bfb8      	it	lt
 8005e1a:	18e4      	addlt	r4, r4, r3
 8005e1c:	f000 f8e4 	bl	8005fe8 <__malloc_lock>
 8005e20:	4a1c      	ldr	r2, [pc, #112]	; (8005e94 <_free_r+0x8c>)
 8005e22:	6813      	ldr	r3, [r2, #0]
 8005e24:	b933      	cbnz	r3, 8005e34 <_free_r+0x2c>
 8005e26:	6063      	str	r3, [r4, #4]
 8005e28:	6014      	str	r4, [r2, #0]
 8005e2a:	4628      	mov	r0, r5
 8005e2c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8005e30:	f000 b8e0 	b.w	8005ff4 <__malloc_unlock>
 8005e34:	42a3      	cmp	r3, r4
 8005e36:	d908      	bls.n	8005e4a <_free_r+0x42>
 8005e38:	6820      	ldr	r0, [r4, #0]
 8005e3a:	1821      	adds	r1, r4, r0
 8005e3c:	428b      	cmp	r3, r1
 8005e3e:	bf01      	itttt	eq
 8005e40:	6819      	ldreq	r1, [r3, #0]
 8005e42:	685b      	ldreq	r3, [r3, #4]
 8005e44:	1809      	addeq	r1, r1, r0
 8005e46:	6021      	streq	r1, [r4, #0]
 8005e48:	e7ed      	b.n	8005e26 <_free_r+0x1e>
 8005e4a:	461a      	mov	r2, r3
 8005e4c:	685b      	ldr	r3, [r3, #4]
 8005e4e:	b10b      	cbz	r3, 8005e54 <_free_r+0x4c>
 8005e50:	42a3      	cmp	r3, r4
 8005e52:	d9fa      	bls.n	8005e4a <_free_r+0x42>
 8005e54:	6811      	ldr	r1, [r2, #0]
 8005e56:	1850      	adds	r0, r2, r1
 8005e58:	42a0      	cmp	r0, r4
 8005e5a:	d10b      	bne.n	8005e74 <_free_r+0x6c>
 8005e5c:	6820      	ldr	r0, [r4, #0]
 8005e5e:	4401      	add	r1, r0
 8005e60:	1850      	adds	r0, r2, r1
 8005e62:	4283      	cmp	r3, r0
 8005e64:	6011      	str	r1, [r2, #0]
 8005e66:	d1e0      	bne.n	8005e2a <_free_r+0x22>
 8005e68:	6818      	ldr	r0, [r3, #0]
 8005e6a:	685b      	ldr	r3, [r3, #4]
 8005e6c:	4408      	add	r0, r1
 8005e6e:	6010      	str	r0, [r2, #0]
 8005e70:	6053      	str	r3, [r2, #4]
 8005e72:	e7da      	b.n	8005e2a <_free_r+0x22>
 8005e74:	d902      	bls.n	8005e7c <_free_r+0x74>
 8005e76:	230c      	movs	r3, #12
 8005e78:	602b      	str	r3, [r5, #0]
 8005e7a:	e7d6      	b.n	8005e2a <_free_r+0x22>
 8005e7c:	6820      	ldr	r0, [r4, #0]
 8005e7e:	1821      	adds	r1, r4, r0
 8005e80:	428b      	cmp	r3, r1
 8005e82:	bf01      	itttt	eq
 8005e84:	6819      	ldreq	r1, [r3, #0]
 8005e86:	685b      	ldreq	r3, [r3, #4]
 8005e88:	1809      	addeq	r1, r1, r0
 8005e8a:	6021      	streq	r1, [r4, #0]
 8005e8c:	6063      	str	r3, [r4, #4]
 8005e8e:	6054      	str	r4, [r2, #4]
 8005e90:	e7cb      	b.n	8005e2a <_free_r+0x22>
 8005e92:	bd38      	pop	{r3, r4, r5, pc}
 8005e94:	2000043c 	.word	0x2000043c

08005e98 <malloc>:
 8005e98:	4b02      	ldr	r3, [pc, #8]	; (8005ea4 <malloc+0xc>)
 8005e9a:	4601      	mov	r1, r0
 8005e9c:	6818      	ldr	r0, [r3, #0]
 8005e9e:	f000 b823 	b.w	8005ee8 <_malloc_r>
 8005ea2:	bf00      	nop
 8005ea4:	20000080 	.word	0x20000080

08005ea8 <sbrk_aligned>:
 8005ea8:	b570      	push	{r4, r5, r6, lr}
 8005eaa:	4e0e      	ldr	r6, [pc, #56]	; (8005ee4 <sbrk_aligned+0x3c>)
 8005eac:	460c      	mov	r4, r1
 8005eae:	6831      	ldr	r1, [r6, #0]
 8005eb0:	4605      	mov	r5, r0
 8005eb2:	b911      	cbnz	r1, 8005eba <sbrk_aligned+0x12>
 8005eb4:	f000 fe38 	bl	8006b28 <_sbrk_r>
 8005eb8:	6030      	str	r0, [r6, #0]
 8005eba:	4621      	mov	r1, r4
 8005ebc:	4628      	mov	r0, r5
 8005ebe:	f000 fe33 	bl	8006b28 <_sbrk_r>
 8005ec2:	1c43      	adds	r3, r0, #1
 8005ec4:	d00a      	beq.n	8005edc <sbrk_aligned+0x34>
 8005ec6:	1cc4      	adds	r4, r0, #3
 8005ec8:	f024 0403 	bic.w	r4, r4, #3
 8005ecc:	42a0      	cmp	r0, r4
 8005ece:	d007      	beq.n	8005ee0 <sbrk_aligned+0x38>
 8005ed0:	1a21      	subs	r1, r4, r0
 8005ed2:	4628      	mov	r0, r5
 8005ed4:	f000 fe28 	bl	8006b28 <_sbrk_r>
 8005ed8:	3001      	adds	r0, #1
 8005eda:	d101      	bne.n	8005ee0 <sbrk_aligned+0x38>
 8005edc:	f04f 34ff 	mov.w	r4, #4294967295
 8005ee0:	4620      	mov	r0, r4
 8005ee2:	bd70      	pop	{r4, r5, r6, pc}
 8005ee4:	20000440 	.word	0x20000440

08005ee8 <_malloc_r>:
 8005ee8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8005eec:	1ccd      	adds	r5, r1, #3
 8005eee:	f025 0503 	bic.w	r5, r5, #3
 8005ef2:	3508      	adds	r5, #8
 8005ef4:	2d0c      	cmp	r5, #12
 8005ef6:	bf38      	it	cc
 8005ef8:	250c      	movcc	r5, #12
 8005efa:	2d00      	cmp	r5, #0
 8005efc:	4607      	mov	r7, r0
 8005efe:	db01      	blt.n	8005f04 <_malloc_r+0x1c>
 8005f00:	42a9      	cmp	r1, r5
 8005f02:	d905      	bls.n	8005f10 <_malloc_r+0x28>
 8005f04:	230c      	movs	r3, #12
 8005f06:	2600      	movs	r6, #0
 8005f08:	603b      	str	r3, [r7, #0]
 8005f0a:	4630      	mov	r0, r6
 8005f0c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005f10:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8005fe4 <_malloc_r+0xfc>
 8005f14:	f000 f868 	bl	8005fe8 <__malloc_lock>
 8005f18:	f8d8 3000 	ldr.w	r3, [r8]
 8005f1c:	461c      	mov	r4, r3
 8005f1e:	bb5c      	cbnz	r4, 8005f78 <_malloc_r+0x90>
 8005f20:	4629      	mov	r1, r5
 8005f22:	4638      	mov	r0, r7
 8005f24:	f7ff ffc0 	bl	8005ea8 <sbrk_aligned>
 8005f28:	1c43      	adds	r3, r0, #1
 8005f2a:	4604      	mov	r4, r0
 8005f2c:	d155      	bne.n	8005fda <_malloc_r+0xf2>
 8005f2e:	f8d8 4000 	ldr.w	r4, [r8]
 8005f32:	4626      	mov	r6, r4
 8005f34:	2e00      	cmp	r6, #0
 8005f36:	d145      	bne.n	8005fc4 <_malloc_r+0xdc>
 8005f38:	2c00      	cmp	r4, #0
 8005f3a:	d048      	beq.n	8005fce <_malloc_r+0xe6>
 8005f3c:	6823      	ldr	r3, [r4, #0]
 8005f3e:	4631      	mov	r1, r6
 8005f40:	4638      	mov	r0, r7
 8005f42:	eb04 0903 	add.w	r9, r4, r3
 8005f46:	f000 fdef 	bl	8006b28 <_sbrk_r>
 8005f4a:	4581      	cmp	r9, r0
 8005f4c:	d13f      	bne.n	8005fce <_malloc_r+0xe6>
 8005f4e:	6821      	ldr	r1, [r4, #0]
 8005f50:	4638      	mov	r0, r7
 8005f52:	1a6d      	subs	r5, r5, r1
 8005f54:	4629      	mov	r1, r5
 8005f56:	f7ff ffa7 	bl	8005ea8 <sbrk_aligned>
 8005f5a:	3001      	adds	r0, #1
 8005f5c:	d037      	beq.n	8005fce <_malloc_r+0xe6>
 8005f5e:	6823      	ldr	r3, [r4, #0]
 8005f60:	442b      	add	r3, r5
 8005f62:	6023      	str	r3, [r4, #0]
 8005f64:	f8d8 3000 	ldr.w	r3, [r8]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d038      	beq.n	8005fde <_malloc_r+0xf6>
 8005f6c:	685a      	ldr	r2, [r3, #4]
 8005f6e:	42a2      	cmp	r2, r4
 8005f70:	d12b      	bne.n	8005fca <_malloc_r+0xe2>
 8005f72:	2200      	movs	r2, #0
 8005f74:	605a      	str	r2, [r3, #4]
 8005f76:	e00f      	b.n	8005f98 <_malloc_r+0xb0>
 8005f78:	6822      	ldr	r2, [r4, #0]
 8005f7a:	1b52      	subs	r2, r2, r5
 8005f7c:	d41f      	bmi.n	8005fbe <_malloc_r+0xd6>
 8005f7e:	2a0b      	cmp	r2, #11
 8005f80:	d917      	bls.n	8005fb2 <_malloc_r+0xca>
 8005f82:	1961      	adds	r1, r4, r5
 8005f84:	42a3      	cmp	r3, r4
 8005f86:	6025      	str	r5, [r4, #0]
 8005f88:	bf18      	it	ne
 8005f8a:	6059      	strne	r1, [r3, #4]
 8005f8c:	6863      	ldr	r3, [r4, #4]
 8005f8e:	bf08      	it	eq
 8005f90:	f8c8 1000 	streq.w	r1, [r8]
 8005f94:	5162      	str	r2, [r4, r5]
 8005f96:	604b      	str	r3, [r1, #4]
 8005f98:	4638      	mov	r0, r7
 8005f9a:	f104 060b 	add.w	r6, r4, #11
 8005f9e:	f000 f829 	bl	8005ff4 <__malloc_unlock>
 8005fa2:	f026 0607 	bic.w	r6, r6, #7
 8005fa6:	1d23      	adds	r3, r4, #4
 8005fa8:	1af2      	subs	r2, r6, r3
 8005faa:	d0ae      	beq.n	8005f0a <_malloc_r+0x22>
 8005fac:	1b9b      	subs	r3, r3, r6
 8005fae:	50a3      	str	r3, [r4, r2]
 8005fb0:	e7ab      	b.n	8005f0a <_malloc_r+0x22>
 8005fb2:	42a3      	cmp	r3, r4
 8005fb4:	6862      	ldr	r2, [r4, #4]
 8005fb6:	d1dd      	bne.n	8005f74 <_malloc_r+0x8c>
 8005fb8:	f8c8 2000 	str.w	r2, [r8]
 8005fbc:	e7ec      	b.n	8005f98 <_malloc_r+0xb0>
 8005fbe:	4623      	mov	r3, r4
 8005fc0:	6864      	ldr	r4, [r4, #4]
 8005fc2:	e7ac      	b.n	8005f1e <_malloc_r+0x36>
 8005fc4:	4634      	mov	r4, r6
 8005fc6:	6876      	ldr	r6, [r6, #4]
 8005fc8:	e7b4      	b.n	8005f34 <_malloc_r+0x4c>
 8005fca:	4613      	mov	r3, r2
 8005fcc:	e7cc      	b.n	8005f68 <_malloc_r+0x80>
 8005fce:	230c      	movs	r3, #12
 8005fd0:	4638      	mov	r0, r7
 8005fd2:	603b      	str	r3, [r7, #0]
 8005fd4:	f000 f80e 	bl	8005ff4 <__malloc_unlock>
 8005fd8:	e797      	b.n	8005f0a <_malloc_r+0x22>
 8005fda:	6025      	str	r5, [r4, #0]
 8005fdc:	e7dc      	b.n	8005f98 <_malloc_r+0xb0>
 8005fde:	605b      	str	r3, [r3, #4]
 8005fe0:	deff      	udf	#255	; 0xff
 8005fe2:	bf00      	nop
 8005fe4:	2000043c 	.word	0x2000043c

08005fe8 <__malloc_lock>:
 8005fe8:	4801      	ldr	r0, [pc, #4]	; (8005ff0 <__malloc_lock+0x8>)
 8005fea:	f7ff b88f 	b.w	800510c <__retarget_lock_acquire_recursive>
 8005fee:	bf00      	nop
 8005ff0:	20000438 	.word	0x20000438

08005ff4 <__malloc_unlock>:
 8005ff4:	4801      	ldr	r0, [pc, #4]	; (8005ffc <__malloc_unlock+0x8>)
 8005ff6:	f7ff b88a 	b.w	800510e <__retarget_lock_release_recursive>
 8005ffa:	bf00      	nop
 8005ffc:	20000438 	.word	0x20000438

08006000 <_Balloc>:
 8006000:	b570      	push	{r4, r5, r6, lr}
 8006002:	69c6      	ldr	r6, [r0, #28]
 8006004:	4604      	mov	r4, r0
 8006006:	460d      	mov	r5, r1
 8006008:	b976      	cbnz	r6, 8006028 <_Balloc+0x28>
 800600a:	2010      	movs	r0, #16
 800600c:	f7ff ff44 	bl	8005e98 <malloc>
 8006010:	4602      	mov	r2, r0
 8006012:	61e0      	str	r0, [r4, #28]
 8006014:	b920      	cbnz	r0, 8006020 <_Balloc+0x20>
 8006016:	216b      	movs	r1, #107	; 0x6b
 8006018:	4b17      	ldr	r3, [pc, #92]	; (8006078 <_Balloc+0x78>)
 800601a:	4818      	ldr	r0, [pc, #96]	; (800607c <_Balloc+0x7c>)
 800601c:	f000 fda2 	bl	8006b64 <__assert_func>
 8006020:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8006024:	6006      	str	r6, [r0, #0]
 8006026:	60c6      	str	r6, [r0, #12]
 8006028:	69e6      	ldr	r6, [r4, #28]
 800602a:	68f3      	ldr	r3, [r6, #12]
 800602c:	b183      	cbz	r3, 8006050 <_Balloc+0x50>
 800602e:	69e3      	ldr	r3, [r4, #28]
 8006030:	68db      	ldr	r3, [r3, #12]
 8006032:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8006036:	b9b8      	cbnz	r0, 8006068 <_Balloc+0x68>
 8006038:	2101      	movs	r1, #1
 800603a:	fa01 f605 	lsl.w	r6, r1, r5
 800603e:	1d72      	adds	r2, r6, #5
 8006040:	4620      	mov	r0, r4
 8006042:	0092      	lsls	r2, r2, #2
 8006044:	f000 fdac 	bl	8006ba0 <_calloc_r>
 8006048:	b160      	cbz	r0, 8006064 <_Balloc+0x64>
 800604a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800604e:	e00e      	b.n	800606e <_Balloc+0x6e>
 8006050:	2221      	movs	r2, #33	; 0x21
 8006052:	2104      	movs	r1, #4
 8006054:	4620      	mov	r0, r4
 8006056:	f000 fda3 	bl	8006ba0 <_calloc_r>
 800605a:	69e3      	ldr	r3, [r4, #28]
 800605c:	60f0      	str	r0, [r6, #12]
 800605e:	68db      	ldr	r3, [r3, #12]
 8006060:	2b00      	cmp	r3, #0
 8006062:	d1e4      	bne.n	800602e <_Balloc+0x2e>
 8006064:	2000      	movs	r0, #0
 8006066:	bd70      	pop	{r4, r5, r6, pc}
 8006068:	6802      	ldr	r2, [r0, #0]
 800606a:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 800606e:	2300      	movs	r3, #0
 8006070:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8006074:	e7f7      	b.n	8006066 <_Balloc+0x66>
 8006076:	bf00      	nop
 8006078:	080073ab 	.word	0x080073ab
 800607c:	0800742b 	.word	0x0800742b

08006080 <_Bfree>:
 8006080:	b570      	push	{r4, r5, r6, lr}
 8006082:	69c6      	ldr	r6, [r0, #28]
 8006084:	4605      	mov	r5, r0
 8006086:	460c      	mov	r4, r1
 8006088:	b976      	cbnz	r6, 80060a8 <_Bfree+0x28>
 800608a:	2010      	movs	r0, #16
 800608c:	f7ff ff04 	bl	8005e98 <malloc>
 8006090:	4602      	mov	r2, r0
 8006092:	61e8      	str	r0, [r5, #28]
 8006094:	b920      	cbnz	r0, 80060a0 <_Bfree+0x20>
 8006096:	218f      	movs	r1, #143	; 0x8f
 8006098:	4b08      	ldr	r3, [pc, #32]	; (80060bc <_Bfree+0x3c>)
 800609a:	4809      	ldr	r0, [pc, #36]	; (80060c0 <_Bfree+0x40>)
 800609c:	f000 fd62 	bl	8006b64 <__assert_func>
 80060a0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80060a4:	6006      	str	r6, [r0, #0]
 80060a6:	60c6      	str	r6, [r0, #12]
 80060a8:	b13c      	cbz	r4, 80060ba <_Bfree+0x3a>
 80060aa:	69eb      	ldr	r3, [r5, #28]
 80060ac:	6862      	ldr	r2, [r4, #4]
 80060ae:	68db      	ldr	r3, [r3, #12]
 80060b0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80060b4:	6021      	str	r1, [r4, #0]
 80060b6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80060ba:	bd70      	pop	{r4, r5, r6, pc}
 80060bc:	080073ab 	.word	0x080073ab
 80060c0:	0800742b 	.word	0x0800742b

080060c4 <__multadd>:
 80060c4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80060c8:	4607      	mov	r7, r0
 80060ca:	460c      	mov	r4, r1
 80060cc:	461e      	mov	r6, r3
 80060ce:	2000      	movs	r0, #0
 80060d0:	690d      	ldr	r5, [r1, #16]
 80060d2:	f101 0c14 	add.w	ip, r1, #20
 80060d6:	f8dc 3000 	ldr.w	r3, [ip]
 80060da:	3001      	adds	r0, #1
 80060dc:	b299      	uxth	r1, r3
 80060de:	fb02 6101 	mla	r1, r2, r1, r6
 80060e2:	0c1e      	lsrs	r6, r3, #16
 80060e4:	0c0b      	lsrs	r3, r1, #16
 80060e6:	fb02 3306 	mla	r3, r2, r6, r3
 80060ea:	b289      	uxth	r1, r1
 80060ec:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80060f0:	4285      	cmp	r5, r0
 80060f2:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80060f6:	f84c 1b04 	str.w	r1, [ip], #4
 80060fa:	dcec      	bgt.n	80060d6 <__multadd+0x12>
 80060fc:	b30e      	cbz	r6, 8006142 <__multadd+0x7e>
 80060fe:	68a3      	ldr	r3, [r4, #8]
 8006100:	42ab      	cmp	r3, r5
 8006102:	dc19      	bgt.n	8006138 <__multadd+0x74>
 8006104:	6861      	ldr	r1, [r4, #4]
 8006106:	4638      	mov	r0, r7
 8006108:	3101      	adds	r1, #1
 800610a:	f7ff ff79 	bl	8006000 <_Balloc>
 800610e:	4680      	mov	r8, r0
 8006110:	b928      	cbnz	r0, 800611e <__multadd+0x5a>
 8006112:	4602      	mov	r2, r0
 8006114:	21ba      	movs	r1, #186	; 0xba
 8006116:	4b0c      	ldr	r3, [pc, #48]	; (8006148 <__multadd+0x84>)
 8006118:	480c      	ldr	r0, [pc, #48]	; (800614c <__multadd+0x88>)
 800611a:	f000 fd23 	bl	8006b64 <__assert_func>
 800611e:	6922      	ldr	r2, [r4, #16]
 8006120:	f104 010c 	add.w	r1, r4, #12
 8006124:	3202      	adds	r2, #2
 8006126:	0092      	lsls	r2, r2, #2
 8006128:	300c      	adds	r0, #12
 800612a:	f000 fd0d 	bl	8006b48 <memcpy>
 800612e:	4621      	mov	r1, r4
 8006130:	4638      	mov	r0, r7
 8006132:	f7ff ffa5 	bl	8006080 <_Bfree>
 8006136:	4644      	mov	r4, r8
 8006138:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800613c:	3501      	adds	r5, #1
 800613e:	615e      	str	r6, [r3, #20]
 8006140:	6125      	str	r5, [r4, #16]
 8006142:	4620      	mov	r0, r4
 8006144:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006148:	0800741a 	.word	0x0800741a
 800614c:	0800742b 	.word	0x0800742b

08006150 <__hi0bits>:
 8006150:	0c02      	lsrs	r2, r0, #16
 8006152:	0412      	lsls	r2, r2, #16
 8006154:	4603      	mov	r3, r0
 8006156:	b9ca      	cbnz	r2, 800618c <__hi0bits+0x3c>
 8006158:	0403      	lsls	r3, r0, #16
 800615a:	2010      	movs	r0, #16
 800615c:	f013 4f7f 	tst.w	r3, #4278190080	; 0xff000000
 8006160:	bf04      	itt	eq
 8006162:	021b      	lsleq	r3, r3, #8
 8006164:	3008      	addeq	r0, #8
 8006166:	f013 4f70 	tst.w	r3, #4026531840	; 0xf0000000
 800616a:	bf04      	itt	eq
 800616c:	011b      	lsleq	r3, r3, #4
 800616e:	3004      	addeq	r0, #4
 8006170:	f013 4f40 	tst.w	r3, #3221225472	; 0xc0000000
 8006174:	bf04      	itt	eq
 8006176:	009b      	lsleq	r3, r3, #2
 8006178:	3002      	addeq	r0, #2
 800617a:	2b00      	cmp	r3, #0
 800617c:	db05      	blt.n	800618a <__hi0bits+0x3a>
 800617e:	f013 4f80 	tst.w	r3, #1073741824	; 0x40000000
 8006182:	f100 0001 	add.w	r0, r0, #1
 8006186:	bf08      	it	eq
 8006188:	2020      	moveq	r0, #32
 800618a:	4770      	bx	lr
 800618c:	2000      	movs	r0, #0
 800618e:	e7e5      	b.n	800615c <__hi0bits+0xc>

08006190 <__lo0bits>:
 8006190:	6803      	ldr	r3, [r0, #0]
 8006192:	4602      	mov	r2, r0
 8006194:	f013 0007 	ands.w	r0, r3, #7
 8006198:	d00b      	beq.n	80061b2 <__lo0bits+0x22>
 800619a:	07d9      	lsls	r1, r3, #31
 800619c:	d421      	bmi.n	80061e2 <__lo0bits+0x52>
 800619e:	0798      	lsls	r0, r3, #30
 80061a0:	bf49      	itett	mi
 80061a2:	085b      	lsrmi	r3, r3, #1
 80061a4:	089b      	lsrpl	r3, r3, #2
 80061a6:	2001      	movmi	r0, #1
 80061a8:	6013      	strmi	r3, [r2, #0]
 80061aa:	bf5c      	itt	pl
 80061ac:	2002      	movpl	r0, #2
 80061ae:	6013      	strpl	r3, [r2, #0]
 80061b0:	4770      	bx	lr
 80061b2:	b299      	uxth	r1, r3
 80061b4:	b909      	cbnz	r1, 80061ba <__lo0bits+0x2a>
 80061b6:	2010      	movs	r0, #16
 80061b8:	0c1b      	lsrs	r3, r3, #16
 80061ba:	b2d9      	uxtb	r1, r3
 80061bc:	b909      	cbnz	r1, 80061c2 <__lo0bits+0x32>
 80061be:	3008      	adds	r0, #8
 80061c0:	0a1b      	lsrs	r3, r3, #8
 80061c2:	0719      	lsls	r1, r3, #28
 80061c4:	bf04      	itt	eq
 80061c6:	091b      	lsreq	r3, r3, #4
 80061c8:	3004      	addeq	r0, #4
 80061ca:	0799      	lsls	r1, r3, #30
 80061cc:	bf04      	itt	eq
 80061ce:	089b      	lsreq	r3, r3, #2
 80061d0:	3002      	addeq	r0, #2
 80061d2:	07d9      	lsls	r1, r3, #31
 80061d4:	d403      	bmi.n	80061de <__lo0bits+0x4e>
 80061d6:	085b      	lsrs	r3, r3, #1
 80061d8:	f100 0001 	add.w	r0, r0, #1
 80061dc:	d003      	beq.n	80061e6 <__lo0bits+0x56>
 80061de:	6013      	str	r3, [r2, #0]
 80061e0:	4770      	bx	lr
 80061e2:	2000      	movs	r0, #0
 80061e4:	4770      	bx	lr
 80061e6:	2020      	movs	r0, #32
 80061e8:	4770      	bx	lr
	...

080061ec <__i2b>:
 80061ec:	b510      	push	{r4, lr}
 80061ee:	460c      	mov	r4, r1
 80061f0:	2101      	movs	r1, #1
 80061f2:	f7ff ff05 	bl	8006000 <_Balloc>
 80061f6:	4602      	mov	r2, r0
 80061f8:	b928      	cbnz	r0, 8006206 <__i2b+0x1a>
 80061fa:	f240 1145 	movw	r1, #325	; 0x145
 80061fe:	4b04      	ldr	r3, [pc, #16]	; (8006210 <__i2b+0x24>)
 8006200:	4804      	ldr	r0, [pc, #16]	; (8006214 <__i2b+0x28>)
 8006202:	f000 fcaf 	bl	8006b64 <__assert_func>
 8006206:	2301      	movs	r3, #1
 8006208:	6144      	str	r4, [r0, #20]
 800620a:	6103      	str	r3, [r0, #16]
 800620c:	bd10      	pop	{r4, pc}
 800620e:	bf00      	nop
 8006210:	0800741a 	.word	0x0800741a
 8006214:	0800742b 	.word	0x0800742b

08006218 <__multiply>:
 8006218:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800621c:	4691      	mov	r9, r2
 800621e:	690a      	ldr	r2, [r1, #16]
 8006220:	f8d9 3010 	ldr.w	r3, [r9, #16]
 8006224:	460c      	mov	r4, r1
 8006226:	429a      	cmp	r2, r3
 8006228:	bfbe      	ittt	lt
 800622a:	460b      	movlt	r3, r1
 800622c:	464c      	movlt	r4, r9
 800622e:	4699      	movlt	r9, r3
 8006230:	6927      	ldr	r7, [r4, #16]
 8006232:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8006236:	68a3      	ldr	r3, [r4, #8]
 8006238:	6861      	ldr	r1, [r4, #4]
 800623a:	eb07 060a 	add.w	r6, r7, sl
 800623e:	42b3      	cmp	r3, r6
 8006240:	b085      	sub	sp, #20
 8006242:	bfb8      	it	lt
 8006244:	3101      	addlt	r1, #1
 8006246:	f7ff fedb 	bl	8006000 <_Balloc>
 800624a:	b930      	cbnz	r0, 800625a <__multiply+0x42>
 800624c:	4602      	mov	r2, r0
 800624e:	f44f 71b1 	mov.w	r1, #354	; 0x162
 8006252:	4b43      	ldr	r3, [pc, #268]	; (8006360 <__multiply+0x148>)
 8006254:	4843      	ldr	r0, [pc, #268]	; (8006364 <__multiply+0x14c>)
 8006256:	f000 fc85 	bl	8006b64 <__assert_func>
 800625a:	f100 0514 	add.w	r5, r0, #20
 800625e:	462b      	mov	r3, r5
 8006260:	2200      	movs	r2, #0
 8006262:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8006266:	4543      	cmp	r3, r8
 8006268:	d321      	bcc.n	80062ae <__multiply+0x96>
 800626a:	f104 0314 	add.w	r3, r4, #20
 800626e:	eb03 0787 	add.w	r7, r3, r7, lsl #2
 8006272:	f109 0314 	add.w	r3, r9, #20
 8006276:	eb03 028a 	add.w	r2, r3, sl, lsl #2
 800627a:	9202      	str	r2, [sp, #8]
 800627c:	1b3a      	subs	r2, r7, r4
 800627e:	3a15      	subs	r2, #21
 8006280:	f022 0203 	bic.w	r2, r2, #3
 8006284:	3204      	adds	r2, #4
 8006286:	f104 0115 	add.w	r1, r4, #21
 800628a:	428f      	cmp	r7, r1
 800628c:	bf38      	it	cc
 800628e:	2204      	movcc	r2, #4
 8006290:	9201      	str	r2, [sp, #4]
 8006292:	9a02      	ldr	r2, [sp, #8]
 8006294:	9303      	str	r3, [sp, #12]
 8006296:	429a      	cmp	r2, r3
 8006298:	d80c      	bhi.n	80062b4 <__multiply+0x9c>
 800629a:	2e00      	cmp	r6, #0
 800629c:	dd03      	ble.n	80062a6 <__multiply+0x8e>
 800629e:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 80062a2:	2b00      	cmp	r3, #0
 80062a4:	d05a      	beq.n	800635c <__multiply+0x144>
 80062a6:	6106      	str	r6, [r0, #16]
 80062a8:	b005      	add	sp, #20
 80062aa:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80062ae:	f843 2b04 	str.w	r2, [r3], #4
 80062b2:	e7d8      	b.n	8006266 <__multiply+0x4e>
 80062b4:	f8b3 a000 	ldrh.w	sl, [r3]
 80062b8:	f1ba 0f00 	cmp.w	sl, #0
 80062bc:	d023      	beq.n	8006306 <__multiply+0xee>
 80062be:	46a9      	mov	r9, r5
 80062c0:	f04f 0c00 	mov.w	ip, #0
 80062c4:	f104 0e14 	add.w	lr, r4, #20
 80062c8:	f85e 2b04 	ldr.w	r2, [lr], #4
 80062cc:	f8d9 1000 	ldr.w	r1, [r9]
 80062d0:	fa1f fb82 	uxth.w	fp, r2
 80062d4:	b289      	uxth	r1, r1
 80062d6:	fb0a 110b 	mla	r1, sl, fp, r1
 80062da:	4461      	add	r1, ip
 80062dc:	f8d9 c000 	ldr.w	ip, [r9]
 80062e0:	0c12      	lsrs	r2, r2, #16
 80062e2:	ea4f 4c1c 	mov.w	ip, ip, lsr #16
 80062e6:	fb0a c202 	mla	r2, sl, r2, ip
 80062ea:	eb02 4211 	add.w	r2, r2, r1, lsr #16
 80062ee:	b289      	uxth	r1, r1
 80062f0:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 80062f4:	4577      	cmp	r7, lr
 80062f6:	ea4f 4c12 	mov.w	ip, r2, lsr #16
 80062fa:	f849 1b04 	str.w	r1, [r9], #4
 80062fe:	d8e3      	bhi.n	80062c8 <__multiply+0xb0>
 8006300:	9a01      	ldr	r2, [sp, #4]
 8006302:	f845 c002 	str.w	ip, [r5, r2]
 8006306:	9a03      	ldr	r2, [sp, #12]
 8006308:	3304      	adds	r3, #4
 800630a:	f8b2 9002 	ldrh.w	r9, [r2, #2]
 800630e:	f1b9 0f00 	cmp.w	r9, #0
 8006312:	d021      	beq.n	8006358 <__multiply+0x140>
 8006314:	46ae      	mov	lr, r5
 8006316:	f04f 0a00 	mov.w	sl, #0
 800631a:	6829      	ldr	r1, [r5, #0]
 800631c:	f104 0c14 	add.w	ip, r4, #20
 8006320:	f8bc b000 	ldrh.w	fp, [ip]
 8006324:	f8be 2002 	ldrh.w	r2, [lr, #2]
 8006328:	b289      	uxth	r1, r1
 800632a:	fb09 220b 	mla	r2, r9, fp, r2
 800632e:	4452      	add	r2, sl
 8006330:	ea41 4102 	orr.w	r1, r1, r2, lsl #16
 8006334:	f84e 1b04 	str.w	r1, [lr], #4
 8006338:	f85c 1b04 	ldr.w	r1, [ip], #4
 800633c:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006340:	f8be 1000 	ldrh.w	r1, [lr]
 8006344:	4567      	cmp	r7, ip
 8006346:	fb09 110a 	mla	r1, r9, sl, r1
 800634a:	eb01 4112 	add.w	r1, r1, r2, lsr #16
 800634e:	ea4f 4a11 	mov.w	sl, r1, lsr #16
 8006352:	d8e5      	bhi.n	8006320 <__multiply+0x108>
 8006354:	9a01      	ldr	r2, [sp, #4]
 8006356:	50a9      	str	r1, [r5, r2]
 8006358:	3504      	adds	r5, #4
 800635a:	e79a      	b.n	8006292 <__multiply+0x7a>
 800635c:	3e01      	subs	r6, #1
 800635e:	e79c      	b.n	800629a <__multiply+0x82>
 8006360:	0800741a 	.word	0x0800741a
 8006364:	0800742b 	.word	0x0800742b

08006368 <__pow5mult>:
 8006368:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800636c:	4615      	mov	r5, r2
 800636e:	f012 0203 	ands.w	r2, r2, #3
 8006372:	4606      	mov	r6, r0
 8006374:	460f      	mov	r7, r1
 8006376:	d007      	beq.n	8006388 <__pow5mult+0x20>
 8006378:	4c25      	ldr	r4, [pc, #148]	; (8006410 <__pow5mult+0xa8>)
 800637a:	3a01      	subs	r2, #1
 800637c:	2300      	movs	r3, #0
 800637e:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8006382:	f7ff fe9f 	bl	80060c4 <__multadd>
 8006386:	4607      	mov	r7, r0
 8006388:	10ad      	asrs	r5, r5, #2
 800638a:	d03d      	beq.n	8006408 <__pow5mult+0xa0>
 800638c:	69f4      	ldr	r4, [r6, #28]
 800638e:	b97c      	cbnz	r4, 80063b0 <__pow5mult+0x48>
 8006390:	2010      	movs	r0, #16
 8006392:	f7ff fd81 	bl	8005e98 <malloc>
 8006396:	4602      	mov	r2, r0
 8006398:	61f0      	str	r0, [r6, #28]
 800639a:	b928      	cbnz	r0, 80063a8 <__pow5mult+0x40>
 800639c:	f240 11b3 	movw	r1, #435	; 0x1b3
 80063a0:	4b1c      	ldr	r3, [pc, #112]	; (8006414 <__pow5mult+0xac>)
 80063a2:	481d      	ldr	r0, [pc, #116]	; (8006418 <__pow5mult+0xb0>)
 80063a4:	f000 fbde 	bl	8006b64 <__assert_func>
 80063a8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80063ac:	6004      	str	r4, [r0, #0]
 80063ae:	60c4      	str	r4, [r0, #12]
 80063b0:	f8d6 801c 	ldr.w	r8, [r6, #28]
 80063b4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80063b8:	b94c      	cbnz	r4, 80063ce <__pow5mult+0x66>
 80063ba:	f240 2171 	movw	r1, #625	; 0x271
 80063be:	4630      	mov	r0, r6
 80063c0:	f7ff ff14 	bl	80061ec <__i2b>
 80063c4:	2300      	movs	r3, #0
 80063c6:	4604      	mov	r4, r0
 80063c8:	f8c8 0008 	str.w	r0, [r8, #8]
 80063cc:	6003      	str	r3, [r0, #0]
 80063ce:	f04f 0900 	mov.w	r9, #0
 80063d2:	07eb      	lsls	r3, r5, #31
 80063d4:	d50a      	bpl.n	80063ec <__pow5mult+0x84>
 80063d6:	4639      	mov	r1, r7
 80063d8:	4622      	mov	r2, r4
 80063da:	4630      	mov	r0, r6
 80063dc:	f7ff ff1c 	bl	8006218 <__multiply>
 80063e0:	4680      	mov	r8, r0
 80063e2:	4639      	mov	r1, r7
 80063e4:	4630      	mov	r0, r6
 80063e6:	f7ff fe4b 	bl	8006080 <_Bfree>
 80063ea:	4647      	mov	r7, r8
 80063ec:	106d      	asrs	r5, r5, #1
 80063ee:	d00b      	beq.n	8006408 <__pow5mult+0xa0>
 80063f0:	6820      	ldr	r0, [r4, #0]
 80063f2:	b938      	cbnz	r0, 8006404 <__pow5mult+0x9c>
 80063f4:	4622      	mov	r2, r4
 80063f6:	4621      	mov	r1, r4
 80063f8:	4630      	mov	r0, r6
 80063fa:	f7ff ff0d 	bl	8006218 <__multiply>
 80063fe:	6020      	str	r0, [r4, #0]
 8006400:	f8c0 9000 	str.w	r9, [r0]
 8006404:	4604      	mov	r4, r0
 8006406:	e7e4      	b.n	80063d2 <__pow5mult+0x6a>
 8006408:	4638      	mov	r0, r7
 800640a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800640e:	bf00      	nop
 8006410:	08007578 	.word	0x08007578
 8006414:	080073ab 	.word	0x080073ab
 8006418:	0800742b 	.word	0x0800742b

0800641c <__lshift>:
 800641c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006420:	460c      	mov	r4, r1
 8006422:	4607      	mov	r7, r0
 8006424:	4691      	mov	r9, r2
 8006426:	6923      	ldr	r3, [r4, #16]
 8006428:	6849      	ldr	r1, [r1, #4]
 800642a:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800642e:	68a3      	ldr	r3, [r4, #8]
 8006430:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8006434:	f108 0601 	add.w	r6, r8, #1
 8006438:	42b3      	cmp	r3, r6
 800643a:	db0b      	blt.n	8006454 <__lshift+0x38>
 800643c:	4638      	mov	r0, r7
 800643e:	f7ff fddf 	bl	8006000 <_Balloc>
 8006442:	4605      	mov	r5, r0
 8006444:	b948      	cbnz	r0, 800645a <__lshift+0x3e>
 8006446:	4602      	mov	r2, r0
 8006448:	f44f 71ef 	mov.w	r1, #478	; 0x1de
 800644c:	4b27      	ldr	r3, [pc, #156]	; (80064ec <__lshift+0xd0>)
 800644e:	4828      	ldr	r0, [pc, #160]	; (80064f0 <__lshift+0xd4>)
 8006450:	f000 fb88 	bl	8006b64 <__assert_func>
 8006454:	3101      	adds	r1, #1
 8006456:	005b      	lsls	r3, r3, #1
 8006458:	e7ee      	b.n	8006438 <__lshift+0x1c>
 800645a:	2300      	movs	r3, #0
 800645c:	f100 0114 	add.w	r1, r0, #20
 8006460:	f100 0210 	add.w	r2, r0, #16
 8006464:	4618      	mov	r0, r3
 8006466:	4553      	cmp	r3, sl
 8006468:	db33      	blt.n	80064d2 <__lshift+0xb6>
 800646a:	6920      	ldr	r0, [r4, #16]
 800646c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8006470:	f104 0314 	add.w	r3, r4, #20
 8006474:	f019 091f 	ands.w	r9, r9, #31
 8006478:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 800647c:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8006480:	d02b      	beq.n	80064da <__lshift+0xbe>
 8006482:	468a      	mov	sl, r1
 8006484:	2200      	movs	r2, #0
 8006486:	f1c9 0e20 	rsb	lr, r9, #32
 800648a:	6818      	ldr	r0, [r3, #0]
 800648c:	fa00 f009 	lsl.w	r0, r0, r9
 8006490:	4310      	orrs	r0, r2
 8006492:	f84a 0b04 	str.w	r0, [sl], #4
 8006496:	f853 2b04 	ldr.w	r2, [r3], #4
 800649a:	459c      	cmp	ip, r3
 800649c:	fa22 f20e 	lsr.w	r2, r2, lr
 80064a0:	d8f3      	bhi.n	800648a <__lshift+0x6e>
 80064a2:	ebac 0304 	sub.w	r3, ip, r4
 80064a6:	3b15      	subs	r3, #21
 80064a8:	f023 0303 	bic.w	r3, r3, #3
 80064ac:	3304      	adds	r3, #4
 80064ae:	f104 0015 	add.w	r0, r4, #21
 80064b2:	4584      	cmp	ip, r0
 80064b4:	bf38      	it	cc
 80064b6:	2304      	movcc	r3, #4
 80064b8:	50ca      	str	r2, [r1, r3]
 80064ba:	b10a      	cbz	r2, 80064c0 <__lshift+0xa4>
 80064bc:	f108 0602 	add.w	r6, r8, #2
 80064c0:	3e01      	subs	r6, #1
 80064c2:	4638      	mov	r0, r7
 80064c4:	4621      	mov	r1, r4
 80064c6:	612e      	str	r6, [r5, #16]
 80064c8:	f7ff fdda 	bl	8006080 <_Bfree>
 80064cc:	4628      	mov	r0, r5
 80064ce:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80064d2:	f842 0f04 	str.w	r0, [r2, #4]!
 80064d6:	3301      	adds	r3, #1
 80064d8:	e7c5      	b.n	8006466 <__lshift+0x4a>
 80064da:	3904      	subs	r1, #4
 80064dc:	f853 2b04 	ldr.w	r2, [r3], #4
 80064e0:	459c      	cmp	ip, r3
 80064e2:	f841 2f04 	str.w	r2, [r1, #4]!
 80064e6:	d8f9      	bhi.n	80064dc <__lshift+0xc0>
 80064e8:	e7ea      	b.n	80064c0 <__lshift+0xa4>
 80064ea:	bf00      	nop
 80064ec:	0800741a 	.word	0x0800741a
 80064f0:	0800742b 	.word	0x0800742b

080064f4 <__mcmp>:
 80064f4:	4603      	mov	r3, r0
 80064f6:	690a      	ldr	r2, [r1, #16]
 80064f8:	6900      	ldr	r0, [r0, #16]
 80064fa:	b530      	push	{r4, r5, lr}
 80064fc:	1a80      	subs	r0, r0, r2
 80064fe:	d10d      	bne.n	800651c <__mcmp+0x28>
 8006500:	3314      	adds	r3, #20
 8006502:	3114      	adds	r1, #20
 8006504:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8006508:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800650c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8006510:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8006514:	4295      	cmp	r5, r2
 8006516:	d002      	beq.n	800651e <__mcmp+0x2a>
 8006518:	d304      	bcc.n	8006524 <__mcmp+0x30>
 800651a:	2001      	movs	r0, #1
 800651c:	bd30      	pop	{r4, r5, pc}
 800651e:	42a3      	cmp	r3, r4
 8006520:	d3f4      	bcc.n	800650c <__mcmp+0x18>
 8006522:	e7fb      	b.n	800651c <__mcmp+0x28>
 8006524:	f04f 30ff 	mov.w	r0, #4294967295
 8006528:	e7f8      	b.n	800651c <__mcmp+0x28>
	...

0800652c <__mdiff>:
 800652c:	e92d 4ff8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006530:	460d      	mov	r5, r1
 8006532:	4607      	mov	r7, r0
 8006534:	4611      	mov	r1, r2
 8006536:	4628      	mov	r0, r5
 8006538:	4614      	mov	r4, r2
 800653a:	f7ff ffdb 	bl	80064f4 <__mcmp>
 800653e:	1e06      	subs	r6, r0, #0
 8006540:	d111      	bne.n	8006566 <__mdiff+0x3a>
 8006542:	4631      	mov	r1, r6
 8006544:	4638      	mov	r0, r7
 8006546:	f7ff fd5b 	bl	8006000 <_Balloc>
 800654a:	4602      	mov	r2, r0
 800654c:	b928      	cbnz	r0, 800655a <__mdiff+0x2e>
 800654e:	f240 2137 	movw	r1, #567	; 0x237
 8006552:	4b3a      	ldr	r3, [pc, #232]	; (800663c <__mdiff+0x110>)
 8006554:	483a      	ldr	r0, [pc, #232]	; (8006640 <__mdiff+0x114>)
 8006556:	f000 fb05 	bl	8006b64 <__assert_func>
 800655a:	2301      	movs	r3, #1
 800655c:	e9c0 3604 	strd	r3, r6, [r0, #16]
 8006560:	4610      	mov	r0, r2
 8006562:	e8bd 8ff8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006566:	bfa4      	itt	ge
 8006568:	4623      	movge	r3, r4
 800656a:	462c      	movge	r4, r5
 800656c:	4638      	mov	r0, r7
 800656e:	6861      	ldr	r1, [r4, #4]
 8006570:	bfa6      	itte	ge
 8006572:	461d      	movge	r5, r3
 8006574:	2600      	movge	r6, #0
 8006576:	2601      	movlt	r6, #1
 8006578:	f7ff fd42 	bl	8006000 <_Balloc>
 800657c:	4602      	mov	r2, r0
 800657e:	b918      	cbnz	r0, 8006588 <__mdiff+0x5c>
 8006580:	f240 2145 	movw	r1, #581	; 0x245
 8006584:	4b2d      	ldr	r3, [pc, #180]	; (800663c <__mdiff+0x110>)
 8006586:	e7e5      	b.n	8006554 <__mdiff+0x28>
 8006588:	f102 0814 	add.w	r8, r2, #20
 800658c:	46c2      	mov	sl, r8
 800658e:	f04f 0c00 	mov.w	ip, #0
 8006592:	6927      	ldr	r7, [r4, #16]
 8006594:	60c6      	str	r6, [r0, #12]
 8006596:	692e      	ldr	r6, [r5, #16]
 8006598:	f104 0014 	add.w	r0, r4, #20
 800659c:	f105 0914 	add.w	r9, r5, #20
 80065a0:	eb00 0e87 	add.w	lr, r0, r7, lsl #2
 80065a4:	eb09 0686 	add.w	r6, r9, r6, lsl #2
 80065a8:	3410      	adds	r4, #16
 80065aa:	f854 bf04 	ldr.w	fp, [r4, #4]!
 80065ae:	f859 3b04 	ldr.w	r3, [r9], #4
 80065b2:	fa1f f18b 	uxth.w	r1, fp
 80065b6:	4461      	add	r1, ip
 80065b8:	fa1f fc83 	uxth.w	ip, r3
 80065bc:	0c1b      	lsrs	r3, r3, #16
 80065be:	eba1 010c 	sub.w	r1, r1, ip
 80065c2:	ebc3 431b 	rsb	r3, r3, fp, lsr #16
 80065c6:	eb03 4321 	add.w	r3, r3, r1, asr #16
 80065ca:	b289      	uxth	r1, r1
 80065cc:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 80065d0:	454e      	cmp	r6, r9
 80065d2:	ea4f 4c23 	mov.w	ip, r3, asr #16
 80065d6:	f84a 1b04 	str.w	r1, [sl], #4
 80065da:	d8e6      	bhi.n	80065aa <__mdiff+0x7e>
 80065dc:	1b73      	subs	r3, r6, r5
 80065de:	3b15      	subs	r3, #21
 80065e0:	f023 0303 	bic.w	r3, r3, #3
 80065e4:	3515      	adds	r5, #21
 80065e6:	3304      	adds	r3, #4
 80065e8:	42ae      	cmp	r6, r5
 80065ea:	bf38      	it	cc
 80065ec:	2304      	movcc	r3, #4
 80065ee:	4418      	add	r0, r3
 80065f0:	4443      	add	r3, r8
 80065f2:	461e      	mov	r6, r3
 80065f4:	4605      	mov	r5, r0
 80065f6:	4575      	cmp	r5, lr
 80065f8:	d30e      	bcc.n	8006618 <__mdiff+0xec>
 80065fa:	f10e 0103 	add.w	r1, lr, #3
 80065fe:	1a09      	subs	r1, r1, r0
 8006600:	f021 0103 	bic.w	r1, r1, #3
 8006604:	3803      	subs	r0, #3
 8006606:	4586      	cmp	lr, r0
 8006608:	bf38      	it	cc
 800660a:	2100      	movcc	r1, #0
 800660c:	440b      	add	r3, r1
 800660e:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8006612:	b189      	cbz	r1, 8006638 <__mdiff+0x10c>
 8006614:	6117      	str	r7, [r2, #16]
 8006616:	e7a3      	b.n	8006560 <__mdiff+0x34>
 8006618:	f855 8b04 	ldr.w	r8, [r5], #4
 800661c:	fa1f f188 	uxth.w	r1, r8
 8006620:	4461      	add	r1, ip
 8006622:	140c      	asrs	r4, r1, #16
 8006624:	eb04 4418 	add.w	r4, r4, r8, lsr #16
 8006628:	b289      	uxth	r1, r1
 800662a:	ea41 4104 	orr.w	r1, r1, r4, lsl #16
 800662e:	ea4f 4c24 	mov.w	ip, r4, asr #16
 8006632:	f846 1b04 	str.w	r1, [r6], #4
 8006636:	e7de      	b.n	80065f6 <__mdiff+0xca>
 8006638:	3f01      	subs	r7, #1
 800663a:	e7e8      	b.n	800660e <__mdiff+0xe2>
 800663c:	0800741a 	.word	0x0800741a
 8006640:	0800742b 	.word	0x0800742b

08006644 <__d2b>:
 8006644:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006646:	2101      	movs	r1, #1
 8006648:	4617      	mov	r7, r2
 800664a:	461c      	mov	r4, r3
 800664c:	9e08      	ldr	r6, [sp, #32]
 800664e:	f7ff fcd7 	bl	8006000 <_Balloc>
 8006652:	4605      	mov	r5, r0
 8006654:	b930      	cbnz	r0, 8006664 <__d2b+0x20>
 8006656:	4602      	mov	r2, r0
 8006658:	f240 310f 	movw	r1, #783	; 0x30f
 800665c:	4b22      	ldr	r3, [pc, #136]	; (80066e8 <__d2b+0xa4>)
 800665e:	4823      	ldr	r0, [pc, #140]	; (80066ec <__d2b+0xa8>)
 8006660:	f000 fa80 	bl	8006b64 <__assert_func>
 8006664:	f3c4 0313 	ubfx	r3, r4, #0, #20
 8006668:	f3c4 540a 	ubfx	r4, r4, #20, #11
 800666c:	bb24      	cbnz	r4, 80066b8 <__d2b+0x74>
 800666e:	2f00      	cmp	r7, #0
 8006670:	9301      	str	r3, [sp, #4]
 8006672:	d026      	beq.n	80066c2 <__d2b+0x7e>
 8006674:	4668      	mov	r0, sp
 8006676:	9700      	str	r7, [sp, #0]
 8006678:	f7ff fd8a 	bl	8006190 <__lo0bits>
 800667c:	e9dd 1200 	ldrd	r1, r2, [sp]
 8006680:	b1e8      	cbz	r0, 80066be <__d2b+0x7a>
 8006682:	f1c0 0320 	rsb	r3, r0, #32
 8006686:	fa02 f303 	lsl.w	r3, r2, r3
 800668a:	430b      	orrs	r3, r1
 800668c:	40c2      	lsrs	r2, r0
 800668e:	616b      	str	r3, [r5, #20]
 8006690:	9201      	str	r2, [sp, #4]
 8006692:	9b01      	ldr	r3, [sp, #4]
 8006694:	2b00      	cmp	r3, #0
 8006696:	bf14      	ite	ne
 8006698:	2102      	movne	r1, #2
 800669a:	2101      	moveq	r1, #1
 800669c:	61ab      	str	r3, [r5, #24]
 800669e:	6129      	str	r1, [r5, #16]
 80066a0:	b1bc      	cbz	r4, 80066d2 <__d2b+0x8e>
 80066a2:	f2a4 4433 	subw	r4, r4, #1075	; 0x433
 80066a6:	4404      	add	r4, r0
 80066a8:	6034      	str	r4, [r6, #0]
 80066aa:	f1c0 0035 	rsb	r0, r0, #53	; 0x35
 80066ae:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80066b0:	6018      	str	r0, [r3, #0]
 80066b2:	4628      	mov	r0, r5
 80066b4:	b003      	add	sp, #12
 80066b6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80066b8:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 80066bc:	e7d7      	b.n	800666e <__d2b+0x2a>
 80066be:	6169      	str	r1, [r5, #20]
 80066c0:	e7e7      	b.n	8006692 <__d2b+0x4e>
 80066c2:	a801      	add	r0, sp, #4
 80066c4:	f7ff fd64 	bl	8006190 <__lo0bits>
 80066c8:	9b01      	ldr	r3, [sp, #4]
 80066ca:	2101      	movs	r1, #1
 80066cc:	616b      	str	r3, [r5, #20]
 80066ce:	3020      	adds	r0, #32
 80066d0:	e7e5      	b.n	800669e <__d2b+0x5a>
 80066d2:	f2a0 4032 	subw	r0, r0, #1074	; 0x432
 80066d6:	eb05 0381 	add.w	r3, r5, r1, lsl #2
 80066da:	6030      	str	r0, [r6, #0]
 80066dc:	6918      	ldr	r0, [r3, #16]
 80066de:	f7ff fd37 	bl	8006150 <__hi0bits>
 80066e2:	ebc0 1041 	rsb	r0, r0, r1, lsl #5
 80066e6:	e7e2      	b.n	80066ae <__d2b+0x6a>
 80066e8:	0800741a 	.word	0x0800741a
 80066ec:	0800742b 	.word	0x0800742b

080066f0 <__ssputs_r>:
 80066f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066f4:	461f      	mov	r7, r3
 80066f6:	688e      	ldr	r6, [r1, #8]
 80066f8:	4682      	mov	sl, r0
 80066fa:	42be      	cmp	r6, r7
 80066fc:	460c      	mov	r4, r1
 80066fe:	4690      	mov	r8, r2
 8006700:	680b      	ldr	r3, [r1, #0]
 8006702:	d82c      	bhi.n	800675e <__ssputs_r+0x6e>
 8006704:	898a      	ldrh	r2, [r1, #12]
 8006706:	f412 6f90 	tst.w	r2, #1152	; 0x480
 800670a:	d026      	beq.n	800675a <__ssputs_r+0x6a>
 800670c:	6965      	ldr	r5, [r4, #20]
 800670e:	6909      	ldr	r1, [r1, #16]
 8006710:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8006714:	eba3 0901 	sub.w	r9, r3, r1
 8006718:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800671c:	1c7b      	adds	r3, r7, #1
 800671e:	444b      	add	r3, r9
 8006720:	106d      	asrs	r5, r5, #1
 8006722:	429d      	cmp	r5, r3
 8006724:	bf38      	it	cc
 8006726:	461d      	movcc	r5, r3
 8006728:	0553      	lsls	r3, r2, #21
 800672a:	d527      	bpl.n	800677c <__ssputs_r+0x8c>
 800672c:	4629      	mov	r1, r5
 800672e:	f7ff fbdb 	bl	8005ee8 <_malloc_r>
 8006732:	4606      	mov	r6, r0
 8006734:	b360      	cbz	r0, 8006790 <__ssputs_r+0xa0>
 8006736:	464a      	mov	r2, r9
 8006738:	6921      	ldr	r1, [r4, #16]
 800673a:	f000 fa05 	bl	8006b48 <memcpy>
 800673e:	89a3      	ldrh	r3, [r4, #12]
 8006740:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8006744:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8006748:	81a3      	strh	r3, [r4, #12]
 800674a:	6126      	str	r6, [r4, #16]
 800674c:	444e      	add	r6, r9
 800674e:	6026      	str	r6, [r4, #0]
 8006750:	463e      	mov	r6, r7
 8006752:	6165      	str	r5, [r4, #20]
 8006754:	eba5 0509 	sub.w	r5, r5, r9
 8006758:	60a5      	str	r5, [r4, #8]
 800675a:	42be      	cmp	r6, r7
 800675c:	d900      	bls.n	8006760 <__ssputs_r+0x70>
 800675e:	463e      	mov	r6, r7
 8006760:	4632      	mov	r2, r6
 8006762:	4641      	mov	r1, r8
 8006764:	6820      	ldr	r0, [r4, #0]
 8006766:	f000 f9c5 	bl	8006af4 <memmove>
 800676a:	2000      	movs	r0, #0
 800676c:	68a3      	ldr	r3, [r4, #8]
 800676e:	1b9b      	subs	r3, r3, r6
 8006770:	60a3      	str	r3, [r4, #8]
 8006772:	6823      	ldr	r3, [r4, #0]
 8006774:	4433      	add	r3, r6
 8006776:	6023      	str	r3, [r4, #0]
 8006778:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800677c:	462a      	mov	r2, r5
 800677e:	f000 fa35 	bl	8006bec <_realloc_r>
 8006782:	4606      	mov	r6, r0
 8006784:	2800      	cmp	r0, #0
 8006786:	d1e0      	bne.n	800674a <__ssputs_r+0x5a>
 8006788:	4650      	mov	r0, sl
 800678a:	6921      	ldr	r1, [r4, #16]
 800678c:	f7ff fb3c 	bl	8005e08 <_free_r>
 8006790:	230c      	movs	r3, #12
 8006792:	f8ca 3000 	str.w	r3, [sl]
 8006796:	89a3      	ldrh	r3, [r4, #12]
 8006798:	f04f 30ff 	mov.w	r0, #4294967295
 800679c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80067a0:	81a3      	strh	r3, [r4, #12]
 80067a2:	e7e9      	b.n	8006778 <__ssputs_r+0x88>

080067a4 <_svfiprintf_r>:
 80067a4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80067a8:	4698      	mov	r8, r3
 80067aa:	898b      	ldrh	r3, [r1, #12]
 80067ac:	4607      	mov	r7, r0
 80067ae:	061b      	lsls	r3, r3, #24
 80067b0:	460d      	mov	r5, r1
 80067b2:	4614      	mov	r4, r2
 80067b4:	b09d      	sub	sp, #116	; 0x74
 80067b6:	d50e      	bpl.n	80067d6 <_svfiprintf_r+0x32>
 80067b8:	690b      	ldr	r3, [r1, #16]
 80067ba:	b963      	cbnz	r3, 80067d6 <_svfiprintf_r+0x32>
 80067bc:	2140      	movs	r1, #64	; 0x40
 80067be:	f7ff fb93 	bl	8005ee8 <_malloc_r>
 80067c2:	6028      	str	r0, [r5, #0]
 80067c4:	6128      	str	r0, [r5, #16]
 80067c6:	b920      	cbnz	r0, 80067d2 <_svfiprintf_r+0x2e>
 80067c8:	230c      	movs	r3, #12
 80067ca:	603b      	str	r3, [r7, #0]
 80067cc:	f04f 30ff 	mov.w	r0, #4294967295
 80067d0:	e0d0      	b.n	8006974 <_svfiprintf_r+0x1d0>
 80067d2:	2340      	movs	r3, #64	; 0x40
 80067d4:	616b      	str	r3, [r5, #20]
 80067d6:	2300      	movs	r3, #0
 80067d8:	9309      	str	r3, [sp, #36]	; 0x24
 80067da:	2320      	movs	r3, #32
 80067dc:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80067e0:	2330      	movs	r3, #48	; 0x30
 80067e2:	f04f 0901 	mov.w	r9, #1
 80067e6:	f8cd 800c 	str.w	r8, [sp, #12]
 80067ea:	f8df 81a0 	ldr.w	r8, [pc, #416]	; 800698c <_svfiprintf_r+0x1e8>
 80067ee:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80067f2:	4623      	mov	r3, r4
 80067f4:	469a      	mov	sl, r3
 80067f6:	f813 2b01 	ldrb.w	r2, [r3], #1
 80067fa:	b10a      	cbz	r2, 8006800 <_svfiprintf_r+0x5c>
 80067fc:	2a25      	cmp	r2, #37	; 0x25
 80067fe:	d1f9      	bne.n	80067f4 <_svfiprintf_r+0x50>
 8006800:	ebba 0b04 	subs.w	fp, sl, r4
 8006804:	d00b      	beq.n	800681e <_svfiprintf_r+0x7a>
 8006806:	465b      	mov	r3, fp
 8006808:	4622      	mov	r2, r4
 800680a:	4629      	mov	r1, r5
 800680c:	4638      	mov	r0, r7
 800680e:	f7ff ff6f 	bl	80066f0 <__ssputs_r>
 8006812:	3001      	adds	r0, #1
 8006814:	f000 80a9 	beq.w	800696a <_svfiprintf_r+0x1c6>
 8006818:	9a09      	ldr	r2, [sp, #36]	; 0x24
 800681a:	445a      	add	r2, fp
 800681c:	9209      	str	r2, [sp, #36]	; 0x24
 800681e:	f89a 3000 	ldrb.w	r3, [sl]
 8006822:	2b00      	cmp	r3, #0
 8006824:	f000 80a1 	beq.w	800696a <_svfiprintf_r+0x1c6>
 8006828:	2300      	movs	r3, #0
 800682a:	f04f 32ff 	mov.w	r2, #4294967295
 800682e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006832:	f10a 0a01 	add.w	sl, sl, #1
 8006836:	9304      	str	r3, [sp, #16]
 8006838:	9307      	str	r3, [sp, #28]
 800683a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 800683e:	931a      	str	r3, [sp, #104]	; 0x68
 8006840:	4654      	mov	r4, sl
 8006842:	2205      	movs	r2, #5
 8006844:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006848:	4850      	ldr	r0, [pc, #320]	; (800698c <_svfiprintf_r+0x1e8>)
 800684a:	f7fe fc61 	bl	8005110 <memchr>
 800684e:	9a04      	ldr	r2, [sp, #16]
 8006850:	b9d8      	cbnz	r0, 800688a <_svfiprintf_r+0xe6>
 8006852:	06d0      	lsls	r0, r2, #27
 8006854:	bf44      	itt	mi
 8006856:	2320      	movmi	r3, #32
 8006858:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 800685c:	0711      	lsls	r1, r2, #28
 800685e:	bf44      	itt	mi
 8006860:	232b      	movmi	r3, #43	; 0x2b
 8006862:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006866:	f89a 3000 	ldrb.w	r3, [sl]
 800686a:	2b2a      	cmp	r3, #42	; 0x2a
 800686c:	d015      	beq.n	800689a <_svfiprintf_r+0xf6>
 800686e:	4654      	mov	r4, sl
 8006870:	2000      	movs	r0, #0
 8006872:	f04f 0c0a 	mov.w	ip, #10
 8006876:	9a07      	ldr	r2, [sp, #28]
 8006878:	4621      	mov	r1, r4
 800687a:	f811 3b01 	ldrb.w	r3, [r1], #1
 800687e:	3b30      	subs	r3, #48	; 0x30
 8006880:	2b09      	cmp	r3, #9
 8006882:	d94d      	bls.n	8006920 <_svfiprintf_r+0x17c>
 8006884:	b1b0      	cbz	r0, 80068b4 <_svfiprintf_r+0x110>
 8006886:	9207      	str	r2, [sp, #28]
 8006888:	e014      	b.n	80068b4 <_svfiprintf_r+0x110>
 800688a:	eba0 0308 	sub.w	r3, r0, r8
 800688e:	fa09 f303 	lsl.w	r3, r9, r3
 8006892:	4313      	orrs	r3, r2
 8006894:	46a2      	mov	sl, r4
 8006896:	9304      	str	r3, [sp, #16]
 8006898:	e7d2      	b.n	8006840 <_svfiprintf_r+0x9c>
 800689a:	9b03      	ldr	r3, [sp, #12]
 800689c:	1d19      	adds	r1, r3, #4
 800689e:	681b      	ldr	r3, [r3, #0]
 80068a0:	9103      	str	r1, [sp, #12]
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	bfbb      	ittet	lt
 80068a6:	425b      	neglt	r3, r3
 80068a8:	f042 0202 	orrlt.w	r2, r2, #2
 80068ac:	9307      	strge	r3, [sp, #28]
 80068ae:	9307      	strlt	r3, [sp, #28]
 80068b0:	bfb8      	it	lt
 80068b2:	9204      	strlt	r2, [sp, #16]
 80068b4:	7823      	ldrb	r3, [r4, #0]
 80068b6:	2b2e      	cmp	r3, #46	; 0x2e
 80068b8:	d10c      	bne.n	80068d4 <_svfiprintf_r+0x130>
 80068ba:	7863      	ldrb	r3, [r4, #1]
 80068bc:	2b2a      	cmp	r3, #42	; 0x2a
 80068be:	d134      	bne.n	800692a <_svfiprintf_r+0x186>
 80068c0:	9b03      	ldr	r3, [sp, #12]
 80068c2:	3402      	adds	r4, #2
 80068c4:	1d1a      	adds	r2, r3, #4
 80068c6:	681b      	ldr	r3, [r3, #0]
 80068c8:	9203      	str	r2, [sp, #12]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	bfb8      	it	lt
 80068ce:	f04f 33ff 	movlt.w	r3, #4294967295
 80068d2:	9305      	str	r3, [sp, #20]
 80068d4:	f8df a0b8 	ldr.w	sl, [pc, #184]	; 8006990 <_svfiprintf_r+0x1ec>
 80068d8:	2203      	movs	r2, #3
 80068da:	4650      	mov	r0, sl
 80068dc:	7821      	ldrb	r1, [r4, #0]
 80068de:	f7fe fc17 	bl	8005110 <memchr>
 80068e2:	b138      	cbz	r0, 80068f4 <_svfiprintf_r+0x150>
 80068e4:	2240      	movs	r2, #64	; 0x40
 80068e6:	9b04      	ldr	r3, [sp, #16]
 80068e8:	eba0 000a 	sub.w	r0, r0, sl
 80068ec:	4082      	lsls	r2, r0
 80068ee:	4313      	orrs	r3, r2
 80068f0:	3401      	adds	r4, #1
 80068f2:	9304      	str	r3, [sp, #16]
 80068f4:	f814 1b01 	ldrb.w	r1, [r4], #1
 80068f8:	2206      	movs	r2, #6
 80068fa:	4826      	ldr	r0, [pc, #152]	; (8006994 <_svfiprintf_r+0x1f0>)
 80068fc:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006900:	f7fe fc06 	bl	8005110 <memchr>
 8006904:	2800      	cmp	r0, #0
 8006906:	d038      	beq.n	800697a <_svfiprintf_r+0x1d6>
 8006908:	4b23      	ldr	r3, [pc, #140]	; (8006998 <_svfiprintf_r+0x1f4>)
 800690a:	bb1b      	cbnz	r3, 8006954 <_svfiprintf_r+0x1b0>
 800690c:	9b03      	ldr	r3, [sp, #12]
 800690e:	3307      	adds	r3, #7
 8006910:	f023 0307 	bic.w	r3, r3, #7
 8006914:	3308      	adds	r3, #8
 8006916:	9303      	str	r3, [sp, #12]
 8006918:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800691a:	4433      	add	r3, r6
 800691c:	9309      	str	r3, [sp, #36]	; 0x24
 800691e:	e768      	b.n	80067f2 <_svfiprintf_r+0x4e>
 8006920:	460c      	mov	r4, r1
 8006922:	2001      	movs	r0, #1
 8006924:	fb0c 3202 	mla	r2, ip, r2, r3
 8006928:	e7a6      	b.n	8006878 <_svfiprintf_r+0xd4>
 800692a:	2300      	movs	r3, #0
 800692c:	f04f 0c0a 	mov.w	ip, #10
 8006930:	4619      	mov	r1, r3
 8006932:	3401      	adds	r4, #1
 8006934:	9305      	str	r3, [sp, #20]
 8006936:	4620      	mov	r0, r4
 8006938:	f810 2b01 	ldrb.w	r2, [r0], #1
 800693c:	3a30      	subs	r2, #48	; 0x30
 800693e:	2a09      	cmp	r2, #9
 8006940:	d903      	bls.n	800694a <_svfiprintf_r+0x1a6>
 8006942:	2b00      	cmp	r3, #0
 8006944:	d0c6      	beq.n	80068d4 <_svfiprintf_r+0x130>
 8006946:	9105      	str	r1, [sp, #20]
 8006948:	e7c4      	b.n	80068d4 <_svfiprintf_r+0x130>
 800694a:	4604      	mov	r4, r0
 800694c:	2301      	movs	r3, #1
 800694e:	fb0c 2101 	mla	r1, ip, r1, r2
 8006952:	e7f0      	b.n	8006936 <_svfiprintf_r+0x192>
 8006954:	ab03      	add	r3, sp, #12
 8006956:	9300      	str	r3, [sp, #0]
 8006958:	462a      	mov	r2, r5
 800695a:	4638      	mov	r0, r7
 800695c:	4b0f      	ldr	r3, [pc, #60]	; (800699c <_svfiprintf_r+0x1f8>)
 800695e:	a904      	add	r1, sp, #16
 8006960:	f7fd fe82 	bl	8004668 <_printf_float>
 8006964:	1c42      	adds	r2, r0, #1
 8006966:	4606      	mov	r6, r0
 8006968:	d1d6      	bne.n	8006918 <_svfiprintf_r+0x174>
 800696a:	89ab      	ldrh	r3, [r5, #12]
 800696c:	065b      	lsls	r3, r3, #25
 800696e:	f53f af2d 	bmi.w	80067cc <_svfiprintf_r+0x28>
 8006972:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006974:	b01d      	add	sp, #116	; 0x74
 8006976:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800697a:	ab03      	add	r3, sp, #12
 800697c:	9300      	str	r3, [sp, #0]
 800697e:	462a      	mov	r2, r5
 8006980:	4638      	mov	r0, r7
 8006982:	4b06      	ldr	r3, [pc, #24]	; (800699c <_svfiprintf_r+0x1f8>)
 8006984:	a904      	add	r1, sp, #16
 8006986:	f7fe f90f 	bl	8004ba8 <_printf_i>
 800698a:	e7eb      	b.n	8006964 <_svfiprintf_r+0x1c0>
 800698c:	08007584 	.word	0x08007584
 8006990:	0800758a 	.word	0x0800758a
 8006994:	0800758e 	.word	0x0800758e
 8006998:	08004669 	.word	0x08004669
 800699c:	080066f1 	.word	0x080066f1

080069a0 <__sflush_r>:
 80069a0:	898a      	ldrh	r2, [r1, #12]
 80069a2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80069a4:	4605      	mov	r5, r0
 80069a6:	0710      	lsls	r0, r2, #28
 80069a8:	460c      	mov	r4, r1
 80069aa:	d457      	bmi.n	8006a5c <__sflush_r+0xbc>
 80069ac:	684b      	ldr	r3, [r1, #4]
 80069ae:	2b00      	cmp	r3, #0
 80069b0:	dc04      	bgt.n	80069bc <__sflush_r+0x1c>
 80069b2:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 80069b4:	2b00      	cmp	r3, #0
 80069b6:	dc01      	bgt.n	80069bc <__sflush_r+0x1c>
 80069b8:	2000      	movs	r0, #0
 80069ba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80069bc:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069be:	2e00      	cmp	r6, #0
 80069c0:	d0fa      	beq.n	80069b8 <__sflush_r+0x18>
 80069c2:	2300      	movs	r3, #0
 80069c4:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 80069c8:	682f      	ldr	r7, [r5, #0]
 80069ca:	6a21      	ldr	r1, [r4, #32]
 80069cc:	602b      	str	r3, [r5, #0]
 80069ce:	d032      	beq.n	8006a36 <__sflush_r+0x96>
 80069d0:	6d60      	ldr	r0, [r4, #84]	; 0x54
 80069d2:	89a3      	ldrh	r3, [r4, #12]
 80069d4:	075a      	lsls	r2, r3, #29
 80069d6:	d505      	bpl.n	80069e4 <__sflush_r+0x44>
 80069d8:	6863      	ldr	r3, [r4, #4]
 80069da:	1ac0      	subs	r0, r0, r3
 80069dc:	6b63      	ldr	r3, [r4, #52]	; 0x34
 80069de:	b10b      	cbz	r3, 80069e4 <__sflush_r+0x44>
 80069e0:	6c23      	ldr	r3, [r4, #64]	; 0x40
 80069e2:	1ac0      	subs	r0, r0, r3
 80069e4:	2300      	movs	r3, #0
 80069e6:	4602      	mov	r2, r0
 80069e8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 80069ea:	4628      	mov	r0, r5
 80069ec:	6a21      	ldr	r1, [r4, #32]
 80069ee:	47b0      	blx	r6
 80069f0:	1c43      	adds	r3, r0, #1
 80069f2:	89a3      	ldrh	r3, [r4, #12]
 80069f4:	d106      	bne.n	8006a04 <__sflush_r+0x64>
 80069f6:	6829      	ldr	r1, [r5, #0]
 80069f8:	291d      	cmp	r1, #29
 80069fa:	d82b      	bhi.n	8006a54 <__sflush_r+0xb4>
 80069fc:	4a28      	ldr	r2, [pc, #160]	; (8006aa0 <__sflush_r+0x100>)
 80069fe:	410a      	asrs	r2, r1
 8006a00:	07d6      	lsls	r6, r2, #31
 8006a02:	d427      	bmi.n	8006a54 <__sflush_r+0xb4>
 8006a04:	2200      	movs	r2, #0
 8006a06:	6062      	str	r2, [r4, #4]
 8006a08:	6922      	ldr	r2, [r4, #16]
 8006a0a:	04d9      	lsls	r1, r3, #19
 8006a0c:	6022      	str	r2, [r4, #0]
 8006a0e:	d504      	bpl.n	8006a1a <__sflush_r+0x7a>
 8006a10:	1c42      	adds	r2, r0, #1
 8006a12:	d101      	bne.n	8006a18 <__sflush_r+0x78>
 8006a14:	682b      	ldr	r3, [r5, #0]
 8006a16:	b903      	cbnz	r3, 8006a1a <__sflush_r+0x7a>
 8006a18:	6560      	str	r0, [r4, #84]	; 0x54
 8006a1a:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006a1c:	602f      	str	r7, [r5, #0]
 8006a1e:	2900      	cmp	r1, #0
 8006a20:	d0ca      	beq.n	80069b8 <__sflush_r+0x18>
 8006a22:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006a26:	4299      	cmp	r1, r3
 8006a28:	d002      	beq.n	8006a30 <__sflush_r+0x90>
 8006a2a:	4628      	mov	r0, r5
 8006a2c:	f7ff f9ec 	bl	8005e08 <_free_r>
 8006a30:	2000      	movs	r0, #0
 8006a32:	6360      	str	r0, [r4, #52]	; 0x34
 8006a34:	e7c1      	b.n	80069ba <__sflush_r+0x1a>
 8006a36:	2301      	movs	r3, #1
 8006a38:	4628      	mov	r0, r5
 8006a3a:	47b0      	blx	r6
 8006a3c:	1c41      	adds	r1, r0, #1
 8006a3e:	d1c8      	bne.n	80069d2 <__sflush_r+0x32>
 8006a40:	682b      	ldr	r3, [r5, #0]
 8006a42:	2b00      	cmp	r3, #0
 8006a44:	d0c5      	beq.n	80069d2 <__sflush_r+0x32>
 8006a46:	2b1d      	cmp	r3, #29
 8006a48:	d001      	beq.n	8006a4e <__sflush_r+0xae>
 8006a4a:	2b16      	cmp	r3, #22
 8006a4c:	d101      	bne.n	8006a52 <__sflush_r+0xb2>
 8006a4e:	602f      	str	r7, [r5, #0]
 8006a50:	e7b2      	b.n	80069b8 <__sflush_r+0x18>
 8006a52:	89a3      	ldrh	r3, [r4, #12]
 8006a54:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a58:	81a3      	strh	r3, [r4, #12]
 8006a5a:	e7ae      	b.n	80069ba <__sflush_r+0x1a>
 8006a5c:	690f      	ldr	r7, [r1, #16]
 8006a5e:	2f00      	cmp	r7, #0
 8006a60:	d0aa      	beq.n	80069b8 <__sflush_r+0x18>
 8006a62:	0793      	lsls	r3, r2, #30
 8006a64:	bf18      	it	ne
 8006a66:	2300      	movne	r3, #0
 8006a68:	680e      	ldr	r6, [r1, #0]
 8006a6a:	bf08      	it	eq
 8006a6c:	694b      	ldreq	r3, [r1, #20]
 8006a6e:	1bf6      	subs	r6, r6, r7
 8006a70:	600f      	str	r7, [r1, #0]
 8006a72:	608b      	str	r3, [r1, #8]
 8006a74:	2e00      	cmp	r6, #0
 8006a76:	dd9f      	ble.n	80069b8 <__sflush_r+0x18>
 8006a78:	4633      	mov	r3, r6
 8006a7a:	463a      	mov	r2, r7
 8006a7c:	4628      	mov	r0, r5
 8006a7e:	6a21      	ldr	r1, [r4, #32]
 8006a80:	f8d4 c028 	ldr.w	ip, [r4, #40]	; 0x28
 8006a84:	47e0      	blx	ip
 8006a86:	2800      	cmp	r0, #0
 8006a88:	dc06      	bgt.n	8006a98 <__sflush_r+0xf8>
 8006a8a:	89a3      	ldrh	r3, [r4, #12]
 8006a8c:	f04f 30ff 	mov.w	r0, #4294967295
 8006a90:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8006a94:	81a3      	strh	r3, [r4, #12]
 8006a96:	e790      	b.n	80069ba <__sflush_r+0x1a>
 8006a98:	4407      	add	r7, r0
 8006a9a:	1a36      	subs	r6, r6, r0
 8006a9c:	e7ea      	b.n	8006a74 <__sflush_r+0xd4>
 8006a9e:	bf00      	nop
 8006aa0:	dfbffffe 	.word	0xdfbffffe

08006aa4 <_fflush_r>:
 8006aa4:	b538      	push	{r3, r4, r5, lr}
 8006aa6:	690b      	ldr	r3, [r1, #16]
 8006aa8:	4605      	mov	r5, r0
 8006aaa:	460c      	mov	r4, r1
 8006aac:	b913      	cbnz	r3, 8006ab4 <_fflush_r+0x10>
 8006aae:	2500      	movs	r5, #0
 8006ab0:	4628      	mov	r0, r5
 8006ab2:	bd38      	pop	{r3, r4, r5, pc}
 8006ab4:	b118      	cbz	r0, 8006abe <_fflush_r+0x1a>
 8006ab6:	6a03      	ldr	r3, [r0, #32]
 8006ab8:	b90b      	cbnz	r3, 8006abe <_fflush_r+0x1a>
 8006aba:	f7fe fa11 	bl	8004ee0 <__sinit>
 8006abe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006ac2:	2b00      	cmp	r3, #0
 8006ac4:	d0f3      	beq.n	8006aae <_fflush_r+0xa>
 8006ac6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8006ac8:	07d0      	lsls	r0, r2, #31
 8006aca:	d404      	bmi.n	8006ad6 <_fflush_r+0x32>
 8006acc:	0599      	lsls	r1, r3, #22
 8006ace:	d402      	bmi.n	8006ad6 <_fflush_r+0x32>
 8006ad0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006ad2:	f7fe fb1b 	bl	800510c <__retarget_lock_acquire_recursive>
 8006ad6:	4628      	mov	r0, r5
 8006ad8:	4621      	mov	r1, r4
 8006ada:	f7ff ff61 	bl	80069a0 <__sflush_r>
 8006ade:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8006ae0:	4605      	mov	r5, r0
 8006ae2:	07da      	lsls	r2, r3, #31
 8006ae4:	d4e4      	bmi.n	8006ab0 <_fflush_r+0xc>
 8006ae6:	89a3      	ldrh	r3, [r4, #12]
 8006ae8:	059b      	lsls	r3, r3, #22
 8006aea:	d4e1      	bmi.n	8006ab0 <_fflush_r+0xc>
 8006aec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8006aee:	f7fe fb0e 	bl	800510e <__retarget_lock_release_recursive>
 8006af2:	e7dd      	b.n	8006ab0 <_fflush_r+0xc>

08006af4 <memmove>:
 8006af4:	4288      	cmp	r0, r1
 8006af6:	b510      	push	{r4, lr}
 8006af8:	eb01 0402 	add.w	r4, r1, r2
 8006afc:	d902      	bls.n	8006b04 <memmove+0x10>
 8006afe:	4284      	cmp	r4, r0
 8006b00:	4623      	mov	r3, r4
 8006b02:	d807      	bhi.n	8006b14 <memmove+0x20>
 8006b04:	1e43      	subs	r3, r0, #1
 8006b06:	42a1      	cmp	r1, r4
 8006b08:	d008      	beq.n	8006b1c <memmove+0x28>
 8006b0a:	f811 2b01 	ldrb.w	r2, [r1], #1
 8006b0e:	f803 2f01 	strb.w	r2, [r3, #1]!
 8006b12:	e7f8      	b.n	8006b06 <memmove+0x12>
 8006b14:	4601      	mov	r1, r0
 8006b16:	4402      	add	r2, r0
 8006b18:	428a      	cmp	r2, r1
 8006b1a:	d100      	bne.n	8006b1e <memmove+0x2a>
 8006b1c:	bd10      	pop	{r4, pc}
 8006b1e:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8006b22:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8006b26:	e7f7      	b.n	8006b18 <memmove+0x24>

08006b28 <_sbrk_r>:
 8006b28:	b538      	push	{r3, r4, r5, lr}
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	4d05      	ldr	r5, [pc, #20]	; (8006b44 <_sbrk_r+0x1c>)
 8006b2e:	4604      	mov	r4, r0
 8006b30:	4608      	mov	r0, r1
 8006b32:	602b      	str	r3, [r5, #0]
 8006b34:	f7fb fb0a 	bl	800214c <_sbrk>
 8006b38:	1c43      	adds	r3, r0, #1
 8006b3a:	d102      	bne.n	8006b42 <_sbrk_r+0x1a>
 8006b3c:	682b      	ldr	r3, [r5, #0]
 8006b3e:	b103      	cbz	r3, 8006b42 <_sbrk_r+0x1a>
 8006b40:	6023      	str	r3, [r4, #0]
 8006b42:	bd38      	pop	{r3, r4, r5, pc}
 8006b44:	20000434 	.word	0x20000434

08006b48 <memcpy>:
 8006b48:	440a      	add	r2, r1
 8006b4a:	4291      	cmp	r1, r2
 8006b4c:	f100 33ff 	add.w	r3, r0, #4294967295
 8006b50:	d100      	bne.n	8006b54 <memcpy+0xc>
 8006b52:	4770      	bx	lr
 8006b54:	b510      	push	{r4, lr}
 8006b56:	f811 4b01 	ldrb.w	r4, [r1], #1
 8006b5a:	4291      	cmp	r1, r2
 8006b5c:	f803 4f01 	strb.w	r4, [r3, #1]!
 8006b60:	d1f9      	bne.n	8006b56 <memcpy+0xe>
 8006b62:	bd10      	pop	{r4, pc}

08006b64 <__assert_func>:
 8006b64:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8006b66:	4614      	mov	r4, r2
 8006b68:	461a      	mov	r2, r3
 8006b6a:	4b09      	ldr	r3, [pc, #36]	; (8006b90 <__assert_func+0x2c>)
 8006b6c:	4605      	mov	r5, r0
 8006b6e:	681b      	ldr	r3, [r3, #0]
 8006b70:	68d8      	ldr	r0, [r3, #12]
 8006b72:	b14c      	cbz	r4, 8006b88 <__assert_func+0x24>
 8006b74:	4b07      	ldr	r3, [pc, #28]	; (8006b94 <__assert_func+0x30>)
 8006b76:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8006b7a:	9100      	str	r1, [sp, #0]
 8006b7c:	462b      	mov	r3, r5
 8006b7e:	4906      	ldr	r1, [pc, #24]	; (8006b98 <__assert_func+0x34>)
 8006b80:	f000 f870 	bl	8006c64 <fiprintf>
 8006b84:	f000 f880 	bl	8006c88 <abort>
 8006b88:	4b04      	ldr	r3, [pc, #16]	; (8006b9c <__assert_func+0x38>)
 8006b8a:	461c      	mov	r4, r3
 8006b8c:	e7f3      	b.n	8006b76 <__assert_func+0x12>
 8006b8e:	bf00      	nop
 8006b90:	20000080 	.word	0x20000080
 8006b94:	0800759f 	.word	0x0800759f
 8006b98:	080075ac 	.word	0x080075ac
 8006b9c:	080075da 	.word	0x080075da

08006ba0 <_calloc_r>:
 8006ba0:	b570      	push	{r4, r5, r6, lr}
 8006ba2:	fba1 5402 	umull	r5, r4, r1, r2
 8006ba6:	b934      	cbnz	r4, 8006bb6 <_calloc_r+0x16>
 8006ba8:	4629      	mov	r1, r5
 8006baa:	f7ff f99d 	bl	8005ee8 <_malloc_r>
 8006bae:	4606      	mov	r6, r0
 8006bb0:	b928      	cbnz	r0, 8006bbe <_calloc_r+0x1e>
 8006bb2:	4630      	mov	r0, r6
 8006bb4:	bd70      	pop	{r4, r5, r6, pc}
 8006bb6:	220c      	movs	r2, #12
 8006bb8:	2600      	movs	r6, #0
 8006bba:	6002      	str	r2, [r0, #0]
 8006bbc:	e7f9      	b.n	8006bb2 <_calloc_r+0x12>
 8006bbe:	462a      	mov	r2, r5
 8006bc0:	4621      	mov	r1, r4
 8006bc2:	f7fe fa26 	bl	8005012 <memset>
 8006bc6:	e7f4      	b.n	8006bb2 <_calloc_r+0x12>

08006bc8 <__ascii_mbtowc>:
 8006bc8:	b082      	sub	sp, #8
 8006bca:	b901      	cbnz	r1, 8006bce <__ascii_mbtowc+0x6>
 8006bcc:	a901      	add	r1, sp, #4
 8006bce:	b142      	cbz	r2, 8006be2 <__ascii_mbtowc+0x1a>
 8006bd0:	b14b      	cbz	r3, 8006be6 <__ascii_mbtowc+0x1e>
 8006bd2:	7813      	ldrb	r3, [r2, #0]
 8006bd4:	600b      	str	r3, [r1, #0]
 8006bd6:	7812      	ldrb	r2, [r2, #0]
 8006bd8:	1e10      	subs	r0, r2, #0
 8006bda:	bf18      	it	ne
 8006bdc:	2001      	movne	r0, #1
 8006bde:	b002      	add	sp, #8
 8006be0:	4770      	bx	lr
 8006be2:	4610      	mov	r0, r2
 8006be4:	e7fb      	b.n	8006bde <__ascii_mbtowc+0x16>
 8006be6:	f06f 0001 	mvn.w	r0, #1
 8006bea:	e7f8      	b.n	8006bde <__ascii_mbtowc+0x16>

08006bec <_realloc_r>:
 8006bec:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006bf0:	4680      	mov	r8, r0
 8006bf2:	4614      	mov	r4, r2
 8006bf4:	460e      	mov	r6, r1
 8006bf6:	b921      	cbnz	r1, 8006c02 <_realloc_r+0x16>
 8006bf8:	4611      	mov	r1, r2
 8006bfa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006bfe:	f7ff b973 	b.w	8005ee8 <_malloc_r>
 8006c02:	b92a      	cbnz	r2, 8006c10 <_realloc_r+0x24>
 8006c04:	f7ff f900 	bl	8005e08 <_free_r>
 8006c08:	4625      	mov	r5, r4
 8006c0a:	4628      	mov	r0, r5
 8006c0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8006c10:	f000 f841 	bl	8006c96 <_malloc_usable_size_r>
 8006c14:	4284      	cmp	r4, r0
 8006c16:	4607      	mov	r7, r0
 8006c18:	d802      	bhi.n	8006c20 <_realloc_r+0x34>
 8006c1a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8006c1e:	d812      	bhi.n	8006c46 <_realloc_r+0x5a>
 8006c20:	4621      	mov	r1, r4
 8006c22:	4640      	mov	r0, r8
 8006c24:	f7ff f960 	bl	8005ee8 <_malloc_r>
 8006c28:	4605      	mov	r5, r0
 8006c2a:	2800      	cmp	r0, #0
 8006c2c:	d0ed      	beq.n	8006c0a <_realloc_r+0x1e>
 8006c2e:	42bc      	cmp	r4, r7
 8006c30:	4622      	mov	r2, r4
 8006c32:	4631      	mov	r1, r6
 8006c34:	bf28      	it	cs
 8006c36:	463a      	movcs	r2, r7
 8006c38:	f7ff ff86 	bl	8006b48 <memcpy>
 8006c3c:	4631      	mov	r1, r6
 8006c3e:	4640      	mov	r0, r8
 8006c40:	f7ff f8e2 	bl	8005e08 <_free_r>
 8006c44:	e7e1      	b.n	8006c0a <_realloc_r+0x1e>
 8006c46:	4635      	mov	r5, r6
 8006c48:	e7df      	b.n	8006c0a <_realloc_r+0x1e>

08006c4a <__ascii_wctomb>:
 8006c4a:	4603      	mov	r3, r0
 8006c4c:	4608      	mov	r0, r1
 8006c4e:	b141      	cbz	r1, 8006c62 <__ascii_wctomb+0x18>
 8006c50:	2aff      	cmp	r2, #255	; 0xff
 8006c52:	d904      	bls.n	8006c5e <__ascii_wctomb+0x14>
 8006c54:	228a      	movs	r2, #138	; 0x8a
 8006c56:	f04f 30ff 	mov.w	r0, #4294967295
 8006c5a:	601a      	str	r2, [r3, #0]
 8006c5c:	4770      	bx	lr
 8006c5e:	2001      	movs	r0, #1
 8006c60:	700a      	strb	r2, [r1, #0]
 8006c62:	4770      	bx	lr

08006c64 <fiprintf>:
 8006c64:	b40e      	push	{r1, r2, r3}
 8006c66:	b503      	push	{r0, r1, lr}
 8006c68:	4601      	mov	r1, r0
 8006c6a:	ab03      	add	r3, sp, #12
 8006c6c:	4805      	ldr	r0, [pc, #20]	; (8006c84 <fiprintf+0x20>)
 8006c6e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006c72:	6800      	ldr	r0, [r0, #0]
 8006c74:	9301      	str	r3, [sp, #4]
 8006c76:	f000 f83d 	bl	8006cf4 <_vfiprintf_r>
 8006c7a:	b002      	add	sp, #8
 8006c7c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006c80:	b003      	add	sp, #12
 8006c82:	4770      	bx	lr
 8006c84:	20000080 	.word	0x20000080

08006c88 <abort>:
 8006c88:	2006      	movs	r0, #6
 8006c8a:	b508      	push	{r3, lr}
 8006c8c:	f000 fa0a 	bl	80070a4 <raise>
 8006c90:	2001      	movs	r0, #1
 8006c92:	f7fb f9e7 	bl	8002064 <_exit>

08006c96 <_malloc_usable_size_r>:
 8006c96:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8006c9a:	1f18      	subs	r0, r3, #4
 8006c9c:	2b00      	cmp	r3, #0
 8006c9e:	bfbc      	itt	lt
 8006ca0:	580b      	ldrlt	r3, [r1, r0]
 8006ca2:	18c0      	addlt	r0, r0, r3
 8006ca4:	4770      	bx	lr

08006ca6 <__sfputc_r>:
 8006ca6:	6893      	ldr	r3, [r2, #8]
 8006ca8:	b410      	push	{r4}
 8006caa:	3b01      	subs	r3, #1
 8006cac:	2b00      	cmp	r3, #0
 8006cae:	6093      	str	r3, [r2, #8]
 8006cb0:	da07      	bge.n	8006cc2 <__sfputc_r+0x1c>
 8006cb2:	6994      	ldr	r4, [r2, #24]
 8006cb4:	42a3      	cmp	r3, r4
 8006cb6:	db01      	blt.n	8006cbc <__sfputc_r+0x16>
 8006cb8:	290a      	cmp	r1, #10
 8006cba:	d102      	bne.n	8006cc2 <__sfputc_r+0x1c>
 8006cbc:	bc10      	pop	{r4}
 8006cbe:	f000 b933 	b.w	8006f28 <__swbuf_r>
 8006cc2:	6813      	ldr	r3, [r2, #0]
 8006cc4:	1c58      	adds	r0, r3, #1
 8006cc6:	6010      	str	r0, [r2, #0]
 8006cc8:	7019      	strb	r1, [r3, #0]
 8006cca:	4608      	mov	r0, r1
 8006ccc:	bc10      	pop	{r4}
 8006cce:	4770      	bx	lr

08006cd0 <__sfputs_r>:
 8006cd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006cd2:	4606      	mov	r6, r0
 8006cd4:	460f      	mov	r7, r1
 8006cd6:	4614      	mov	r4, r2
 8006cd8:	18d5      	adds	r5, r2, r3
 8006cda:	42ac      	cmp	r4, r5
 8006cdc:	d101      	bne.n	8006ce2 <__sfputs_r+0x12>
 8006cde:	2000      	movs	r0, #0
 8006ce0:	e007      	b.n	8006cf2 <__sfputs_r+0x22>
 8006ce2:	463a      	mov	r2, r7
 8006ce4:	4630      	mov	r0, r6
 8006ce6:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006cea:	f7ff ffdc 	bl	8006ca6 <__sfputc_r>
 8006cee:	1c43      	adds	r3, r0, #1
 8006cf0:	d1f3      	bne.n	8006cda <__sfputs_r+0xa>
 8006cf2:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08006cf4 <_vfiprintf_r>:
 8006cf4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006cf8:	460d      	mov	r5, r1
 8006cfa:	4614      	mov	r4, r2
 8006cfc:	4698      	mov	r8, r3
 8006cfe:	4606      	mov	r6, r0
 8006d00:	b09d      	sub	sp, #116	; 0x74
 8006d02:	b118      	cbz	r0, 8006d0c <_vfiprintf_r+0x18>
 8006d04:	6a03      	ldr	r3, [r0, #32]
 8006d06:	b90b      	cbnz	r3, 8006d0c <_vfiprintf_r+0x18>
 8006d08:	f7fe f8ea 	bl	8004ee0 <__sinit>
 8006d0c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d0e:	07d9      	lsls	r1, r3, #31
 8006d10:	d405      	bmi.n	8006d1e <_vfiprintf_r+0x2a>
 8006d12:	89ab      	ldrh	r3, [r5, #12]
 8006d14:	059a      	lsls	r2, r3, #22
 8006d16:	d402      	bmi.n	8006d1e <_vfiprintf_r+0x2a>
 8006d18:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d1a:	f7fe f9f7 	bl	800510c <__retarget_lock_acquire_recursive>
 8006d1e:	89ab      	ldrh	r3, [r5, #12]
 8006d20:	071b      	lsls	r3, r3, #28
 8006d22:	d501      	bpl.n	8006d28 <_vfiprintf_r+0x34>
 8006d24:	692b      	ldr	r3, [r5, #16]
 8006d26:	b99b      	cbnz	r3, 8006d50 <_vfiprintf_r+0x5c>
 8006d28:	4629      	mov	r1, r5
 8006d2a:	4630      	mov	r0, r6
 8006d2c:	f000 f93a 	bl	8006fa4 <__swsetup_r>
 8006d30:	b170      	cbz	r0, 8006d50 <_vfiprintf_r+0x5c>
 8006d32:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006d34:	07dc      	lsls	r4, r3, #31
 8006d36:	d504      	bpl.n	8006d42 <_vfiprintf_r+0x4e>
 8006d38:	f04f 30ff 	mov.w	r0, #4294967295
 8006d3c:	b01d      	add	sp, #116	; 0x74
 8006d3e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006d42:	89ab      	ldrh	r3, [r5, #12]
 8006d44:	0598      	lsls	r0, r3, #22
 8006d46:	d4f7      	bmi.n	8006d38 <_vfiprintf_r+0x44>
 8006d48:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006d4a:	f7fe f9e0 	bl	800510e <__retarget_lock_release_recursive>
 8006d4e:	e7f3      	b.n	8006d38 <_vfiprintf_r+0x44>
 8006d50:	2300      	movs	r3, #0
 8006d52:	9309      	str	r3, [sp, #36]	; 0x24
 8006d54:	2320      	movs	r3, #32
 8006d56:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8006d5a:	2330      	movs	r3, #48	; 0x30
 8006d5c:	f04f 0901 	mov.w	r9, #1
 8006d60:	f8cd 800c 	str.w	r8, [sp, #12]
 8006d64:	f8df 81ac 	ldr.w	r8, [pc, #428]	; 8006f14 <_vfiprintf_r+0x220>
 8006d68:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 8006d6c:	4623      	mov	r3, r4
 8006d6e:	469a      	mov	sl, r3
 8006d70:	f813 2b01 	ldrb.w	r2, [r3], #1
 8006d74:	b10a      	cbz	r2, 8006d7a <_vfiprintf_r+0x86>
 8006d76:	2a25      	cmp	r2, #37	; 0x25
 8006d78:	d1f9      	bne.n	8006d6e <_vfiprintf_r+0x7a>
 8006d7a:	ebba 0b04 	subs.w	fp, sl, r4
 8006d7e:	d00b      	beq.n	8006d98 <_vfiprintf_r+0xa4>
 8006d80:	465b      	mov	r3, fp
 8006d82:	4622      	mov	r2, r4
 8006d84:	4629      	mov	r1, r5
 8006d86:	4630      	mov	r0, r6
 8006d88:	f7ff ffa2 	bl	8006cd0 <__sfputs_r>
 8006d8c:	3001      	adds	r0, #1
 8006d8e:	f000 80a9 	beq.w	8006ee4 <_vfiprintf_r+0x1f0>
 8006d92:	9a09      	ldr	r2, [sp, #36]	; 0x24
 8006d94:	445a      	add	r2, fp
 8006d96:	9209      	str	r2, [sp, #36]	; 0x24
 8006d98:	f89a 3000 	ldrb.w	r3, [sl]
 8006d9c:	2b00      	cmp	r3, #0
 8006d9e:	f000 80a1 	beq.w	8006ee4 <_vfiprintf_r+0x1f0>
 8006da2:	2300      	movs	r3, #0
 8006da4:	f04f 32ff 	mov.w	r2, #4294967295
 8006da8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8006dac:	f10a 0a01 	add.w	sl, sl, #1
 8006db0:	9304      	str	r3, [sp, #16]
 8006db2:	9307      	str	r3, [sp, #28]
 8006db4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8006db8:	931a      	str	r3, [sp, #104]	; 0x68
 8006dba:	4654      	mov	r4, sl
 8006dbc:	2205      	movs	r2, #5
 8006dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006dc2:	4854      	ldr	r0, [pc, #336]	; (8006f14 <_vfiprintf_r+0x220>)
 8006dc4:	f7fe f9a4 	bl	8005110 <memchr>
 8006dc8:	9a04      	ldr	r2, [sp, #16]
 8006dca:	b9d8      	cbnz	r0, 8006e04 <_vfiprintf_r+0x110>
 8006dcc:	06d1      	lsls	r1, r2, #27
 8006dce:	bf44      	itt	mi
 8006dd0:	2320      	movmi	r3, #32
 8006dd2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006dd6:	0713      	lsls	r3, r2, #28
 8006dd8:	bf44      	itt	mi
 8006dda:	232b      	movmi	r3, #43	; 0x2b
 8006ddc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8006de0:	f89a 3000 	ldrb.w	r3, [sl]
 8006de4:	2b2a      	cmp	r3, #42	; 0x2a
 8006de6:	d015      	beq.n	8006e14 <_vfiprintf_r+0x120>
 8006de8:	4654      	mov	r4, sl
 8006dea:	2000      	movs	r0, #0
 8006dec:	f04f 0c0a 	mov.w	ip, #10
 8006df0:	9a07      	ldr	r2, [sp, #28]
 8006df2:	4621      	mov	r1, r4
 8006df4:	f811 3b01 	ldrb.w	r3, [r1], #1
 8006df8:	3b30      	subs	r3, #48	; 0x30
 8006dfa:	2b09      	cmp	r3, #9
 8006dfc:	d94d      	bls.n	8006e9a <_vfiprintf_r+0x1a6>
 8006dfe:	b1b0      	cbz	r0, 8006e2e <_vfiprintf_r+0x13a>
 8006e00:	9207      	str	r2, [sp, #28]
 8006e02:	e014      	b.n	8006e2e <_vfiprintf_r+0x13a>
 8006e04:	eba0 0308 	sub.w	r3, r0, r8
 8006e08:	fa09 f303 	lsl.w	r3, r9, r3
 8006e0c:	4313      	orrs	r3, r2
 8006e0e:	46a2      	mov	sl, r4
 8006e10:	9304      	str	r3, [sp, #16]
 8006e12:	e7d2      	b.n	8006dba <_vfiprintf_r+0xc6>
 8006e14:	9b03      	ldr	r3, [sp, #12]
 8006e16:	1d19      	adds	r1, r3, #4
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	9103      	str	r1, [sp, #12]
 8006e1c:	2b00      	cmp	r3, #0
 8006e1e:	bfbb      	ittet	lt
 8006e20:	425b      	neglt	r3, r3
 8006e22:	f042 0202 	orrlt.w	r2, r2, #2
 8006e26:	9307      	strge	r3, [sp, #28]
 8006e28:	9307      	strlt	r3, [sp, #28]
 8006e2a:	bfb8      	it	lt
 8006e2c:	9204      	strlt	r2, [sp, #16]
 8006e2e:	7823      	ldrb	r3, [r4, #0]
 8006e30:	2b2e      	cmp	r3, #46	; 0x2e
 8006e32:	d10c      	bne.n	8006e4e <_vfiprintf_r+0x15a>
 8006e34:	7863      	ldrb	r3, [r4, #1]
 8006e36:	2b2a      	cmp	r3, #42	; 0x2a
 8006e38:	d134      	bne.n	8006ea4 <_vfiprintf_r+0x1b0>
 8006e3a:	9b03      	ldr	r3, [sp, #12]
 8006e3c:	3402      	adds	r4, #2
 8006e3e:	1d1a      	adds	r2, r3, #4
 8006e40:	681b      	ldr	r3, [r3, #0]
 8006e42:	9203      	str	r2, [sp, #12]
 8006e44:	2b00      	cmp	r3, #0
 8006e46:	bfb8      	it	lt
 8006e48:	f04f 33ff 	movlt.w	r3, #4294967295
 8006e4c:	9305      	str	r3, [sp, #20]
 8006e4e:	f8df a0c8 	ldr.w	sl, [pc, #200]	; 8006f18 <_vfiprintf_r+0x224>
 8006e52:	2203      	movs	r2, #3
 8006e54:	4650      	mov	r0, sl
 8006e56:	7821      	ldrb	r1, [r4, #0]
 8006e58:	f7fe f95a 	bl	8005110 <memchr>
 8006e5c:	b138      	cbz	r0, 8006e6e <_vfiprintf_r+0x17a>
 8006e5e:	2240      	movs	r2, #64	; 0x40
 8006e60:	9b04      	ldr	r3, [sp, #16]
 8006e62:	eba0 000a 	sub.w	r0, r0, sl
 8006e66:	4082      	lsls	r2, r0
 8006e68:	4313      	orrs	r3, r2
 8006e6a:	3401      	adds	r4, #1
 8006e6c:	9304      	str	r3, [sp, #16]
 8006e6e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8006e72:	2206      	movs	r2, #6
 8006e74:	4829      	ldr	r0, [pc, #164]	; (8006f1c <_vfiprintf_r+0x228>)
 8006e76:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 8006e7a:	f7fe f949 	bl	8005110 <memchr>
 8006e7e:	2800      	cmp	r0, #0
 8006e80:	d03f      	beq.n	8006f02 <_vfiprintf_r+0x20e>
 8006e82:	4b27      	ldr	r3, [pc, #156]	; (8006f20 <_vfiprintf_r+0x22c>)
 8006e84:	bb1b      	cbnz	r3, 8006ece <_vfiprintf_r+0x1da>
 8006e86:	9b03      	ldr	r3, [sp, #12]
 8006e88:	3307      	adds	r3, #7
 8006e8a:	f023 0307 	bic.w	r3, r3, #7
 8006e8e:	3308      	adds	r3, #8
 8006e90:	9303      	str	r3, [sp, #12]
 8006e92:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8006e94:	443b      	add	r3, r7
 8006e96:	9309      	str	r3, [sp, #36]	; 0x24
 8006e98:	e768      	b.n	8006d6c <_vfiprintf_r+0x78>
 8006e9a:	460c      	mov	r4, r1
 8006e9c:	2001      	movs	r0, #1
 8006e9e:	fb0c 3202 	mla	r2, ip, r2, r3
 8006ea2:	e7a6      	b.n	8006df2 <_vfiprintf_r+0xfe>
 8006ea4:	2300      	movs	r3, #0
 8006ea6:	f04f 0c0a 	mov.w	ip, #10
 8006eaa:	4619      	mov	r1, r3
 8006eac:	3401      	adds	r4, #1
 8006eae:	9305      	str	r3, [sp, #20]
 8006eb0:	4620      	mov	r0, r4
 8006eb2:	f810 2b01 	ldrb.w	r2, [r0], #1
 8006eb6:	3a30      	subs	r2, #48	; 0x30
 8006eb8:	2a09      	cmp	r2, #9
 8006eba:	d903      	bls.n	8006ec4 <_vfiprintf_r+0x1d0>
 8006ebc:	2b00      	cmp	r3, #0
 8006ebe:	d0c6      	beq.n	8006e4e <_vfiprintf_r+0x15a>
 8006ec0:	9105      	str	r1, [sp, #20]
 8006ec2:	e7c4      	b.n	8006e4e <_vfiprintf_r+0x15a>
 8006ec4:	4604      	mov	r4, r0
 8006ec6:	2301      	movs	r3, #1
 8006ec8:	fb0c 2101 	mla	r1, ip, r1, r2
 8006ecc:	e7f0      	b.n	8006eb0 <_vfiprintf_r+0x1bc>
 8006ece:	ab03      	add	r3, sp, #12
 8006ed0:	9300      	str	r3, [sp, #0]
 8006ed2:	462a      	mov	r2, r5
 8006ed4:	4630      	mov	r0, r6
 8006ed6:	4b13      	ldr	r3, [pc, #76]	; (8006f24 <_vfiprintf_r+0x230>)
 8006ed8:	a904      	add	r1, sp, #16
 8006eda:	f7fd fbc5 	bl	8004668 <_printf_float>
 8006ede:	4607      	mov	r7, r0
 8006ee0:	1c78      	adds	r0, r7, #1
 8006ee2:	d1d6      	bne.n	8006e92 <_vfiprintf_r+0x19e>
 8006ee4:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8006ee6:	07d9      	lsls	r1, r3, #31
 8006ee8:	d405      	bmi.n	8006ef6 <_vfiprintf_r+0x202>
 8006eea:	89ab      	ldrh	r3, [r5, #12]
 8006eec:	059a      	lsls	r2, r3, #22
 8006eee:	d402      	bmi.n	8006ef6 <_vfiprintf_r+0x202>
 8006ef0:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8006ef2:	f7fe f90c 	bl	800510e <__retarget_lock_release_recursive>
 8006ef6:	89ab      	ldrh	r3, [r5, #12]
 8006ef8:	065b      	lsls	r3, r3, #25
 8006efa:	f53f af1d 	bmi.w	8006d38 <_vfiprintf_r+0x44>
 8006efe:	9809      	ldr	r0, [sp, #36]	; 0x24
 8006f00:	e71c      	b.n	8006d3c <_vfiprintf_r+0x48>
 8006f02:	ab03      	add	r3, sp, #12
 8006f04:	9300      	str	r3, [sp, #0]
 8006f06:	462a      	mov	r2, r5
 8006f08:	4630      	mov	r0, r6
 8006f0a:	4b06      	ldr	r3, [pc, #24]	; (8006f24 <_vfiprintf_r+0x230>)
 8006f0c:	a904      	add	r1, sp, #16
 8006f0e:	f7fd fe4b 	bl	8004ba8 <_printf_i>
 8006f12:	e7e4      	b.n	8006ede <_vfiprintf_r+0x1ea>
 8006f14:	08007584 	.word	0x08007584
 8006f18:	0800758a 	.word	0x0800758a
 8006f1c:	0800758e 	.word	0x0800758e
 8006f20:	08004669 	.word	0x08004669
 8006f24:	08006cd1 	.word	0x08006cd1

08006f28 <__swbuf_r>:
 8006f28:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006f2a:	460e      	mov	r6, r1
 8006f2c:	4614      	mov	r4, r2
 8006f2e:	4605      	mov	r5, r0
 8006f30:	b118      	cbz	r0, 8006f3a <__swbuf_r+0x12>
 8006f32:	6a03      	ldr	r3, [r0, #32]
 8006f34:	b90b      	cbnz	r3, 8006f3a <__swbuf_r+0x12>
 8006f36:	f7fd ffd3 	bl	8004ee0 <__sinit>
 8006f3a:	69a3      	ldr	r3, [r4, #24]
 8006f3c:	60a3      	str	r3, [r4, #8]
 8006f3e:	89a3      	ldrh	r3, [r4, #12]
 8006f40:	071a      	lsls	r2, r3, #28
 8006f42:	d525      	bpl.n	8006f90 <__swbuf_r+0x68>
 8006f44:	6923      	ldr	r3, [r4, #16]
 8006f46:	b31b      	cbz	r3, 8006f90 <__swbuf_r+0x68>
 8006f48:	6823      	ldr	r3, [r4, #0]
 8006f4a:	6922      	ldr	r2, [r4, #16]
 8006f4c:	b2f6      	uxtb	r6, r6
 8006f4e:	1a98      	subs	r0, r3, r2
 8006f50:	6963      	ldr	r3, [r4, #20]
 8006f52:	4637      	mov	r7, r6
 8006f54:	4283      	cmp	r3, r0
 8006f56:	dc04      	bgt.n	8006f62 <__swbuf_r+0x3a>
 8006f58:	4621      	mov	r1, r4
 8006f5a:	4628      	mov	r0, r5
 8006f5c:	f7ff fda2 	bl	8006aa4 <_fflush_r>
 8006f60:	b9e0      	cbnz	r0, 8006f9c <__swbuf_r+0x74>
 8006f62:	68a3      	ldr	r3, [r4, #8]
 8006f64:	3b01      	subs	r3, #1
 8006f66:	60a3      	str	r3, [r4, #8]
 8006f68:	6823      	ldr	r3, [r4, #0]
 8006f6a:	1c5a      	adds	r2, r3, #1
 8006f6c:	6022      	str	r2, [r4, #0]
 8006f6e:	701e      	strb	r6, [r3, #0]
 8006f70:	6962      	ldr	r2, [r4, #20]
 8006f72:	1c43      	adds	r3, r0, #1
 8006f74:	429a      	cmp	r2, r3
 8006f76:	d004      	beq.n	8006f82 <__swbuf_r+0x5a>
 8006f78:	89a3      	ldrh	r3, [r4, #12]
 8006f7a:	07db      	lsls	r3, r3, #31
 8006f7c:	d506      	bpl.n	8006f8c <__swbuf_r+0x64>
 8006f7e:	2e0a      	cmp	r6, #10
 8006f80:	d104      	bne.n	8006f8c <__swbuf_r+0x64>
 8006f82:	4621      	mov	r1, r4
 8006f84:	4628      	mov	r0, r5
 8006f86:	f7ff fd8d 	bl	8006aa4 <_fflush_r>
 8006f8a:	b938      	cbnz	r0, 8006f9c <__swbuf_r+0x74>
 8006f8c:	4638      	mov	r0, r7
 8006f8e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006f90:	4621      	mov	r1, r4
 8006f92:	4628      	mov	r0, r5
 8006f94:	f000 f806 	bl	8006fa4 <__swsetup_r>
 8006f98:	2800      	cmp	r0, #0
 8006f9a:	d0d5      	beq.n	8006f48 <__swbuf_r+0x20>
 8006f9c:	f04f 37ff 	mov.w	r7, #4294967295
 8006fa0:	e7f4      	b.n	8006f8c <__swbuf_r+0x64>
	...

08006fa4 <__swsetup_r>:
 8006fa4:	b538      	push	{r3, r4, r5, lr}
 8006fa6:	4b2a      	ldr	r3, [pc, #168]	; (8007050 <__swsetup_r+0xac>)
 8006fa8:	4605      	mov	r5, r0
 8006faa:	6818      	ldr	r0, [r3, #0]
 8006fac:	460c      	mov	r4, r1
 8006fae:	b118      	cbz	r0, 8006fb8 <__swsetup_r+0x14>
 8006fb0:	6a03      	ldr	r3, [r0, #32]
 8006fb2:	b90b      	cbnz	r3, 8006fb8 <__swsetup_r+0x14>
 8006fb4:	f7fd ff94 	bl	8004ee0 <__sinit>
 8006fb8:	89a3      	ldrh	r3, [r4, #12]
 8006fba:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8006fbe:	0718      	lsls	r0, r3, #28
 8006fc0:	d422      	bmi.n	8007008 <__swsetup_r+0x64>
 8006fc2:	06d9      	lsls	r1, r3, #27
 8006fc4:	d407      	bmi.n	8006fd6 <__swsetup_r+0x32>
 8006fc6:	2309      	movs	r3, #9
 8006fc8:	602b      	str	r3, [r5, #0]
 8006fca:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8006fce:	f04f 30ff 	mov.w	r0, #4294967295
 8006fd2:	81a3      	strh	r3, [r4, #12]
 8006fd4:	e034      	b.n	8007040 <__swsetup_r+0x9c>
 8006fd6:	0758      	lsls	r0, r3, #29
 8006fd8:	d512      	bpl.n	8007000 <__swsetup_r+0x5c>
 8006fda:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8006fdc:	b141      	cbz	r1, 8006ff0 <__swsetup_r+0x4c>
 8006fde:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8006fe2:	4299      	cmp	r1, r3
 8006fe4:	d002      	beq.n	8006fec <__swsetup_r+0x48>
 8006fe6:	4628      	mov	r0, r5
 8006fe8:	f7fe ff0e 	bl	8005e08 <_free_r>
 8006fec:	2300      	movs	r3, #0
 8006fee:	6363      	str	r3, [r4, #52]	; 0x34
 8006ff0:	89a3      	ldrh	r3, [r4, #12]
 8006ff2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8006ff6:	81a3      	strh	r3, [r4, #12]
 8006ff8:	2300      	movs	r3, #0
 8006ffa:	6063      	str	r3, [r4, #4]
 8006ffc:	6923      	ldr	r3, [r4, #16]
 8006ffe:	6023      	str	r3, [r4, #0]
 8007000:	89a3      	ldrh	r3, [r4, #12]
 8007002:	f043 0308 	orr.w	r3, r3, #8
 8007006:	81a3      	strh	r3, [r4, #12]
 8007008:	6923      	ldr	r3, [r4, #16]
 800700a:	b94b      	cbnz	r3, 8007020 <__swsetup_r+0x7c>
 800700c:	89a3      	ldrh	r3, [r4, #12]
 800700e:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8007012:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8007016:	d003      	beq.n	8007020 <__swsetup_r+0x7c>
 8007018:	4621      	mov	r1, r4
 800701a:	4628      	mov	r0, r5
 800701c:	f000 f883 	bl	8007126 <__smakebuf_r>
 8007020:	89a0      	ldrh	r0, [r4, #12]
 8007022:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8007026:	f010 0301 	ands.w	r3, r0, #1
 800702a:	d00a      	beq.n	8007042 <__swsetup_r+0x9e>
 800702c:	2300      	movs	r3, #0
 800702e:	60a3      	str	r3, [r4, #8]
 8007030:	6963      	ldr	r3, [r4, #20]
 8007032:	425b      	negs	r3, r3
 8007034:	61a3      	str	r3, [r4, #24]
 8007036:	6923      	ldr	r3, [r4, #16]
 8007038:	b943      	cbnz	r3, 800704c <__swsetup_r+0xa8>
 800703a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 800703e:	d1c4      	bne.n	8006fca <__swsetup_r+0x26>
 8007040:	bd38      	pop	{r3, r4, r5, pc}
 8007042:	0781      	lsls	r1, r0, #30
 8007044:	bf58      	it	pl
 8007046:	6963      	ldrpl	r3, [r4, #20]
 8007048:	60a3      	str	r3, [r4, #8]
 800704a:	e7f4      	b.n	8007036 <__swsetup_r+0x92>
 800704c:	2000      	movs	r0, #0
 800704e:	e7f7      	b.n	8007040 <__swsetup_r+0x9c>
 8007050:	20000080 	.word	0x20000080

08007054 <_raise_r>:
 8007054:	291f      	cmp	r1, #31
 8007056:	b538      	push	{r3, r4, r5, lr}
 8007058:	4604      	mov	r4, r0
 800705a:	460d      	mov	r5, r1
 800705c:	d904      	bls.n	8007068 <_raise_r+0x14>
 800705e:	2316      	movs	r3, #22
 8007060:	6003      	str	r3, [r0, #0]
 8007062:	f04f 30ff 	mov.w	r0, #4294967295
 8007066:	bd38      	pop	{r3, r4, r5, pc}
 8007068:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 800706a:	b112      	cbz	r2, 8007072 <_raise_r+0x1e>
 800706c:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8007070:	b94b      	cbnz	r3, 8007086 <_raise_r+0x32>
 8007072:	4620      	mov	r0, r4
 8007074:	f000 f830 	bl	80070d8 <_getpid_r>
 8007078:	462a      	mov	r2, r5
 800707a:	4601      	mov	r1, r0
 800707c:	4620      	mov	r0, r4
 800707e:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007082:	f000 b817 	b.w	80070b4 <_kill_r>
 8007086:	2b01      	cmp	r3, #1
 8007088:	d00a      	beq.n	80070a0 <_raise_r+0x4c>
 800708a:	1c59      	adds	r1, r3, #1
 800708c:	d103      	bne.n	8007096 <_raise_r+0x42>
 800708e:	2316      	movs	r3, #22
 8007090:	6003      	str	r3, [r0, #0]
 8007092:	2001      	movs	r0, #1
 8007094:	e7e7      	b.n	8007066 <_raise_r+0x12>
 8007096:	2400      	movs	r4, #0
 8007098:	4628      	mov	r0, r5
 800709a:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 800709e:	4798      	blx	r3
 80070a0:	2000      	movs	r0, #0
 80070a2:	e7e0      	b.n	8007066 <_raise_r+0x12>

080070a4 <raise>:
 80070a4:	4b02      	ldr	r3, [pc, #8]	; (80070b0 <raise+0xc>)
 80070a6:	4601      	mov	r1, r0
 80070a8:	6818      	ldr	r0, [r3, #0]
 80070aa:	f7ff bfd3 	b.w	8007054 <_raise_r>
 80070ae:	bf00      	nop
 80070b0:	20000080 	.word	0x20000080

080070b4 <_kill_r>:
 80070b4:	b538      	push	{r3, r4, r5, lr}
 80070b6:	2300      	movs	r3, #0
 80070b8:	4d06      	ldr	r5, [pc, #24]	; (80070d4 <_kill_r+0x20>)
 80070ba:	4604      	mov	r4, r0
 80070bc:	4608      	mov	r0, r1
 80070be:	4611      	mov	r1, r2
 80070c0:	602b      	str	r3, [r5, #0]
 80070c2:	f7fa ffbf 	bl	8002044 <_kill>
 80070c6:	1c43      	adds	r3, r0, #1
 80070c8:	d102      	bne.n	80070d0 <_kill_r+0x1c>
 80070ca:	682b      	ldr	r3, [r5, #0]
 80070cc:	b103      	cbz	r3, 80070d0 <_kill_r+0x1c>
 80070ce:	6023      	str	r3, [r4, #0]
 80070d0:	bd38      	pop	{r3, r4, r5, pc}
 80070d2:	bf00      	nop
 80070d4:	20000434 	.word	0x20000434

080070d8 <_getpid_r>:
 80070d8:	f7fa bfad 	b.w	8002036 <_getpid>

080070dc <__swhatbuf_r>:
 80070dc:	b570      	push	{r4, r5, r6, lr}
 80070de:	460c      	mov	r4, r1
 80070e0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80070e4:	4615      	mov	r5, r2
 80070e6:	2900      	cmp	r1, #0
 80070e8:	461e      	mov	r6, r3
 80070ea:	b096      	sub	sp, #88	; 0x58
 80070ec:	da0c      	bge.n	8007108 <__swhatbuf_r+0x2c>
 80070ee:	89a3      	ldrh	r3, [r4, #12]
 80070f0:	2100      	movs	r1, #0
 80070f2:	f013 0f80 	tst.w	r3, #128	; 0x80
 80070f6:	bf0c      	ite	eq
 80070f8:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 80070fc:	2340      	movne	r3, #64	; 0x40
 80070fe:	2000      	movs	r0, #0
 8007100:	6031      	str	r1, [r6, #0]
 8007102:	602b      	str	r3, [r5, #0]
 8007104:	b016      	add	sp, #88	; 0x58
 8007106:	bd70      	pop	{r4, r5, r6, pc}
 8007108:	466a      	mov	r2, sp
 800710a:	f000 f849 	bl	80071a0 <_fstat_r>
 800710e:	2800      	cmp	r0, #0
 8007110:	dbed      	blt.n	80070ee <__swhatbuf_r+0x12>
 8007112:	9901      	ldr	r1, [sp, #4]
 8007114:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8007118:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 800711c:	4259      	negs	r1, r3
 800711e:	4159      	adcs	r1, r3
 8007120:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8007124:	e7eb      	b.n	80070fe <__swhatbuf_r+0x22>

08007126 <__smakebuf_r>:
 8007126:	898b      	ldrh	r3, [r1, #12]
 8007128:	b573      	push	{r0, r1, r4, r5, r6, lr}
 800712a:	079d      	lsls	r5, r3, #30
 800712c:	4606      	mov	r6, r0
 800712e:	460c      	mov	r4, r1
 8007130:	d507      	bpl.n	8007142 <__smakebuf_r+0x1c>
 8007132:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8007136:	6023      	str	r3, [r4, #0]
 8007138:	6123      	str	r3, [r4, #16]
 800713a:	2301      	movs	r3, #1
 800713c:	6163      	str	r3, [r4, #20]
 800713e:	b002      	add	sp, #8
 8007140:	bd70      	pop	{r4, r5, r6, pc}
 8007142:	466a      	mov	r2, sp
 8007144:	ab01      	add	r3, sp, #4
 8007146:	f7ff ffc9 	bl	80070dc <__swhatbuf_r>
 800714a:	9900      	ldr	r1, [sp, #0]
 800714c:	4605      	mov	r5, r0
 800714e:	4630      	mov	r0, r6
 8007150:	f7fe feca 	bl	8005ee8 <_malloc_r>
 8007154:	b948      	cbnz	r0, 800716a <__smakebuf_r+0x44>
 8007156:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800715a:	059a      	lsls	r2, r3, #22
 800715c:	d4ef      	bmi.n	800713e <__smakebuf_r+0x18>
 800715e:	f023 0303 	bic.w	r3, r3, #3
 8007162:	f043 0302 	orr.w	r3, r3, #2
 8007166:	81a3      	strh	r3, [r4, #12]
 8007168:	e7e3      	b.n	8007132 <__smakebuf_r+0xc>
 800716a:	89a3      	ldrh	r3, [r4, #12]
 800716c:	6020      	str	r0, [r4, #0]
 800716e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8007172:	81a3      	strh	r3, [r4, #12]
 8007174:	9b00      	ldr	r3, [sp, #0]
 8007176:	6120      	str	r0, [r4, #16]
 8007178:	6163      	str	r3, [r4, #20]
 800717a:	9b01      	ldr	r3, [sp, #4]
 800717c:	b15b      	cbz	r3, 8007196 <__smakebuf_r+0x70>
 800717e:	4630      	mov	r0, r6
 8007180:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007184:	f000 f81e 	bl	80071c4 <_isatty_r>
 8007188:	b128      	cbz	r0, 8007196 <__smakebuf_r+0x70>
 800718a:	89a3      	ldrh	r3, [r4, #12]
 800718c:	f023 0303 	bic.w	r3, r3, #3
 8007190:	f043 0301 	orr.w	r3, r3, #1
 8007194:	81a3      	strh	r3, [r4, #12]
 8007196:	89a3      	ldrh	r3, [r4, #12]
 8007198:	431d      	orrs	r5, r3
 800719a:	81a5      	strh	r5, [r4, #12]
 800719c:	e7cf      	b.n	800713e <__smakebuf_r+0x18>
	...

080071a0 <_fstat_r>:
 80071a0:	b538      	push	{r3, r4, r5, lr}
 80071a2:	2300      	movs	r3, #0
 80071a4:	4d06      	ldr	r5, [pc, #24]	; (80071c0 <_fstat_r+0x20>)
 80071a6:	4604      	mov	r4, r0
 80071a8:	4608      	mov	r0, r1
 80071aa:	4611      	mov	r1, r2
 80071ac:	602b      	str	r3, [r5, #0]
 80071ae:	f7fa ffa7 	bl	8002100 <_fstat>
 80071b2:	1c43      	adds	r3, r0, #1
 80071b4:	d102      	bne.n	80071bc <_fstat_r+0x1c>
 80071b6:	682b      	ldr	r3, [r5, #0]
 80071b8:	b103      	cbz	r3, 80071bc <_fstat_r+0x1c>
 80071ba:	6023      	str	r3, [r4, #0]
 80071bc:	bd38      	pop	{r3, r4, r5, pc}
 80071be:	bf00      	nop
 80071c0:	20000434 	.word	0x20000434

080071c4 <_isatty_r>:
 80071c4:	b538      	push	{r3, r4, r5, lr}
 80071c6:	2300      	movs	r3, #0
 80071c8:	4d05      	ldr	r5, [pc, #20]	; (80071e0 <_isatty_r+0x1c>)
 80071ca:	4604      	mov	r4, r0
 80071cc:	4608      	mov	r0, r1
 80071ce:	602b      	str	r3, [r5, #0]
 80071d0:	f7fa ffa5 	bl	800211e <_isatty>
 80071d4:	1c43      	adds	r3, r0, #1
 80071d6:	d102      	bne.n	80071de <_isatty_r+0x1a>
 80071d8:	682b      	ldr	r3, [r5, #0]
 80071da:	b103      	cbz	r3, 80071de <_isatty_r+0x1a>
 80071dc:	6023      	str	r3, [r4, #0]
 80071de:	bd38      	pop	{r3, r4, r5, pc}
 80071e0:	20000434 	.word	0x20000434
 80071e4:	00000000 	.word	0x00000000

080071e8 <floor>:
 80071e8:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80071ec:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80071f0:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 80071f4:	2e13      	cmp	r6, #19
 80071f6:	460b      	mov	r3, r1
 80071f8:	4607      	mov	r7, r0
 80071fa:	460c      	mov	r4, r1
 80071fc:	4605      	mov	r5, r0
 80071fe:	dc32      	bgt.n	8007266 <floor+0x7e>
 8007200:	2e00      	cmp	r6, #0
 8007202:	da14      	bge.n	800722e <floor+0x46>
 8007204:	a334      	add	r3, pc, #208	; (adr r3, 80072d8 <floor+0xf0>)
 8007206:	e9d3 2300 	ldrd	r2, r3, [r3]
 800720a:	f7f9 f863 	bl	80002d4 <__adddf3>
 800720e:	2200      	movs	r2, #0
 8007210:	2300      	movs	r3, #0
 8007212:	f7f9 fca5 	bl	8000b60 <__aeabi_dcmpgt>
 8007216:	b138      	cbz	r0, 8007228 <floor+0x40>
 8007218:	2c00      	cmp	r4, #0
 800721a:	da56      	bge.n	80072ca <floor+0xe2>
 800721c:	f024 4400 	bic.w	r4, r4, #2147483648	; 0x80000000
 8007220:	4325      	orrs	r5, r4
 8007222:	d055      	beq.n	80072d0 <floor+0xe8>
 8007224:	2500      	movs	r5, #0
 8007226:	4c2e      	ldr	r4, [pc, #184]	; (80072e0 <floor+0xf8>)
 8007228:	4623      	mov	r3, r4
 800722a:	462f      	mov	r7, r5
 800722c:	e025      	b.n	800727a <floor+0x92>
 800722e:	4a2d      	ldr	r2, [pc, #180]	; (80072e4 <floor+0xfc>)
 8007230:	fa42 f806 	asr.w	r8, r2, r6
 8007234:	ea01 0208 	and.w	r2, r1, r8
 8007238:	4302      	orrs	r2, r0
 800723a:	d01e      	beq.n	800727a <floor+0x92>
 800723c:	a326      	add	r3, pc, #152	; (adr r3, 80072d8 <floor+0xf0>)
 800723e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007242:	f7f9 f847 	bl	80002d4 <__adddf3>
 8007246:	2200      	movs	r2, #0
 8007248:	2300      	movs	r3, #0
 800724a:	f7f9 fc89 	bl	8000b60 <__aeabi_dcmpgt>
 800724e:	2800      	cmp	r0, #0
 8007250:	d0ea      	beq.n	8007228 <floor+0x40>
 8007252:	2c00      	cmp	r4, #0
 8007254:	bfbe      	ittt	lt
 8007256:	f44f 1380 	movlt.w	r3, #1048576	; 0x100000
 800725a:	4133      	asrlt	r3, r6
 800725c:	18e4      	addlt	r4, r4, r3
 800725e:	2500      	movs	r5, #0
 8007260:	ea24 0408 	bic.w	r4, r4, r8
 8007264:	e7e0      	b.n	8007228 <floor+0x40>
 8007266:	2e33      	cmp	r6, #51	; 0x33
 8007268:	dd0b      	ble.n	8007282 <floor+0x9a>
 800726a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800726e:	d104      	bne.n	800727a <floor+0x92>
 8007270:	4602      	mov	r2, r0
 8007272:	f7f9 f82f 	bl	80002d4 <__adddf3>
 8007276:	4607      	mov	r7, r0
 8007278:	460b      	mov	r3, r1
 800727a:	4638      	mov	r0, r7
 800727c:	4619      	mov	r1, r3
 800727e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007282:	f04f 38ff 	mov.w	r8, #4294967295
 8007286:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800728a:	fa28 f802 	lsr.w	r8, r8, r2
 800728e:	ea10 0f08 	tst.w	r0, r8
 8007292:	d0f2      	beq.n	800727a <floor+0x92>
 8007294:	a310      	add	r3, pc, #64	; (adr r3, 80072d8 <floor+0xf0>)
 8007296:	e9d3 2300 	ldrd	r2, r3, [r3]
 800729a:	f7f9 f81b 	bl	80002d4 <__adddf3>
 800729e:	2200      	movs	r2, #0
 80072a0:	2300      	movs	r3, #0
 80072a2:	f7f9 fc5d 	bl	8000b60 <__aeabi_dcmpgt>
 80072a6:	2800      	cmp	r0, #0
 80072a8:	d0be      	beq.n	8007228 <floor+0x40>
 80072aa:	2c00      	cmp	r4, #0
 80072ac:	da0a      	bge.n	80072c4 <floor+0xdc>
 80072ae:	2e14      	cmp	r6, #20
 80072b0:	d101      	bne.n	80072b6 <floor+0xce>
 80072b2:	3401      	adds	r4, #1
 80072b4:	e006      	b.n	80072c4 <floor+0xdc>
 80072b6:	2301      	movs	r3, #1
 80072b8:	f1c6 0634 	rsb	r6, r6, #52	; 0x34
 80072bc:	40b3      	lsls	r3, r6
 80072be:	441d      	add	r5, r3
 80072c0:	42af      	cmp	r7, r5
 80072c2:	d8f6      	bhi.n	80072b2 <floor+0xca>
 80072c4:	ea25 0508 	bic.w	r5, r5, r8
 80072c8:	e7ae      	b.n	8007228 <floor+0x40>
 80072ca:	2500      	movs	r5, #0
 80072cc:	462c      	mov	r4, r5
 80072ce:	e7ab      	b.n	8007228 <floor+0x40>
 80072d0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 80072d4:	e7a8      	b.n	8007228 <floor+0x40>
 80072d6:	bf00      	nop
 80072d8:	8800759c 	.word	0x8800759c
 80072dc:	7e37e43c 	.word	0x7e37e43c
 80072e0:	bff00000 	.word	0xbff00000
 80072e4:	000fffff 	.word	0x000fffff

080072e8 <_init>:
 80072e8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072ea:	bf00      	nop
 80072ec:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072ee:	bc08      	pop	{r3}
 80072f0:	469e      	mov	lr, r3
 80072f2:	4770      	bx	lr

080072f4 <_fini>:
 80072f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80072f6:	bf00      	nop
 80072f8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80072fa:	bc08      	pop	{r3}
 80072fc:	469e      	mov	lr, r3
 80072fe:	4770      	bx	lr
